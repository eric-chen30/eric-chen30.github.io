{
    "version": "https://jsonfeed.org/version/1",
    "title": "CsStar • All posts by \"javascript\" category",
    "description": "Work Hard To Be A Better Man",
    "home_page_url": "http://csstar.top",
    "items": [
        {
            "id": "http://csstar.top/2022/03/14/%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/",
            "url": "http://csstar.top/2022/03/14/%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/",
            "title": "跨域问题",
            "date_published": "2022-03-14T11:51:06.000Z",
            "content_html": "<h1 id=\"跨域问题\"><a class=\"markdownIt-Anchor\" href=\"#跨域问题\">#</a> 跨域问题</h1>\n<blockquote>\n<p>浏览器处于安全考虑，有同源策略。同源意味着 协议、域名、端口必须一致，否则就不同源，如果不同源，Ajax 请求数据就会失败。</p>\n</blockquote>\n<h2 id=\"jsonp\"><a class=\"markdownIt-Anchor\" href=\"#jsonp\">#</a> JSONP</h2>\n<blockquote>\n<p>通过 script 标签指向需要请求数据的地址并提供一个回调函数接收数据</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=<span class=\"string\">&quot;http://domain/api?param1=a&amp;param2=b&amp;callback=jsonp&quot;</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">jsonp</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">    \t<span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>上面这种用法会有一个问题，当需要多次使用 jsonp 接收数据时，就会有函数同名的问题。因此，我们需要封装一个 jsonp 函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 封住的 jsonp（url，jsonpCallback，sucess）</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">jsonp</span>(<span class=\"params\">url,jsonpCallback,sucess</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 构建script元素</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> script = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;script&#x27;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 设置script元素的属性</span></span><br><span class=\"line\">    script.src = url;</span><br><span class=\"line\">    script.async = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    scriipt.type = <span class=\"string\">&quot;text/javascript&quot;</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 回调函数</span></span><br><span class=\"line\">    <span class=\"built_in\">window</span>[jsonpCallback] = functuin(data)&#123;</span><br><span class=\"line\">        sucess &amp;&amp; sucess(data);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.body.appendChild(script);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">jsonp(</span><br><span class=\"line\">\t<span class=\"string\">&quot;http://xxx&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;callback&quot;</span>,</span><br><span class=\"line\">    functuin(value)&#123;</span><br><span class=\"line\">    \t<span class=\"built_in\">console</span>.log(value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p><strong>jsonp 只能支持 get 请求，是很局限的，但是与下面所讲地 CORS 相比，优点在于可以兼容老式浏览器</strong></p>\n<h2 id=\"cors跨域资源共享\"><a class=\"markdownIt-Anchor\" href=\"#cors跨域资源共享\">#</a> CORS— 跨域资源共享</h2>\n<blockquote>\n<p>允许浏览器向跨源的服务器发送 <code>XMLHttpRequest</code>  请求，克服 Ajax 只能同源使用的限制。实现 CORS 的关键是服务器，只要服务器实现了 CORS 接口，就可以实现跨源通信</p>\n</blockquote>\n<h3 id=\"简单请求\"><a class=\"markdownIt-Anchor\" href=\"#简单请求\">#</a> 简单请求</h3>\n<p>对于简单请求，浏览器直接发送 CORS 请求，具体就是在头信息之中添加一个 <code>origin</code>  字段，该字段说明来自于哪个源（协议、域名、端口）</p>\n<ul>\n<li>如果该源不在许可范围内，服务器返回一个正常的 HTTP 响应，浏览器发现响应头中没有 <code>Access-Control-Allow-Origin</code>  字段，就知道请求失败，抛出错误被 <code>XMLHttpRequest</code>  对象的 <code>onerror</code>  回调函数捕获。</li>\n<li>如果该源在许可范围内，服务器会返回响应，并在响应头中添加一些字段信息：</li>\n</ul>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">Access-Control-Allow-Origin</span>: http://api.bob.com\t\t\t// 请求值要么是请求源，要么可以设置为 * ，接收任何域名的请求</span><br><span class=\"line\"><span class=\"attribute\">Access-Control-Allow-Credentials</span>: true\t\t\t\t\t// 是否允许发送cookie，默认cookie不包含在发送请求中，如果需要包含cookie，将该字段设置为true</span><br><span class=\"line\"><span class=\"attribute\">Access-Control-Expose-Headers</span>: FooBar\t\t\t\t\t// 想要拿到其它字段，需要指明</span><br><span class=\"line\"><span class=\"attribute\">Content-Type</span>: text/html; charset=utf-8</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>CORS 请求时， <code>XMLHttpRequest</code>  对象的 <code>getResponseHeader()</code>  方法只能拿到 6 个基本字段： <code>Cache-Control</code> 、 <code>Content-Language</code> 、 <code>Content-Type</code> 、 <code>Expires</code> 、 <code>Last-Modified</code> 、 <code>Pragma</code> 。</p>\n</blockquote>\n<p><strong>withCredentials</strong></p>\n<p>如果要把 cookie 发送到服务器，不仅仅需要把 <code>Access-Control-Allow-Credentials</code>  设置为 true，开发者在 Ajax 请求中还必须打开 <code>withCredentials</code>  属性，通过 <code>xhr.withCredentials = true;</code>  打开。</p>\n<p>否则，即使浏览器同意请求可携带 cookie，浏览器也不会发送。而有时，省略了 <code>withCredentials</code>  属性，浏览器还是会发送 cookie，这时候如果不需要发送 cookie，就设置 <code>xhr.withCredentials:false;</code> 。</p>\n<p>并且如果需要携带 cookie，那么 <code>Acess-Control-Allow-Origin</code>  属性就不能设置为 *，必须指定明确的源。</p>\n<h3 id=\"非简单请求\"><a class=\"markdownIt-Anchor\" href=\"#非简单请求\">#</a> 非简单请求</h3>\n<blockquote>\n<p>包含特殊请求，比如请求方式为 <code>put</code>  或者 <code>delete</code> ，或者 <code>Content-Type</code>  字段的类型为 <code>application/json</code> ，非简单的 CORS 请求在正式通信之前会进行 “预检”，通过返回的响应头信息进行判断。</p>\n</blockquote>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">OPTIONS /cors HTTP/1.1\t\t\t\t\t\t\t\t// 预检请求用的请求方法，用来询问</span><br><span class=\"line\"><span class=\"attribute\">Origin</span>: http://api.bob.com\t\t\t\t\t\t\t// 表示源</span><br><span class=\"line\"><span class=\"attribute\">Access-Control-Request-Method</span>: PUT\t\t\t\t\t// 列出浏览器的CORS请求会用到哪些HTTP方法</span><br><span class=\"line\"><span class=\"attribute\">Access-Control-Request-Headers</span>: X-Custom-Header\t\t// CORS请求额外发送的信息</span><br><span class=\"line\"><span class=\"attribute\">Host</span>: api.alice.com</span><br><span class=\"line\"><span class=\"attribute\">Accept-Language</span>: en-US</span><br><span class=\"line\"><span class=\"attribute\">Connection</span>: keep-alive</span><br><span class=\"line\"><span class=\"attribute\">User-Agent</span>: Mozilla/5.0...</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>预检请求的回应：检查了 <code>Origin</code> 、 <code>Access-Control-Request-Method</code>  和 <code>Access-Control-Request-Headers</code>  字段以后，确认允许跨源请求，就可以做出回应</p>\n</blockquote>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTP/1.1 <span class=\"number\">200</span> OK</span><br><span class=\"line\"><span class=\"attribute\">Date</span>: Mon, 01 Dec 2008 01:15:39 GMT</span><br><span class=\"line\"><span class=\"attribute\">Server</span>: Apache/2.0.61 (Unix)</span><br><span class=\"line\"><span class=\"attribute\">Access-Control-Allow-Origin</span>: http://api.bob.com\t\t\t// 表示该源可以进行数据请求</span><br><span class=\"line\"><span class=\"attribute\">Access-Control-Allow-Methods</span>: GET, POST, PUT\t\t\t// 支持跨域请求的方法</span><br><span class=\"line\"><span class=\"attribute\">Access-Control-Allow-Headers</span>: X-Custom-Header\t\t\t// 服务器支持的浏览器头信息字段</span><br><span class=\"line\"><span class=\"attribute\">Content-Type</span>: text/html; charset=utf-8</span><br><span class=\"line\"><span class=\"attribute\">Content-Encoding</span>: gzip</span><br><span class=\"line\"><span class=\"attribute\">Content-Length</span>: 0</span><br><span class=\"line\"><span class=\"attribute\">Keep-Alive</span>: timeout=2, max=100</span><br><span class=\"line\"><span class=\"attribute\">Connection</span>: Keep-Alive</span><br><span class=\"line\"><span class=\"attribute\">Content-Type</span>: text/plain</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>浏览器正常请求</p>\n</blockquote>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">PUT</span> <span class=\"string\">/cors</span> HTTP/1.1</span><br><span class=\"line\"><span class=\"attribute\">Origin</span>: http://api.bob.com\t\t\t// 浏览器自动添加的</span><br><span class=\"line\"><span class=\"attribute\">Host</span>: api.alice.com</span><br><span class=\"line\"><span class=\"attribute\">X-Custom-Header</span>: value</span><br><span class=\"line\"><span class=\"attribute\">Accept-Language</span>: en-US</span><br><span class=\"line\"><span class=\"attribute\">Connection</span>: keep-alive</span><br><span class=\"line\"><span class=\"attribute\">User-Agent</span>: Mozilla/5.0...</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>正常回应</p>\n</blockquote>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">Access-Control-Allow-Origin</span>: http://api.bob.com\t\t// 必须包含的</span><br><span class=\"line\"><span class=\"attribute\">Content-Type</span>: text/html; charset=utf-8</span><br></pre></td></tr></table></figure>",
            "tags": [
                "浏览器"
            ]
        },
        {
            "id": "http://csstar.top/2022/03/14/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%8E%AF%E5%A2%83/",
            "url": "http://csstar.top/2022/03/14/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%8E%AF%E5%A2%83/",
            "title": "浏览器环境",
            "date_published": "2022-03-14T02:32:24.000Z",
            "content_html": "<h1 id=\"script元素\"><a class=\"markdownIt-Anchor\" href=\"#script元素\">#</a> script 元素</h1>\n<h2 id=\"工作原理\"><a class=\"markdownIt-Anchor\" href=\"#工作原理\">#</a> 工作原理</h2>\n<ol>\n<li>浏览器一边下载 HTML 网页，一边开始解析，而不是等下载完后才可以解析</li>\n<li>解析的过程中，如果发现 script 元素，就会停止解析，渲染引擎将控制权转交给 JavaScript 引擎</li>\n<li>如果 script 元素引用了外部脚本，需要先下载外部脚本，如果没有引入，直接执行 script 元素内代码</li>\n<li>JavaScript 引擎执行完毕后，将控制权还给渲染引擎，然后继续向下解析 HTML 网页</li>\n</ol>\n<blockquote>\n<ul>\n<li>\n<p>为什么需要外部脚本下载完毕后才能渲染页面？  因为外部脚本可以修改 DOM，所以必须将控制权交给它，否则就很难控制</p>\n</li>\n<li>\n<p>加载外部脚本的时候，由于渲染引擎已经停止，如果这个外部文件加载需要很长时间，那么浏览器就会一直等，导致页面长时间没有响应，造成一种假死的状态，这被称为 “阻塞效应”</p>\n</li>\n<li>\n<p>重要的脚本最好放在文件头部，或者直接写入 script 标签，对于不重要的脚本可以放到页面底部，等页面渲染完后才执行，这样能缩短加载时间，避免浏览器首屏加载慢等情况</p>\n</li>\n<li>\n<p>当脚本文件位置不恰当时，还会产生一个问题：当页面 DOM 元素还没生成之前就进行 DOM 操作，代码执行肯定会报错，对于这种情况我们可以使用 DOMContentLoaded 事件的回调函数。DOM 结构生成之后才会触发，也可以使用 script 标签的 onload 属性。</p>\n</li>\n</ul>\n</blockquote>\n<h2 id=\"defer属性\"><a class=\"markdownIt-Anchor\" href=\"#defer属性\">#</a> defer 属性</h2>\n<blockquote>\n<p>解决脚本文件下载阻塞网页渲染的问题，使用 defer 属性，可以延迟脚本的执行，等 DOM 加载生成后，再执行脚本。</p>\n</blockquote>\n<p><strong>运行流程</strong></p>\n<ol>\n<li>浏览器开始解析 HTML 网页</li>\n<li>解析过程中，发现带有 defer 属性的 script 标签</li>\n<li>浏览器继续向下解析 HTML 网页，同时下载 script 标签加载的外部脚本</li>\n<li>浏览器完成解析 HTML 网页，返回去执行已经下载完成的脚本</li>\n</ol>\n<p><strong>注意</strong></p>\n<ol>\n<li>对于内置而不是外部加载的脚本，以及动态生成的 script 标签，defer 属性不起作用</li>\n<li>使用  <code>defer</code>  加载的外部脚本不应该使用 document.write 方法</li>\n</ol>\n<h2 id=\"async属性\"><a class=\"markdownIt-Anchor\" href=\"#async属性\">#</a> async 属性</h2>\n<blockquote>\n<p>使用另一个进程下载脚本，下载时不会阻塞页面渲染，解决 “阻塞效应” 的另一个方法</p>\n</blockquote>\n<ol>\n<li>浏览器开始解析 HTML 网页。</li>\n<li>解析过程中，发现带有 <code>async</code>  属性的 <code>script</code>  标签。</li>\n<li>浏览器继续往下解析 HTML 网页，同时并行下载 `` 标签中的外部脚本。</li>\n<li>脚本下载完成，浏览器暂停解析 HTML 网页，开始执行下载的脚本。</li>\n<li>脚本执行完毕，浏览器恢复解析 HTML 网页。</li>\n</ol>\n<blockquote>\n<p><code>async</code>  属性可以保证脚本下载的同时，浏览器继续渲染，一旦采用这个属性，脚本就无法顺序执行，先下载完的脚本先执行。</p>\n<p>脚本之间没有依赖关系，使用 <code>async</code>  属性，有依赖关系使用 <code>defer</code>  属性，同时存在，后者不起作用</p>\n</blockquote>\n<h2 id=\"脚本动态加载\"><a class=\"markdownIt-Anchor\" href=\"#脚本动态加载\">#</a> 脚本动态加载</h2>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">&#x27;a.js&#x27;</span>,<span class=\"string\">&#x27;b.js&#x27;</span>].forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">src</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> script = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;script&#x27;</span>);</span><br><span class=\"line\">    script.src = src;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.head.appendChild(script);</span><br><span class=\"line\">    src.async = <span class=\"literal\">false</span>;  \t<span class=\"comment\">// 保证脚本执行的顺序，同步执行</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>动态加载 <code>script</code>  标签的好处就是不会阻止页面渲染，也不会造成浏览器假死。</p>\n</blockquote>\n<h2 id=\"加载脚本使用的协议\"><a class=\"markdownIt-Anchor\" href=\"#加载脚本使用的协议\">#</a> 加载脚本使用的协议</h2>\n<ul>\n<li>如果不指定协议，浏览器默认使用  <code>HTTP</code>  协议下载</li>\n<li>如果需要使用  <code>HTTPS</code>  协议下载，需要指明</li>\n</ul>\n<h1 id=\"浏览器\"><a class=\"markdownIt-Anchor\" href=\"#浏览器\">#</a> 浏览器</h1>\n<blockquote>\n<p>核心：渲染引擎 和 JavaScript 解释器</p>\n</blockquote>\n<h2 id=\"渲染引擎\"><a class=\"markdownIt-Anchor\" href=\"#渲染引擎\">#</a> 渲染引擎</h2>\n<blockquote>\n<p>将网页代码渲染为用户可见的页面</p>\n</blockquote>\n<p><strong>不同浏览器的渲染引擎</strong></p>\n<ul>\n<li>Firefox：Gecko 引擎</li>\n<li>Safari：WebKit 引擎</li>\n<li>Chrome：Blink 引擎</li>\n<li>IE: Trident 引擎</li>\n<li>Edge: EdgeHTML 引擎</li>\n</ul>\n<p><strong>四个阶段</strong></p>\n<ul>\n<li>解析代码   HTML 解析器解析 HTML 代码为 DOM   CSS 解析器将 CSS 代码解析为 CSS 样式表</li>\n<li>对象合成    将 DOM 和 CSS 样式表进行结合，生成一个个 render 对象，最后构成 render 树</li>\n<li>布局          确定对象的坐标，计算出渲染树的布局</li>\n<li>绘制          将渲染树绘制到屏幕</li>\n</ul>\n<blockquote>\n<p>注：上面四步不是严格按顺序执行的，而是同步交叉执行</p>\n</blockquote>\n<h2 id=\"重流和重绘\"><a class=\"markdownIt-Anchor\" href=\"#重流和重绘\">#</a> 重流和重绘</h2>\n<blockquote>\n<p>渲染树转换为网页布局的过程为重流，布局显示到页面的过程为重绘。</p>\n<ul>\n<li>页面生成以后，脚本和样式的操作都会导致重流和重绘</li>\n<li>重流和重绘并不一定一起发生，重流一定会导致重绘，重绘不一定导致重流，比如改变元素颜色，进行了重绘，但没有改变布局，所以没有进行重流</li>\n<li>浏览器会进行智能优化，将重流和重绘的范围尽可能限制到较小的局部，最小化代价消耗</li>\n</ul>\n</blockquote>\n<p><strong>优化技巧</strong></p>\n<ul>\n<li>读取 DOM 或者写入 DOM，尽量不要写在一起，不要读一个 DOM 节点，就写入一个，这样会导致多次重流，影响页面渲染速度</li>\n<li>缓存 DOM 信息</li>\n<li>不要一项一项地改变 CSS 样式，使用 class 一次性改变样式</li>\n<li>使用  <code>documentFragment</code>  操作 DOM</li>\n<li>动画使用 <code>absolute</code>  定位或者 <code>fixed</code>  定位，减少对其它元素的影响</li>\n<li>只在必要时才显示隐藏元素</li>\n<li>使用 <code>window.requestAnimationFrame()</code> ，因为它可以推迟到代码下一次重流时执行，而不是立即要求页面重流</li>\n<li>使用 <code>虚拟DOM</code></li>\n</ul>\n<h2 id=\"javascript引擎\"><a class=\"markdownIt-Anchor\" href=\"#javascript引擎\">#</a> JavaScript 引擎</h2>\n<blockquote>\n<p>JavaScript 是一种 <code>解释型语言</code> ，也就是说，它不需要编译，由解释器实时运行。</p>\n</blockquote>\n<ul>\n<li>好处：运行和修改比较方便，刷新页面就可以重新解释</li>\n<li>缺点：每次运行都要调用解释器，系统开销大，运行速度慢于编译型语言</li>\n</ul>\n<p>现在的浏览器都将 JavaScript 进行一定的编译，生成类似于 <code>字节码</code> 的中间代码，以提高运行速度</p>\n<p>早期，浏览器内部对 JavaScript 处理过程如下：</p>\n<ol>\n<li>读取代码，进行词法分析（Lexical analysis），将代码分解成词元（token）。</li>\n<li>对词元进行语法分析（parsing），将代码整理成 “语法树”（syntax tree）。</li>\n<li>使用 “翻译器”（translator），将代码转为字节码（bytecode）。</li>\n<li>使用 “字节码解释器”（bytecode interpreter），将字节码转为机器码。</li>\n</ol>\n<blockquote>\n<p>参考链接：<a class=\"link\" href=\"http://javascript.ruanyifeng.com/bom/engine.html\">http://javascript.ruanyifeng.com/bom/engine.html<i class=\"fas fa-external-link-alt\"></i></a></p>\n</blockquote>\n",
            "tags": [
                "前端知识"
            ]
        },
        {
            "id": "http://csstar.top/2022/03/12/%E8%99%9A%E6%8B%9FDOM/",
            "url": "http://csstar.top/2022/03/12/%E8%99%9A%E6%8B%9FDOM/",
            "title": "虚拟DOM",
            "date_published": "2022-03-12T14:23:14.000Z",
            "content_html": "<h1 id=\"虚拟dom\"><a class=\"markdownIt-Anchor\" href=\"#虚拟dom\">#</a> 虚拟 DOM</h1>\n<h2 id=\"真实dom及其解析流程\"><a class=\"markdownIt-Anchor\" href=\"#真实dom及其解析流程\">#</a> 真实 DOM 及其解析流程</h2>\n<blockquote>\n<p>浏览器渲染引擎工作流程</p>\n</blockquote>\n<p>创建 DOM 树 ——》创建样式规则 ——》创建 Render 树 ——》布局 Layout——》绘制 painting</p>\n<ol>\n<li>HTML 分析器分析 HTML 元素，构建 DOM 树</li>\n<li>CSS 分析器分析 CSS 样式以及内联样式，生成页面的样式表</li>\n<li>将 DOM 树和样式表相关联，构建一颗 Render 树，这一过程称为 Attachment，每个 DOM 节点有 attach 方法，接收样式信息，返回 render 对象，这些 render 对象最终构建成一颗 render 树</li>\n<li>有了 Render 树，浏览器开始布局，为每个 render 对象在显示屏上确定精确坐标</li>\n<li>render 树和节点坐标都有了，然后调用每个节点的 paint 方法，进行页面绘制</li>\n</ol>\n<blockquote>\n<p>需要注意的几个问题</p>\n</blockquote>\n<ul>\n<li>DOM 树的构建是从文档加载完成开始的？</li>\n</ul>\n<p>构建 DOM 是一个渐进过程，为了提高用户体验度，需要尽快将渲染内容显示在页面上</p>\n<ul>\n<li>Render 树是 DOM 树和 CSS 样式表都构建完毕后才开始构建的吗？</li>\n</ul>\n<p>交叉进行的，一边加载、一边解析、一边渲染</p>\n<ul>\n<li>CSS 的解析是从右往左逆向解析的</li>\n</ul>\n<p>DOM 树从下往上解析比从上往下解析效率高，嵌套标签越多，解析越慢</p>\n<p><img src=\"/2022/03/12/%E8%99%9A%E6%8B%9FDOM/hexo.png\" alt></p>\n<h2 id=\"js操作真实dom\"><a class=\"markdownIt-Anchor\" href=\"#js操作真实dom\">#</a> JS 操作真实 DOM</h2>\n<p>原生 JS 或者 JQ 操作 DOM 时，浏览器会从构建 DOM 树开始从头到尾执行一遍流程。比如我们要更新多个 DOM 节点，浏览器会依次从头到尾进行执行，最终执行多次，其中包含了大量无用操作。频繁计算 DOM 节点坐标浪费了大量的性能，同时影响用户体验</p>\n<h2 id=\"虚拟dom-2\"><a class=\"markdownIt-Anchor\" href=\"#虚拟dom-2\">#</a> 虚拟 DOM</h2>\n<blockquote>\n<p>虚拟 DOM 就是为了解决浏览器性能问题而被设计出来的。</p>\n</blockquote>\n<p>对于多次更新 DOM 的操作，虚拟 DOM 不会立即执行 DOM，而是将这些 DOM 操作的更新经过 diff 算法后的内容保存到本地一个 JS 对象中，最终将这个 JS 对象一次性 attach 到 DOM 树上，再进行后续操作，避免了大量无用计算。</p>\n<p>页面的更新先反应到 JS 对象上，操作内存中的 JS 对象速度要快得多，更新完成后，再将最终的 JS 对象映射成真实的 DOM，交给浏览器去绘制。</p>\n<blockquote>\n<p>选择 diff 算法</p>\n</blockquote>\n<p>两棵树完全比较的时间复杂度是 O (n^3)，实际上 Reacte 的 diff 算法的时间复杂度为 O（n）。要实现这么低的时间复杂度，意味着只能比较平层的比较两棵树的节点，放弃了深度遍历。这样是一种以精确度换速度的做法，并且现实中前端页面通常也不会跨层移动 DOM 元素，使用这种算法是最优的。</p>\n<ul>\n<li>第一步，调用 patch 方法，传入新旧虚拟 DOM 进行同层对比</li>\n<li>第二步，调用 isSameNode 方法，对比新旧节点是否是同类型节点</li>\n<li>第三步， 如果不同，那么新节点将代替旧节点</li>\n<li>第四步，如果相同，调用 patchNode 进行节点对比\n<ol>\n<li>如果新旧节点都是文本节点，则新文本代替旧文本</li>\n<li>如果旧节点有子节点而新节点没有，则删除旧节点的子节点</li>\n<li>如果旧节点没有子节点，新节点有，则把子节点新增上去</li>\n<li>如果都有子节点，则调用 updateChildren 方法进行新旧子节点的对比</li>\n<li>子节点对比为首位对比法</li>\n</ol>\n</li>\n</ul>\n<blockquote>\n<p>附参考文档链接：<a class=\"link\" href=\"https://www.jianshu.com/p/af0b398602bc\">https://www.jianshu.com/p/af0b398602bc<i class=\"fas fa-external-link-alt\"></i></a></p>\n</blockquote>\n",
            "tags": [
                "DOM"
            ]
        },
        {
            "id": "http://csstar.top/2022/03/11/ES7-11/",
            "url": "http://csstar.top/2022/03/11/ES7-11/",
            "title": "ES7-11",
            "date_published": "2022-03-11T06:00:54.000Z",
            "content_html": "<h1 id=\"es7-11\"><a class=\"markdownIt-Anchor\" href=\"#es7-11\">#</a> ES7-11</h1>\n<h2 id=\"es7\"><a class=\"markdownIt-Anchor\" href=\"#es7\">#</a> ES7</h2>\n<ul>\n<li>Array.prototype.includes\t\t方法用来检测数组中是否包含某个元素，返回 boolean 值</li>\n<li>指数操作符  **                       用来实现幂运算，功能与 Math.pow 结果相同</li>\n</ul>\n<h2 id=\"es8\"><a class=\"markdownIt-Anchor\" href=\"#es8\">#</a> ES8</h2>\n<blockquote>\n<p>async 函数</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// return 不是一个 Promise  类型的对象  则函数结果为一个成功的Promise对象</span></span><br><span class=\"line\">    <span class=\"comment\">// throw 抛出错误，则函数结果为一个失败的Promise对象</span></span><br><span class=\"line\">    <span class=\"comment\">// 返回结果是一个 Promise对象 那么返回一个成功的Promise对象</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        resolve(<span class=\"string\">&#x27;sucess&#x27;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// reject(&#x27;error&#x27;);</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> result = fn();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 调用then方法</span></span><br><span class=\"line\">result.then(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;sucess&#x27;</span>);</span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"params\">reason</span> =&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.warn(<span class=\"string\">&#x27;reason&#x27;</span>);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>await 表达式</p>\n</blockquote>\n<ul>\n<li>必须放在 async 函数中</li>\n<li>右侧表达式一般为 promise 对象</li>\n<li>await 返回的是 promise 成功的值</li>\n<li>await 的 promise 如果失败了，会抛出异常，需要通过 try…catch 捕获异常</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>) =&gt;</span>&#123;</span><br><span class=\"line\">    resolve(<span class=\"string\">&#x27;sucess&#x27;</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> result = <span class=\"keyword\">await</span> p;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result);    <span class=\"comment\">// 返回一个成功的Promise对象</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>对象方法扩展</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> school = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">&#x27;eric&#x27;</span>,</span><br><span class=\"line\">    cities: [<span class=\"string\">&#x27;beijing&#x27;</span>,<span class=\"string\">&#x27;shanghai&#x27;</span>,<span class=\"string\">&#x27;guangzhou&#x27;</span>,<span class=\"string\">&#x27;shenzhen&#x27;</span>],</span><br><span class=\"line\">    xueke: [<span class=\"string\">&#x27;math&#x27;</span>,<span class=\"string\">&#x27;java&#x27;</span>,<span class=\"string\">&#x27;front&#x27;</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取对象所有键</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.keys(school));</span><br><span class=\"line\"><span class=\"comment\">// 获取对象所有值</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.values(school));</span><br><span class=\"line\"><span class=\"comment\">// 获取所有的键值</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.entries(school));</span><br><span class=\"line\"><span class=\"comment\">// 创建Map</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> m = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>(<span class=\"built_in\">Object</span>.entries(school));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(m.get(<span class=\"string\">&#x27;cities&#x27;</span>));</span><br><span class=\"line\"><span class=\"comment\">// 对象属性的描述对象</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.getPropertyDescriptors(school));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>,&#123;</span><br><span class=\"line\">    name: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 设置值</span></span><br><span class=\"line\">        value: <span class=\"string\">&#x27;eric&#x27;</span>,</span><br><span class=\"line\">        <span class=\"comment\">// 属性特性</span></span><br><span class=\"line\">        writable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        configurable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        enumerable: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"es9\"><a class=\"markdownIt-Anchor\" href=\"#es9\">#</a> ES9</h2>\n<blockquote>\n<ul>\n<li>Rest 参数与 spread 扩展运算符在 ES6 中只针对数组，在 ES9 中也支持对象</li>\n<li>正则扩展 - 命名捕获分组     （?<name>.*）      提取规则更加方便   结果 groups 是捕获内容</name></li>\n<li>正则扩展 - 反向断言      根据正则表达式做唯一识别</li>\n<li>正则表达式 - dotAll 模式     正则表达式中。匹配除回车外的任何单字符，标记【s】改变这种行为，匹配任意单个字符</li>\n</ul>\n</blockquote>\n<h2 id=\"es10\"><a class=\"markdownIt-Anchor\" href=\"#es10\">#</a> ES10</h2>\n<blockquote>\n<ul>\n<li>Object.fromEnteries                      将二维数组转换为对象</li>\n<li>trimStart 和 trimEnd                       清除左侧右侧空白</li>\n<li>Array.prototype.flat 和 flatMap       将多维数组进行降维    |       先 map 后 flat</li>\n<li>Symbol.prototype.description       获取描述</li>\n</ul>\n</blockquote>\n<h2 id=\"es11\"><a class=\"markdownIt-Anchor\" href=\"#es11\">#</a> ES11</h2>\n<blockquote>\n<ul>\n<li>私有属性      在对象中通过 #变量名来声明     实例化对象不能直接访问，可以在类的内部定义方法访问私有属性</li>\n<li>Promise.allSettled         返回一个在所有给定的 promise 都已经 <code>fulfilled</code>  或 <code>rejected</code>  后的 promise，并带有一个对象数组，每个对象表示对应的 promise 结果</li>\n</ul>\n<ol>\n<li>当有多个彼此不依赖的异步任务成功完成时，或者想知道每个 promise 的结果时，通常使用它</li>\n<li>promise.all（）更适合彼此相互依赖或者在其中任何一个 reject 时立即结束</li>\n</ol>\n<ul>\n<li>String.prototype.matchAll     返回的结果是一个可迭代对象   可以使用 for…of 进行迭代   也可以使用扩展运算符</li>\n<li>可选链操作符</li>\n<li>动态 import           需要使用的时候才导入</li>\n<li>Bigint 类型</li>\n<li>globalThis              绝对全局对象     始终指向全局对象</li>\n</ul>\n</blockquote>\n",
            "tags": [
                "ES7-11"
            ]
        },
        {
            "id": "http://csstar.top/2022/03/10/ES6/",
            "url": "http://csstar.top/2022/03/10/ES6/",
            "title": "ES6",
            "date_published": "2022-03-10T14:34:09.000Z",
            "content_html": "<h1 id=\"es6\"><a class=\"markdownIt-Anchor\" href=\"#es6\">#</a> ES6</h1>\n<h2 id=\"const和let\"><a class=\"markdownIt-Anchor\" href=\"#const和let\">#</a> const 和 let</h2>\n<blockquote>\n<p>let 关键字</p>\n</blockquote>\n<ul>\n<li>不允许重复声明</li>\n<li>块级作用域</li>\n<li>不存在变量提升</li>\n<li>不影响作用域链</li>\n</ul>\n<blockquote>\n<p>const 关键字</p>\n</blockquote>\n<ul>\n<li>必须初始化</li>\n<li>不允许重复声明</li>\n<li>不允许修改</li>\n<li>块级作用域</li>\n</ul>\n<blockquote>\n<p>注：对象属性修改和数组元素变化不会发生 const 错误</p>\n<p>应用场景：声明对象类型使用 const ，非对象类型声明选择 let</p>\n</blockquote>\n<h2 id=\"变量的解构赋值\"><a class=\"markdownIt-Anchor\" href=\"#变量的解构赋值\">#</a> 变量的解构赋值</h2>\n<blockquote>\n<p>按照一定模式，从数组和对象中提取值，对变量进行赋值，这就是解构赋值</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 数组的解构赋值</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"string\">&#x27;eric&#x27;</span>,<span class=\"string\">&#x27;chen&#x27;</span>,<span class=\"string\">&#x27;jack&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> [zhang, liu, li] = arr;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 对象的解构赋值</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> lin = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">&#x27;jack&#x27;</span>,</span><br><span class=\"line\">    tags: [<span class=\"string\">&#x27;ball&#x27;</span>,<span class=\"string\">&#x27;bull&#x27;</span>]</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;name, tages&#125; = lin;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 复杂解构</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> wangfei = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">&#x27;王菲&#x27;</span>,</span><br><span class=\"line\">    age: <span class=\"number\">18</span>,</span><br><span class=\"line\">    songs: [<span class=\"string\">&#x27;红豆&#x27;</span>,<span class=\"string\">&#x27;流年&#x27;</span>,<span class=\"string\">&#x27;暧昧&#x27;</span>],</span><br><span class=\"line\">    history: [</span><br><span class=\"line\">        &#123;<span class=\"attr\">name</span>: <span class=\"string\">&#x27;窦唯&#x27;</span>&#125;,</span><br><span class=\"line\">        &#123;<span class=\"attr\">name</span>: <span class=\"string\">&#x27;谢霆锋&#x27;</span>&#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span>&#123;<span class=\"attr\">songs</span>:[one,two,three],<span class=\"attr\">history</span>:[first,second,third]&#125; = weifang;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意： 频繁使用对象方法、数组元素、就可以使用解构赋值形式</p>\n</blockquote>\n<h2 id=\"模板字符串\"><a class=\"markdownIt-Anchor\" href=\"#模板字符串\">#</a> 模板字符串</h2>\n<blockquote>\n<p>增强版的字符串，用反引号来标识字符串</p>\n</blockquote>\n<ul>\n<li>字符串中可以出现换行符</li>\n<li>可以使用 ${xxx} 形式输出变量    (可以进行两个变量的字符串拼接来代替 + 号)</li>\n</ul>\n<h2 id=\"对象的简化写法\"><a class=\"markdownIt-Anchor\" href=\"#对象的简化写法\">#</a> 对象的简化写法</h2>\n<blockquote>\n<p>ES6 允许在大括号里面，直接写变量和函数，作为对象属性和方法</p>\n</blockquote>\n<ul>\n<li>优点是写法简洁、代码量更少</li>\n<li>缺点是代码可读性降低，格式化没那么标准</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> name = <span class=\"string\">&#x27;eric&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> slogon = <span class=\"string\">&#x27;i can do all things&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> improve = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;take it easy&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 属性和方法简写</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> csstar = &#123;</span><br><span class=\"line\">    name,</span><br><span class=\"line\">    slogon,</span><br><span class=\"line\">    improve,</span><br><span class=\"line\">    change() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;just change&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"箭头函数\"><a class=\"markdownIt-Anchor\" href=\"#箭头函数\">#</a> 箭头函数</h2>\n<ul>\n<li>\n<p>this 是静态的，始终指向定义时的对象，call 方法无法改变 this 指向</p>\n</li>\n<li>\n<p>不能作为构造函数实例化对象</p>\n</li>\n<li>\n<p>不能使用 arguments 变量</p>\n</li>\n<li>\n<p>箭头函数的简写</p>\n<ol>\n<li>省略小括号，当形参有且只有一个的时候</li>\n<li>省略花括号，当函数体只有一条语句的时候</li>\n</ol>\n</li>\n<li>\n<p>箭头函数适合与 this 无关的回调，定时器，数组的方法回调</p>\n</li>\n<li>\n<p>箭头函数不适合 this 有关的回调，事件的回调，对象的方法</p>\n</li>\n</ul>\n<h2 id=\"es6允许给函数参数赋值初始值\"><a class=\"markdownIt-Anchor\" href=\"#es6允许给函数参数赋值初始值\">#</a> ES6 允许给函数参数赋值初始值</h2>\n<ul>\n<li>形参初始值  具有默认值的参数，一般位置都要靠后（潜规则）</li>\n<li>与结构赋值结合</li>\n</ul>\n<h2 id=\"es6-rest参数获取函数的实参代替arguments\"><a class=\"markdownIt-Anchor\" href=\"#es6-rest参数获取函数的实参代替arguments\">#</a> ES6 rest 参数，获取函数的实参，代替 arguments</h2>\n<ol>\n<li>ES5 获取实参的方式</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">date</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">arguments</span>);\t\t<span class=\"comment\">// 返回一个对象</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">date(<span class=\"string\">&#x27;jack&#x27;</span>,<span class=\"string\">&#x27;eric&#x27;</span>,<span class=\"string\">&#x27;mike&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>rest 参数</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">date</span>(<span class=\"params\">...args</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(args);\t\t<span class=\"comment\">// 返回一个数组</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">date(<span class=\"string\">&#x27;jack&#x27;</span>,<span class=\"string\">&#x27;eric&#x27;</span>,<span class=\"string\">&#x27;mike&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>rest 参数必须要放到参数最后</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fun</span>(<span class=\"params\">a,b,...args</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(b);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(args);\t\t<span class=\"comment\">// 返回一个数组</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fun(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,);</span><br></pre></td></tr></table></figure>\n<h2 id=\"扩展运算符\"><a class=\"markdownIt-Anchor\" href=\"#扩展运算符\">#</a> 扩展运算符</h2>\n<blockquote>\n<p>将【数组】转换为逗号分隔的【参数序列】</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 声明一个数组</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> boys = [<span class=\"string\">&#x27;jack&#x27;</span>,<span class=\"string\">&#x27;mike&#x27;</span>,<span class=\"string\">&#x27;eric&#x27;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">chunwan</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">chunwan(...boys);\t<span class=\"comment\">// 相当于 chunwan(&#x27;jack&#x27;,&#x27;mike&#x27;,&#x27;eric&#x27;);</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>扩展运算符的运用</p>\n</blockquote>\n<ul>\n<li>数组的合并</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr1 = [<span class=\"string\">&#x27;a&#x27;</span>,<span class=\"string\">&#x27;b&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> arr2 = [<span class=\"string\">&#x27;c&#x27;</span>,<span class=\"string\">&#x27;d&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> combineArr = arr1.concat(arr2);  <span class=\"comment\">// es5</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> combineArr2 = [...arr1, ...arr2];  <span class=\"comment\">// es6</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(conbineArr,combineArr2);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>数组的克隆</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr1 = [<span class=\"string\">&#x27;e&#x27;</span>,<span class=\"string\">&#x27;g&#x27;</span>,<span class=\"string\">&#x27;m&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> arr2 = [...arr1];   <span class=\"comment\">// [&#x27;e&#x27;,&#x27;g&#x27;,&#x27;m&#x27;]</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>将伪数组转换为真正的数组</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> divs = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">&#x27;div&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> divArr = [...divs];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(divArr);   <span class=\"comment\">// arguments</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"symbol-的基本使用\"><a class=\"markdownIt-Anchor\" href=\"#symbol-的基本使用\">#</a> symbol 的基本使用</h2>\n<blockquote>\n<p>symbol 数据类型的特点，是 JavaScript 语言的第七种数据类型</p>\n</blockquote>\n<ul>\n<li>sumbol 的值是唯一的，用来解决命名冲突的问题</li>\n<li>symbol 值不能与其它数据进行运算</li>\n<li>symbol 定义的对象属性不能使用 for… in 循环遍历，Reflect.ownKeys 获取对象键名</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建symbol</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> s = <span class=\"built_in\">Symbol</span>();</span><br><span class=\"line\"><span class=\"keyword\">let</span> s2 = <span class=\"built_in\">Symbol</span>(<span class=\"string\">&#x27;shang&#x27;</span>);\t\t<span class=\"comment\">// 字符串里只是一种标识</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> s3 = <span class=\"built_in\">Symbol</span>(<span class=\"string\">&#x27;shang&#x27;</span>);\t\t<span class=\"comment\">// 这里的Symbol是函数</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s2 == s3);\t\t\t<span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 通过Symbol.for()方式创建</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> s4 = <span class=\"built_in\">Symbol</span>.for(<span class=\"string\">&#x27;shang&#x27;</span>);\t<span class=\"comment\">// 这里的Symbol是对象</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> s5 = <span class=\"built_in\">Symbol</span>.for(<span class=\"string\">&#x27;shang&#x27;</span>);\t<span class=\"comment\">// 通过描述的字符串得出唯一的symbol值</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s4 = s5);\t\t\t<span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>JavaScript 数据类型 : USONB</p>\n</blockquote>\n<ul>\n<li>u\t\tundefined</li>\n<li>s       string    symbol</li>\n<li>o       object</li>\n<li>n        null      number</li>\n<li>b        boolean</li>\n</ul>\n<blockquote>\n<p>symbol 是独一无二的值，用来给对象添加属性和方法</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 给game对象添加属性和方法</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> game = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 声明一个对象</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> methods = &#123;</span><br><span class=\"line\">    up: <span class=\"built_in\">Symbol</span>(),</span><br><span class=\"line\">    down: <span class=\"built_in\">Symbol</span>()</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">game[methods.up] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;up&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">game[methods.down] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;down&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> youxi = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">&#x27;langrensha,</span></span><br><span class=\"line\"><span class=\"string\">    [Symbol(&#x27;</span>say<span class=\"string\">&#x27;)] : function()&#123;</span></span><br><span class=\"line\"><span class=\"string\">        console.log(&#x27;</span>i can say<span class=\"string\">&#x27;）;</span></span><br><span class=\"line\"><span class=\"string\">    &#125;，</span></span><br><span class=\"line\"><span class=\"string\">    [Symbol(&#x27;</span>zibao<span class=\"string\">&#x27;)]: function() &#123;</span></span><br><span class=\"line\"><span class=\"string\">        console.log(&#x27;</span>i can zibao<span class=\"string\">&#x27;);</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>symbol 内置属性：这些属性对应的值都是用来控制这个对象在特定场景下的一个表现</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>Symbol.hasInstance</th>\n<th>当其他对象使用 instanceof 运算符，判断是否为该对象的实例时，会调用这个方法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Symbol.replace</strong></td>\n<td><strong>当该对象被 str.replace (myObject) 方法调用时，会返回该方法的返回值</strong></td>\n</tr>\n<tr>\n<td><strong>Symbol.split</strong></td>\n<td><strong>当该对象被 str.split (myObject) 方法调用时，会返回该方法的返回值</strong></td>\n</tr>\n<tr>\n<td><strong>Symbol.iterator</strong></td>\n<td><strong>对象进行 for…of 循环时，会调用 Symbol.iterator 方法，返回该对象的默认遍历器</strong></td>\n</tr>\n<tr>\n<td><strong>…</strong></td>\n<td><strong>…</strong></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"迭代器\"><a class=\"markdownIt-Anchor\" href=\"#迭代器\">#</a> 迭代器</h2>\n<blockquote>\n<p>迭代器是一种接口，为各种不同的数据结构提供统一的访问机制，任何数据只要部署了 iterator 接口 (对象里的一个属性)，可完成遍历操作</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> xiyou = [<span class=\"string\">&#x27;tangsheng&#x27;</span>, <span class=\"string\">&#x27;sunyukong&#x27;</span>, <span class=\"string\">&#x27;shasheng&#x27;</span>, <span class=\"string\">&#x27;zhubajie&#x27;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> v <span class=\"keyword\">of</span> xiyou)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(v);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> iterator = xiyou[<span class=\"built_in\">Symbol</span>.iterator]();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next());</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next());</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next());</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 自定义遍历数据</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> banji = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">&#x27;终极一班&#x27;</span>,</span><br><span class=\"line\">    stus: [</span><br><span class=\"line\">        <span class=\"string\">&#x27;xiaoming&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;xiaotian&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;xiaoning&#x27;</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    [<span class=\"built_in\">Symbol</span>.iterator]()&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 声明一个索引变量</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> _this = <span class=\"built_in\">this</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            next: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(index &lt; _this.stus.length)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">const</span> result = &#123;<span class=\"attr\">value</span>: _this.stus[index],<span class=\"attr\">done</span>: <span class=\"literal\">false</span>&#125;;</span><br><span class=\"line\">                    <span class=\"comment\">// 下标自增</span></span><br><span class=\"line\">                    index++;</span><br><span class=\"line\">                    <span class=\"comment\">// 返回结果</span></span><br><span class=\"line\">                    <span class=\"keyword\">return</span> result</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> &#123;<span class=\"attr\">value</span>: <span class=\"literal\">undefined</span>, <span class=\"attr\">done</span>: <span class=\"literal\">true</span>&#125;;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> v <span class=\"keyword\">of</span> banji) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>,log(v);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">banji.stus.forEach();   <span class=\"comment\">// forEach() 是数组的方法，不能用于对象</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"生成器\"><a class=\"markdownIt-Anchor\" href=\"#生成器\">#</a> 生成器</h2>\n<blockquote>\n<p>特殊的函数     异步编程 （比如回调函数）</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> * <span class=\"title\">gen</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">//  console.log(&quot;hello generator&quot;);</span></span><br><span class=\"line\">    <span class=\"comment\">// yield 将代码进行分块</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;111&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">     <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;222&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">     <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;333&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">     <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;444&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> iterator = gen();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 遍历</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> v <span class=\"keyword\">of</span> gen)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(v);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>生成函数的参数</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> * <span class=\"title\">gen</span>(<span class=\"params\">arg</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(arg);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> one = <span class=\"keyword\">yield</span> <span class=\"number\">111</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(one);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> two = <span class=\"keyword\">yield</span> <span class=\"number\">222</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(two);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> three = <span class=\"keyword\">yield</span> <span class=\"number\">333</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(three);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> iterator = gen(<span class=\"string\">&#x27;AAA&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">// next方法可以传入实参  传入的参数将作为上一个yeild语句的返回结果</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next());</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next(<span class=\"string\">&#x27;BBB&#x27;</span>));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next(<span class=\"string\">&#x27;CCC&#x27;</span>));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next(<span class=\"string\">&#x27;DDD&#x27;</span>));</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>生成器函数实例</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 异步编程：文件操作   网络操作（AJAX、request）  数据库操作</span></span><br><span class=\"line\"><span class=\"comment\">// 1s后控制台输出 111   2s后输出222   3s后输出333</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 可以达到效果，但是不具有易读性、且难以调试    称为【回调地狱】</span></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">111</span>);</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">   \t\t <span class=\"built_in\">console</span>.log(<span class=\"number\">222</span>);</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">   \t\t\t <span class=\"built_in\">console</span>.log(<span class=\"number\">333</span>);</span><br><span class=\"line\">\t\t&#125;,<span class=\"number\">3000</span>);</span><br><span class=\"line\">\t&#125;,<span class=\"number\">2000</span>);</span><br><span class=\"line\">&#125;,<span class=\"number\">1000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 生成器函数 解决了 回调地狱</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">one</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"number\">111</span>);</span><br><span class=\"line\">        iterator.next();</span><br><span class=\"line\">    &#125;,<span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">two</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"number\">222</span>);</span><br><span class=\"line\">        iterator.next();</span><br><span class=\"line\">    &#125;,<span class=\"number\">2000</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">three</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"number\">333</span>);</span><br><span class=\"line\">        iterator.next();</span><br><span class=\"line\">    &#125;,<span class=\"number\">3000</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> * <span class=\"title\">gen</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> one();</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> two();</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> three();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 调用生成器函数</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> iterator = gen();</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取数据  用户数据  订单数据  商品数据</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getUsers</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> data = <span class=\"string\">&#x27;用户数据&#x27;</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 调用next方法，并将数据传入</span></span><br><span class=\"line\">        iterator.next(data);</span><br><span class=\"line\">    &#125;,<span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getOrders</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> data = <span class=\"string\">&#x27;订单数据&#x27;</span>;</span><br><span class=\"line\">        iterator.next(data);</span><br><span class=\"line\">    &#125;,<span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getGoods</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> data = <span class=\"string\">&#x27;商品数据&#x27;</span>;</span><br><span class=\"line\">    &#125;,<span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> * <span class=\"title\">gen</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> users = <span class=\"keyword\">yield</span> getUsers();</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(users);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> orders = <span class=\"keyword\">yield</span> getOrders();</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(orders);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> goods = <span class=\"keyword\">yield</span> getGoods();</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(goods);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> iterator = gen();</span><br><span class=\"line\">iterator.next();</span><br></pre></td></tr></table></figure>\n<h2 id=\"promise\"><a class=\"markdownIt-Anchor\" href=\"#promise\">#</a> Promise</h2>\n<blockquote>\n<p>异步编程新的解决方案，语法上是一个构造函数，用来封装异步操作并可以获取其成功或失败的结果</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve,reject</span>) =&gt; </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">let</span> data = <span class=\"string\">&#x27;数据库中的用户数据&#x27;</span>;</span><br><span class=\"line\">    \t\tresolve(data);</span><br><span class=\"line\">    \t\t<span class=\"comment\">// let err = &#x27;数据发生错误&#x27;;</span></span><br><span class=\"line\">            <span class=\"comment\">// reject(err);</span></span><br><span class=\"line\">\t\t&#125;,<span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 调用promise对象的 then 方法</span></span><br><span class=\"line\">p.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(value);</span><br><span class=\"line\">&#125;,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">reason</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(reason);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>读取文件：使用 Promise 封装</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 前提需要引入fs模块</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>)</span>&#123;</span><br><span class=\"line\">   fs.readFile(<span class=\"string\">&quot;路径&quot;</span>, <span class=\"function\">(<span class=\"params\">err,data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span>(err)  reject(err);</span><br><span class=\"line\">       resolve(data);</span><br><span class=\"line\">   &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">p.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(value.toString());</span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">reason</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;读取失败&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>使用 Promise 封装 AJAX 请求</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1. 创建对象</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\"><span class=\"comment\">// 2. 初始化</span></span><br><span class=\"line\">xhr.open(<span class=\"string\">&quot;GET&quot;</span>,<span class=\"string\">&quot;https://api.apiopen.top/...&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 3. 发送</span></span><br><span class=\"line\">xhr.send();</span><br><span class=\"line\"><span class=\"comment\">// 4.绑定事件  处理响应结果</span></span><br><span class=\"line\">xhr.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(xhr.status &gt;= <span class=\"number\">200</span> &amp;&amp; xhr.status &lt; <span class=\"number\">300</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(xhr.response);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.error(xhr.status);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1. 创建对象</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">    <span class=\"comment\">// 2. 初始化</span></span><br><span class=\"line\">    xhr.open(<span class=\"string\">&quot;GET&quot;</span>,<span class=\"string\">&quot;https://api.apiopen.top/...&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 3. 发送</span></span><br><span class=\"line\">    xhr.send();</span><br><span class=\"line\">    <span class=\"comment\">// 4.绑定事件  处理响应结果</span></span><br><span class=\"line\">    xhr.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(xhr.status &gt;= <span class=\"number\">200</span> &amp;&amp; xhr.status &lt; <span class=\"number\">300</span>)&#123;</span><br><span class=\"line\">            resolve(xhr.response);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            reject(xhr.status);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 指定回调</span></span><br><span class=\"line\">p.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(value);</span><br><span class=\"line\">&#125;,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">reason</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(reason);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Promise.prototype.then</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// p 为 Promise对象</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> result = p.then(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(value);</span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"params\">reason</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(reason);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result);   <span class=\"comment\">// then方法返回的也是一个Promise</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>then 方法返回的也是一个 Promise 对象</p>\n</li>\n<li>\n<p>对象的状态由回调函数的执行结果决定</p>\n<ol>\n<li>回调函数返回的结果是 【非 Promise 类型的属性】，状态为成功，返回值为对象成功的值</li>\n<li>如果是 Promise 对象，那么 Promise 对象的状态决定了 then 方法返回的 Promise 对象的状态</li>\n</ol>\n</li>\n<li>\n<p>由于返回的结果都是 Promise 对象，所以通过 then 方法可以链式调用，解决了回调地狱</p>\n</li>\n</ul>\n<blockquote>\n<p>使用 Promise 异步读取多个文件并合并内容</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>)=&gt;</span> &#123;</span><br><span class=\"line\">    fs.readFile(<span class=\"string\">&quot;path1&quot;</span>, <span class=\"function\">(<span class=\"params\">err,data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 理论上这里要进行读取成功/失败的判断，确保成功前提下，这里直接调用resolve</span></span><br><span class=\"line\">        resolve(data);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">p.then(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</span><br><span class=\"line\">    fs.readFile(<span class=\"string\">&quot;path2&quot;</span>, <span class=\"function\">(<span class=\"params\">err,data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        resolve(value, data);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        fs.readFile(<span class=\"string\">&quot;path3&quot;</span>, <span class=\"function\">(<span class=\"params\">err,data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            value.push(data);</span><br><span class=\"line\">            resolve(value);</span><br><span class=\"line\">    \t&#125;);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(value.join(<span class=\"string\">&#x27;\\r\\n&#x27;</span>));</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>catch 方法：用于指定发生错误的回调函数</p>\n</blockquote>\n<ul>\n<li>\n<p>可以看作是 then 方法的一个语法糖，回调函数只用传一个参数</p>\n</li>\n<li>\n<p>then 方法指定的回调函数如果允许抛出错误，也会被 catch 捕捉</p>\n</li>\n<li>\n<p>错误总会被下一个 catch 语句捕获</p>\n</li>\n</ul>\n<h2 id=\"set集合\"><a class=\"markdownIt-Anchor\" href=\"#set集合\">#</a> Set (集合)</h2>\n<blockquote>\n<p>ES6 提供的新的数据结构 Set (集合)。类似于数组，但是成员的值都是唯一的，且实现了 iterator 接口，可以使用扩展运算符和 for…of 进行遍历</p>\n</blockquote>\n<ul>\n<li>属性和方法如下：\n<ol>\n<li>size\t\t返回集合元素个数</li>\n<li>add       向集合中添加新元素，返回当前集合</li>\n<li>delete    删除元素，返回 boolean 值</li>\n<li>has         检查集合中是否包含某个元素，返回 boolean 值</li>\n<li>clear       清空集合，返回 undefined</li>\n</ol>\n</li>\n</ul>\n<blockquote>\n<p>集合实践</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">4</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2 = [<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 去重</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> result = [...new <span class=\"built_in\">Set</span>(arr)];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 交集</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> result1 = [...new <span class=\"built_in\">Set</span>(arr)].filter(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>(arr2).has(item));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result1);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 并集</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> union = [...new <span class=\"built_in\">Set</span>([...arr, ...arr2])];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(union);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 差集</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> diff = [...new <span class=\"built_in\">Set</span>(arr)].filter(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> !(<span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>(arr2).has(item)));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(diff);</span><br></pre></td></tr></table></figure>\n<h2 id=\"map\"><a class=\"markdownIt-Anchor\" href=\"#map\">#</a> Map</h2>\n<blockquote>\n<p>类似于对象，是键值对的集合</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义Map</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> m = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\"><span class=\"comment\">// 设置键值</span></span><br><span class=\"line\">m.set(<span class=\"string\">&#x27;name&#x27;</span>,<span class=\"string\">&#x27;shangguigu&#x27;</span>);</span><br><span class=\"line\">m.set(<span class=\"string\">&#x27;change&#x27;</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i can change you&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">let</span> key = &#123;</span><br><span class=\"line\">    school : <span class=\"string\">&#x27;atguigu&#x27;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">m.set(key, [<span class=\"string\">&#x27;北京&#x27;</span>,<span class=\"string\">&#x27;上海&#x27;</span>]);</span><br><span class=\"line\"><span class=\"comment\">// 获取键值对个数</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(m.size);</span><br><span class=\"line\"><span class=\"comment\">// 删除</span></span><br><span class=\"line\">m.delete(<span class=\"string\">&#x27;name&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 获取键的值</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(m.get(<span class=\"string\">&#x27;change&#x27;</span>));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(m.get(<span class=\"string\">&#x27;key&#x27;</span>));</span><br></pre></td></tr></table></figure>\n<h2 id=\"class类\"><a class=\"markdownIt-Anchor\" href=\"#class类\">#</a> class 类</h2>\n<blockquote>\n<p>ES6 引入 class 类，作为对象的模板，可以看作是一个语法糖</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ES5</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Phone</span>(<span class=\"params\">brand, price</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.brand = brand;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.price = price;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Phone.prototype.call = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i can call&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> one = <span class=\"keyword\">new</span> Phone(<span class=\"string\">&#x27;1+&#x27;</span>,<span class=\"number\">1999</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ES6</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PhonePlus</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 构造方法，名字不能更改</span></span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(brand,price)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.brand = brand;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.price = price;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 方法必须使用该语法，不能使用 ES 5的对象完整形式</span></span><br><span class=\"line\">    call() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i can call&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> onePlus = <span class=\"keyword\">new</span> PhonePlus(<span class=\"string\">&#x27;1+&#x27;</span>,<span class=\"number\">1999</span>);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>实例对象和函数对象的属性和方法是不相通的，函数对象的属性称为静态成员，以面向对象的角度来看，函数对象的属性属于类，不属于实例对象</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Phone</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Phone.name = <span class=\"string\">&#x27;shouji&#x27;</span>;</span><br><span class=\"line\">Phone.change = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i can change&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> nokia = <span class=\"keyword\">new</span> Phone();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(nokia.name);   <span class=\"comment\">// undefined</span></span><br><span class=\"line\">nokia.change();   \t\t   <span class=\"comment\">// is not a function</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 函数的原型对象和实例对象的属性和方法是相通的</span></span><br><span class=\"line\">Phone.prototype.size = <span class=\"string\">&#x27;5.5inch&#x27;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(nokia.size);\t<span class=\"comment\">// 5.5inch</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// static 标注的属性和方法属于类而不属于实例对象</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PhonePlus</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> name = <span class=\"string\">&#x27;shouji&#x27;</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> change()&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i can change&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> onePlus = <span class=\"keyword\">new</span> PhonePlus();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(onePlus.name);\t<span class=\"comment\">// undefined</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Phone.name);    <span class=\"comment\">// shouji</span></span><br><span class=\"line\">onePlus.change();</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>对象继承</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ES 5 实现函数继承</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Phone</span>(<span class=\"params\">brand, price</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.brand = brand;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.price = price;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Phone.prototype.call = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i can call&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SmartPhone</span>(<span class=\"params\">brand,price,color,size</span>)</span>&#123;</span><br><span class=\"line\">    Phone.call(<span class=\"built_in\">this</span>,brand,price);</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.color = color;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.size = size;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置子级构造函数的模型</span></span><br><span class=\"line\">SmartPhone.prototype = <span class=\"keyword\">new</span> Phone;</span><br><span class=\"line\">SmartPhone.prototype.constructor = SmartPhone;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 声明字类的方法</span></span><br><span class=\"line\">SmartPhone.prototype.photo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i can take photos&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">SmartPhone.prototype.game = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i can play game&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> stin = <span class=\"keyword\">new</span> SmartPhone(<span class=\"string\">&#x27;stin&#x27;</span>,<span class=\"number\">2499</span>,<span class=\"string\">&#x27;black&#x27;</span>,<span class=\"string\">&#x27;5.5inch&#x27;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(stin);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ES 6 实现继承</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Phone</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(brand,price) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.brand = brand;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.price = price;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    call() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i can call&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SmartPhone</span> <span class=\"keyword\">extends</span> <span class=\"title\">Phone</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(brand,price,color,size)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(brand,price);</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.color = color;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.size = size;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    photo() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i can take photo&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    game()&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i can play games&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> xiaomi = <span class=\"keyword\">new</span> SmartPhone(<span class=\"string\">&#x27;xiaomi&#x27;</span>,<span class=\"number\">1999</span>,<span class=\"string\">&#x27;black&#x27;</span>,<span class=\"string\">&#x27;4.7inch&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>字类对父类进行重写</p>\n</blockquote>\n<ul>\n<li>字类不能调用通过 super 调用父类的同名方法，只能进行重写</li>\n<li>字类重写的方法覆盖父类同名方法，自定义字类功能</li>\n</ul>\n<blockquote>\n<p>get 和 set</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Phone</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">get</span> <span class=\"title\">price</span>()&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;调用price属性就会执行，且属性值为return返回值&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&#x27;abcdefg&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 必须有一个参数</span></span><br><span class=\"line\">    <span class=\"keyword\">set</span> <span class=\"title\">price</span>(<span class=\"params\">newVal</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;价格属性被修改了&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 实例化对象</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> s = <span class=\"keyword\">new</span> Phone();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s.price);    <span class=\"comment\">// 上面的字符串     adcdefg</span></span><br><span class=\"line\"></span><br><span class=\"line\">s.price = <span class=\"string\">&#x27;free&#x27;</span>;\t<span class=\"comment\">// 对price属性进行修改，触发set函数</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"数值扩展\"><a class=\"markdownIt-Anchor\" href=\"#数值扩展\">#</a> 数值扩展</h2>\n<ul>\n<li>Number.EPSILON    \t\t\t表示最小精度，常用于浮点数运算</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">eqal</span>(<span class=\"params\">a,b</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">Math</span>.abx(a-b) &lt; <span class=\"built_in\">Number</span>.EPSILON)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">0.1</span> + <span class=\"number\">0.2</span> === <span class=\"number\">0.3</span>);   <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(eqal(<span class=\"number\">0.1</span>+<span class=\"number\">0.2</span>, <span class=\"number\">0.3</span>));  <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>二进制和八进制</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"number\">0b1010</span>;\t\t<span class=\"comment\">// 二进制</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> o = <span class=\"number\">0o777</span>;\t\t<span class=\"comment\">// 八进制</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> x - <span class=\"number\">0xff</span>;\t\t<span class=\"comment\">// 十六进制</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(o);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(x);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Number.isFinite\t\t检测一个数值是否为有限数</li>\n<li>Number.isNaN         检查一个数值是否为  NaN</li>\n<li>Number.parseInt      Number.parseFloat       截取</li>\n<li>Number.isInteger      判断一个数是否为整数</li>\n<li>Math.trunc                 将小数部分抹掉</li>\n<li>Math.sign                   判断一个数是正数、0、负数</li>\n</ul>\n<h2 id=\"对象方法扩展\"><a class=\"markdownIt-Anchor\" href=\"#对象方法扩展\">#</a> 对象方法扩展</h2>\n<ul>\n<li>\n<p><a class=\"link\" href=\"http://Object.is\">Object.is<i class=\"fas fa-external-link-alt\"></i></a> \t\t\t判断两个值是否完全相等    大致相当于 ====</p>\n<ol>\n<li>NaN  ===  NaN                   \t结果为 false</li>\n<li><a class=\"link\" href=\"http://Object.is\">Object.is<i class=\"fas fa-external-link-alt\"></i></a> (NaN,NaN)              结果为 true</li>\n</ol>\n</li>\n<li>\n<p>Object.assign                                     对象的合并</p>\n</li>\n<li>\n<p>Object.setPrototypeOf                      设置原型对象</p>\n</li>\n<li>\n<p>Object.getPrototypeOf                      获取原型对象</p>\n</li>\n</ul>\n<h2 id=\"模块化\"><a class=\"markdownIt-Anchor\" href=\"#模块化\">#</a> 模块化</h2>\n<blockquote>\n<p>将大程序文件拆分成一个个功能模块，然后最后将模块汇总</p>\n</blockquote>\n<p>模块化的优势如下：</p>\n<ol>\n<li>防止命名冲突</li>\n<li>高维护性      解决依赖之间模糊的关系问题</li>\n<li>代码复用</li>\n</ol>\n<blockquote>\n<p>模块化产品</p>\n</blockquote>\n<ol>\n<li>CommonJS \t\tNodeJS、Browserify</li>\n<li>AMD                    requireJS</li>\n<li>CMD                    seaJS</li>\n<li>ES6 模块化          通过 export  import 进行模块的导入与导出</li>\n</ol>\n<blockquote>\n<p>暴露模块的语法</p>\n</blockquote>\n<ol>\n<li>分别暴露               exoprt    方法 1               export  方法 2       export 属性 1</li>\n<li 暴露的方法和属性>统一暴露               export    </li>\n<li 暴露的方法、属性、对象>默认暴露                export   default  </li>\n</ol>\n<blockquote>\n<p>引入模块的语法</p>\n</blockquote>\n<ol>\n<li>import   *  as   别名   from “路径”\t \t\t\t\t\t\t\t\t\t\t\t\t通用模式</li>\n<li>import   {school,  teach}    from “路径”;                                解构赋值形式</li>\n<li>import   {school as campus,  findJob}    from “路径”;         如果解构重名，需要起别名</li>\n<li>import    {default   as   m3}  from “路径”;                             default 对象</li>\n<li>import    m3  from “路径”;                                                      简便形式    针对默认暴露</li>\n</ol>\n<blockquote>\n<p>app.js    入口文件</p>\n</blockquote>\n<ul>\n<li>将模块和需要导入的 package 全部放入 app.js 入口文件</li>\n<li>在 html 主页面只需要引入入口文件即可，设置 type 为 module</li>\n</ul>\n<blockquote>\n<p>babel 对模块化代码的转换</p>\n</blockquote>\n<ol>\n<li>安装工具     babel-cli      babel-preset-env      browserify (正式项目里使用 webpack)</li>\n<li>npx  babel     打包文件    -d    目标文件</li>\n<li>npx   browserify    dist/js/app.js    -o   dist/bundle.js</li>\n</ol>\n",
            "tags": [
                "ES6"
            ]
        }
    ]
}