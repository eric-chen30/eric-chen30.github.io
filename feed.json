{
    "version": "https://jsonfeed.org/version/1",
    "title": "CsStar",
    "description": "Work Hard To Be A Better Man",
    "home_page_url": "http://csstar.top",
    "items": [
        {
            "id": "http://csstar.top/2022/03/13/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E8%AE%B0%E5%BD%951/",
            "url": "http://csstar.top/2022/03/13/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E8%AE%B0%E5%BD%951/",
            "title": "前端知识点汇总（一）",
            "date_published": "2022-03-13T09:41:01.000Z",
            "content_html": "<h1 id=\"前端知识点汇总一\"><a class=\"markdownIt-Anchor\" href=\"#前端知识点汇总一\">#</a> 前端知识点汇总（一）</h1>\n<h2 id=\"vue\"><a class=\"markdownIt-Anchor\" href=\"#vue\">#</a> Vue</h2>\n<blockquote>\n<p>Vue 的优缺点</p>\n</blockquote>\n<ul>\n<li>优点</li>\n</ul>\n<ol>\n<li>渐进式，Vue 全家桶包含了很多组件，可以按需选择，而不是全部使用</li>\n<li>组件化开发，代码可维护性和复用性都大大提高</li>\n<li>虚拟 DOM，相比于传统的浏览器渲染更加高效</li>\n<li>数据双向绑定，响应式数据</li>\n<li>单页面路由（SPA），由于不用频繁切换页面，减小了服务器的压力，同时页面更流畅，增强用户体验</li>\n<li>数据与视图分开，便于前后端分离</li>\n</ol>\n<ul>\n<li>缺点</li>\n</ul>\n<ol>\n<li>单页面不利用 SEO</li>\n<li>首屏加载事件长</li>\n</ol>\n<blockquote>\n<p>MVC 和  MVVM</p>\n</blockquote>\n<p><strong>MVC</strong></p>\n<ul>\n<li>Model： 负责从数据库中取数据</li>\n<li>View：负责视图部分，展示数据</li>\n<li>Controller：用户进行交互</li>\n</ul>\n<p><strong>MVVM</strong></p>\n<ul>\n<li>VM：View-Model  数据双向绑定</li>\n<li>View：数据展示</li>\n<li>Model：取数据的地方</li>\n</ul>\n<blockquote>\n<p>Vue 和 Jquery 的区别</p>\n</blockquote>\n<ul>\n<li>Jquery 直接操作 DOM，而 Vue 不直接操作 DOM，使用虚拟 DOM 对象</li>\n<li>Vue 集成了一些库，大大提高了开发效率</li>\n</ul>\n<blockquote>\n<p>Vue 常用修饰符</p>\n</blockquote>\n<ul>\n<li>.lazy\t\t\t\t\t输入框失去焦点的时候更新 v-model 值</li>\n<li>trim                  v-model 绑定的值会去掉首位空格</li>\n<li>.number           将 v-model 绑定的值转换为数字</li>\n<li>.stop                  阻止事件冒泡</li>\n<li>.capture             事件的捕获</li>\n<li>.once                  事件只触发一次</li>\n<li>.left | .middle | .right      点击鼠标左 | 中 | 右键触发</li>\n<li>.self                       点击事件绑定本身才触发</li>\n</ul>\n<blockquote>\n<p>路由的集中模式</p>\n</blockquote>\n<ul>\n<li>hash 模式：  根据 hash 值的改变进行组件的跳转，而不刷新页面</li>\n<li>history 模式：每进行一次跳转，会记录在 history 中，可以进行页面返回</li>\n<li>abstract 模式： 适用于 Node</li>\n</ul>\n<blockquote>\n<p>Vue 指令</p>\n</blockquote>\n<ul>\n<li>v-show</li>\n<li>v-for</li>\n<li>v-if</li>\n<li>v-else</li>\n<li>v-model</li>\n<li>v-text</li>\n<li>v-html</li>\n<li>v-on</li>\n<li>v-bind</li>\n<li>v-once</li>\n<li>v-cloak</li>\n<li>v-slot</li>\n</ul>\n<blockquote>\n<p>组件之间的传值方式</p>\n</blockquote>\n<ul>\n<li>父组件通过 props 传递给子组件</li>\n<li>子组件通过 $emit 对父组件进行传值</li>\n<li>父与子之间通过 $parent  和  $children 获取实例进行通信</li>\n<li>通过 vuex 进行状态管理</li>\n<li>通过 eventBus 进行跨组件值传递</li>\n<li>$ref 获取实例，进行传值</li>\n<li>路由传参</li>\n<li>localStorage、sessionStorage</li>\n</ul>\n<blockquote>\n<p>v-if 和 v-show 的区别</p>\n</blockquote>\n<ul>\n<li>v-if   通过操作 DOM 来决定元素的显隐，会改变 DOM 树的结构，比较消耗性能，适用于偶尔显隐的情况</li>\n<li>v-show 通过元素的 display 样式来决定显隐，不改变 DOM 树结构，适用于经常显隐的情况</li>\n</ul>\n<blockquote>\n<p>computed 和  watch</p>\n</blockquote>\n<ul>\n<li>computed 依赖多个变量计算出一个变量，且有缓存机制，如果这个变量值不变，可以被复用，不能进行异步操作</li>\n<li>watch 通常监听一个变量的变化，然后做一些事情，可异步操作</li>\n</ul>\n<blockquote>\n<p>Vue 的声明周期</p>\n</blockquote>\n<ul>\n<li>beforeCreate       实例 Vue，没有进行初始化和响应式数据</li>\n<li>created                 已经初始化和响应式数据，可以进行数据访问</li>\n<li>beforeMount         render 调用，虚拟 DOM 生成，没有转换成真实 DOM</li>\n<li>mounted                真实 DOM 挂载完成</li>\n<li>beforeUpdate         数据更新，新的虚拟 DOM 生成</li>\n<li>updated                   新旧虚拟 DOM 进行对比，然后更新</li>\n<li>beforeDestroy         实例销毁前，任然可以访问数据</li>\n<li>destroy                    实例销毁、解绑事件</li>\n<li>activated                  keep-alive  所缓存组件激活时调用</li>\n<li>deactivated               keep-alive 所缓存的组件停止时调用</li>\n<li>errorCaptured           子孙组件的错误捕获，此函数可返回 false 阻止继续向上传播，也就是拦截错误</li>\n</ul>\n<blockquote>\n<p>v-if  和 v-for 的优先级</p>\n</blockquote>\n<p>v-for 的优先级比 v-if 的优先级高，所以尽量不要在一个标签中同时使用，因为每项都 v-for 渲染后再进行显隐判断，做了很多无用功，消耗性能。</p>\n<blockquote>\n<p>vuex  的属性</p>\n</blockquote>\n<ul>\n<li>state                定义初始状态</li>\n<li>getter              从 store 中取数据</li>\n<li>mutation          更新 store 中的状态，只能同步操作</li>\n<li>action                用于提交 mutation，而不能直接更改状态，可异步操作</li>\n<li>module              store 的模块拆分</li>\n</ul>\n<blockquote>\n<p>不需要响应的数据应该怎么处理</p>\n</blockquote>\n<ul>\n<li>将其放在 data 的 return 之外</li>\n<li>通过 Object.freeze 进行数据冻结</li>\n</ul>\n<blockquote>\n<p>watch 有哪些属性</p>\n</blockquote>\n<ul>\n<li>immediate              初次加载时立即执行</li>\n<li>deep                        是否进行深监听</li>\n<li>handler                    监听的回调函数</li>\n</ul>\n<blockquote>\n<p>父子组件生命周期的顺序</p>\n</blockquote>\n<p>父 beforeCreate——》父 created——》父 beforeMount——》子 beforeCreate——》子 created——》子 beforeMount——》子 mounted——》父 mounted</p>\n<blockquote>\n<p>Vue 中为什么对对象劫持，而对于数组进行方法重写</p>\n</blockquote>\n<p>数组的元素一般都是成百上千的，对数组下标进行劫持的话会非常消耗性能。Vue 通过对数组原型上的方法进行一个重写，实现数组的响应式。</p>\n<blockquote>\n<p>Vue 的响应式是如何实现的</p>\n</blockquote>\n<ul>\n<li>观察者模式</li>\n<li>发布订阅模式</li>\n<li>数组没有使用劫持的模式，而是对数组原型上的方法进行一个重写</li>\n<li>劫持 ——》通过 Object.defineProperty 对对象进行递归劫持属性的 get、set</li>\n</ul>\n<blockquote>\n<p>事件流的三个阶段</p>\n</blockquote>\n<ul>\n<li>捕获阶段</li>\n<li>执行目标阶段</li>\n<li>冒泡阶段</li>\n</ul>\n<blockquote>\n<p>事件委托</p>\n</blockquote>\n<p>事件委托是指将子元素的事件绑定给父元素，这样可以减少绑定的次数，同时如果后期新增子元素，也可以共享绑定在父元素上的方法，这个方法可以供子元素共享。事件委托的原理是冒泡，真正触发事件的是子元素，通过 event.target 找到触发事件的对象。</p>\n<ul>\n<li>currentTarget   VS    target\n<ol>\n<li>currentTarget  要求绑定事件的元素一定是触发事件的元素</li>\n<li>target 绑定事件的元素不一定是触发事件的元素</li>\n</ol>\n</li>\n</ul>\n<blockquote>\n<p>为什么不建议使用  index 或者  随机数做 key</p>\n</blockquote>\n<p>使用 index  做 key 的话，如果我们需要在渲染的列表前加一个新的元素，那么该元素就会使整个列表的对应关系和之前的完全不一样，随机数也是如此，比较消耗性能，可以理解为牵一发而动全身。</p>\n<blockquote>\n<p>如果子组件改变 props 里的数据？</p>\n</blockquote>\n<ul>\n<li>如果改变的是基础类型，修改就会报错</li>\n<li>如果改变的是引用类型，那么会同时修改父组件的数据</li>\n</ul>\n<blockquote>\n<p>Vue 的 el 属性和 $mount 优先级</p>\n</blockquote>\n<p>同时存在时，el  &gt;  $mount</p>\n<blockquote>\n<p>获取 data 数据中某一个数据的初始状态</p>\n</blockquote>\n<p>通过  this.$options.data（）.xxxx   获取初始值</p>\n<blockquote>\n<p>计算变量时，methods  和  computed 哪个好</p>\n</blockquote>\n<p>由于 computed 具有缓存机制，对于相同的计算值可以进行复用，更加节省性能</p>\n<blockquote>\n<p>router.push     router.replace   router.go</p>\n</blockquote>\n<ul>\n<li>router.push              跳转，并向 history 中添加记录，可返回上一页面</li>\n<li>router.replace          跳转到指定页面，并且不会保留上一页面记录，无法返回</li>\n<li>router.go                  如果为正数，向后跳转，如果为负数，向前跳转</li>\n</ul>\n<blockquote>\n<p>附参考链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvcnFvWjVLV3FUXzFRQXg5MWJKTWVJZw==\">https://mp.weixin.qq.com/s/rqoZ5KWqT_1QAx91bJMeIg</span></p>\n</blockquote>\n",
            "tags": [
                "前端知识"
            ]
        },
        {
            "id": "http://csstar.top/2022/03/12/%E8%99%9A%E6%8B%9FDOM/",
            "url": "http://csstar.top/2022/03/12/%E8%99%9A%E6%8B%9FDOM/",
            "title": "虚拟DOM",
            "date_published": "2022-03-12T14:23:14.000Z",
            "content_html": "<h1 id=\"虚拟dom\"><a class=\"markdownIt-Anchor\" href=\"#虚拟dom\">#</a> 虚拟 DOM</h1>\n<h2 id=\"真实dom及其解析流程\"><a class=\"markdownIt-Anchor\" href=\"#真实dom及其解析流程\">#</a> 真实 DOM 及其解析流程</h2>\n<blockquote>\n<p>浏览器渲染引擎工作流程</p>\n</blockquote>\n<p>创建 DOM 树 ——》创建样式规则 ——》创建 Render 树 ——》布局 Layout——》绘制 painting</p>\n<ol>\n<li>HTML 分析器分析 HTML 元素，构建 DOM 树</li>\n<li>CSS 分析器分析 CSS 样式以及内联样式，生成页面的样式表</li>\n<li>将 DOM 树和样式表相关联，构建一颗 Render 树，这一过程称为 Attachment，每个 DOM 节点有 attach 方法，接收样式信息，返回 render 对象，这些 render 对象最终构建成一颗 render 树</li>\n<li>有了 Render 树，浏览器开始布局，为每个 render 对象在显示屏上确定精确坐标</li>\n<li>render 树和节点坐标都有了，然后调用每个节点的 paint 方法，进行页面绘制</li>\n</ol>\n<blockquote>\n<p>需要注意的几个问题</p>\n</blockquote>\n<ul>\n<li>DOM 树的构建是从文档加载完成开始的？</li>\n</ul>\n<p>构建 DOM 是一个渐进过程，为了提高用户体验度，需要尽快将渲染内容显示在页面上</p>\n<ul>\n<li>Render 树是 DOM 树和 CSS 样式表都构建完毕后才开始构建的吗？</li>\n</ul>\n<p>交叉进行的，一边加载、一边解析、一边渲染</p>\n<ul>\n<li>CSS 的解析是从右往左逆向解析的</li>\n</ul>\n<p>DOM 树从下往上解析比从上往下解析效率高，嵌套标签越多，解析越慢</p>\n<p><img data-src=\"%E8%99%9A%E6%8B%9FDOM/hexo.png\" alt></p>\n<h2 id=\"js操作真实dom\"><a class=\"markdownIt-Anchor\" href=\"#js操作真实dom\">#</a> JS 操作真实 DOM</h2>\n<p>原生 JS 或者 JQ 操作 DOM 时，浏览器会从构建 DOM 树开始从头到尾执行一遍流程。比如我们要更新多个 DOM 节点，浏览器会依次从头到尾进行执行，最终执行多次，其中包含了大量无用操作。频繁计算 DOM 节点坐标浪费了大量的性能，同时影响用户体验</p>\n<h2 id=\"虚拟dom-2\"><a class=\"markdownIt-Anchor\" href=\"#虚拟dom-2\">#</a> 虚拟 DOM</h2>\n<blockquote>\n<p>虚拟 DOM 就是为了解决浏览器性能问题而被设计出来的。</p>\n</blockquote>\n<p>对于多次更新 DOM 的操作，虚拟 DOM 不会立即执行 DOM，而是将这些 DOM 操作的更新经过 diff 算法后的内容保存到本地一个 JS 对象中，最终将这个 JS 对象一次性 attach 到 DOM 树上，再进行后续操作，避免了大量无用计算。</p>\n<p>页面的更新先反应到 JS 对象上，操作内存中的 JS 对象速度要快得多，更新完成后，再将最终的 JS 对象映射成真实的 DOM，交给浏览器去绘制。</p>\n<blockquote>\n<p>选择 diff 算法</p>\n</blockquote>\n<p>两棵树完全比较的时间复杂度是 O (n^3)，实际上 Reacte 的 diff 算法的时间复杂度为 O（n）。要实现这么低的时间复杂度，意味着只能比较平层的比较两棵树的节点，放弃了深度遍历。这样是一种以精确度换速度的做法，并且现实中前端页面通常也不会跨层移动 DOM 元素，使用这种算法是最优的。</p>\n<ul>\n<li>第一步，调用 patch 方法，传入新旧虚拟 DOM 进行同层对比</li>\n<li>第二步，调用 isSameNode 方法，对比新旧节点是否是同类型节点</li>\n<li>第三步， 如果不同，那么新节点将代替旧节点</li>\n<li>第四步，如果相同，调用 patchNode 进行节点对比\n<ol>\n<li>如果新旧节点都是文本节点，则新文本代替旧文本</li>\n<li>如果旧节点有子节点而新节点没有，则删除旧节点的子节点</li>\n<li>如果旧节点没有子节点，新节点有，则把子节点新增上去</li>\n<li>如果都有子节点，则调用 updateChildren 方法进行新旧子节点的对比</li>\n<li>子节点对比为首位对比法</li>\n</ol>\n</li>\n</ul>\n<blockquote>\n<p>附参考文档链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC9hZjBiMzk4NjAyYmM=\">https://www.jianshu.com/p/af0b398602bc</span></p>\n</blockquote>\n",
            "tags": [
                "Vue"
            ]
        },
        {
            "id": "http://csstar.top/2022/03/12/%E9%A1%B5%E9%9D%A2%E6%B8%B2%E6%9F%93%E6%A8%A1%E5%BC%8F/",
            "url": "http://csstar.top/2022/03/12/%E9%A1%B5%E9%9D%A2%E6%B8%B2%E6%9F%93%E6%A8%A1%E5%BC%8F/",
            "title": "CSR、SSR、SPA",
            "date_published": "2022-03-12T14:19:37.000Z",
            "content_html": "<h1 id=\"csr-ssr-spa\"><a class=\"markdownIt-Anchor\" href=\"#csr-ssr-spa\">#</a> CSR、SSR、SPA</h1>\n<h2 id=\"csr\"><a class=\"markdownIt-Anchor\" href=\"#csr\">#</a> CSR</h2>\n<blockquote>\n<p>什么是 CSR</p>\n</blockquote>\n<p>页面由 JS 渲染，JS 运行于浏览器端，称为客户端渲染。Vue、React 都是基于这种模式。</p>\n<blockquote>\n<p>优缺点</p>\n</blockquote>\n<ul>\n<li>优点：</li>\n</ul>\n<ol>\n<li>前后端分离的架构，有利于开发效率的提升</li>\n</ol>\n<ul>\n<li>缺点：</li>\n</ul>\n<ol>\n<li>首屏渲染时间较长</li>\n<li>不利于 SEO (搜索引擎优化)</li>\n</ol>\n<blockquote>\n<p>基于 React 的 csr 渲染流程</p>\n</blockquote>\n<p>浏览器下载 HTML 文档 ——&gt; 下载 JS——&gt; 运行 react 代码构建页面 ——&gt; 展示页面</p>\n<h2 id=\"ssr\"><a class=\"markdownIt-Anchor\" href=\"#ssr\">#</a> SSR</h2>\n<blockquote>\n<p>什么是 SSR</p>\n</blockquote>\n<p>把 Vue 组件渲染为服务器的 HTML 字符串，将他们直接发送到浏览器，最后将静态标记 混和 为客户端上完成全交互应用程序。</p>\n<blockquote>\n<p>优缺点</p>\n</blockquote>\n<ul>\n<li>优点：</li>\n</ul>\n<ol>\n<li>SEO    搜索引擎优化</li>\n<li>首屏显示时间</li>\n</ol>\n<ul>\n<li>缺点：</li>\n</ul>\n<ol>\n<li>开发逻辑复杂</li>\n<li>开发条件有所限制，比如一些生命周期、第三方库不能使用</li>\n<li>服务器的负载增大</li>\n</ol>\n<blockquote>\n<p>实例代码</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 导入 express 作为渲染服务器</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> exprss = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;express&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 导入 createRender 用于获取渲染器</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123;createRender&#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;vue-server-render&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 导入 fs 模块</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 导入 Vue 用于声明待渲染实例</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> Vue = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;vue&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 创建 express 实例</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = express();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> template = fs.readFileSync(path.join(_dirname, <span class=\"string\">&#x27;./public/index.html&#x27;</span>));</span><br><span class=\"line\"><span class=\"comment\">// 获取渲染器</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> render = createRender(&#123;</span><br><span class=\"line\">    template: template.toString()</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.get(<span class=\"string\">&#x27;*&#x27;</span>, <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 待渲染的 Vue 实例</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> template = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">       template: <span class=\"string\">&#x27;&lt;h1&gt;hello world&lt;/h&gt;&#x27;</span> </span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"comment\">// renderToString 可以将vue实例转换为HTML字符串</span></span><br><span class=\"line\">    <span class=\"comment\">// 若未传递回调函数，返回一个Promise</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> html = <span class=\"keyword\">await</span> renderer.renderToSting(template,&#123;</span><br><span class=\"line\">        title: <span class=\"string\">&#x27;vue ssr&#x27;</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    res.send(html);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 绑定程序监听端口到指定的主机端口号</span></span><br><span class=\"line\">app.listen(<span class=\"number\">3000</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;running&#x27;</span>);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"spa\"><a class=\"markdownIt-Anchor\" href=\"#spa\">#</a> SPA</h2>\n<blockquote>\n<p>单页面模式。Vue、React 的路由都是 SPA 模式</p>\n</blockquote>\n",
            "tags": [
                "页面渲染模式"
            ]
        },
        {
            "id": "http://csstar.top/2022/03/11/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%BD%91%E7%AB%99/",
            "url": "http://csstar.top/2022/03/11/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%BD%91%E7%AB%99/",
            "title": "前端学习网站",
            "date_published": "2022-03-11T15:17:08.000Z",
            "content_html": "<blockquote>\n<p>GitHub：代码管理、开源项目、技术源码、博客托管</p>\n</blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tLw==\">https://github.com/</span></p>\n<blockquote>\n<p>B 站：大量的计算机学习视频</p>\n</blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tLw==\">https://www.bilibili.com/</span></p>\n<blockquote>\n<p>力扣：提高编程能力，学习别人编码方式</p>\n</blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20v\">https://leetcode-cn.com/</span></p>\n<blockquote>\n<p>Vue：渐进式 JavaScript 框架</p>\n</blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jbi52dWVqcy5vcmcv\">https://cn.vuejs.org/</span></p>\n<blockquote>\n<p>W3school：技术基础文档，简单介绍技术包含内容</p>\n</blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuLw==\">https://www.w3school.com.cn/</span></p>\n<blockquote>\n<p>Bootstrap：最受欢迎的 HTML、CSS 和 JS 框架，用于开发响应式布局、移动设备优先的 WEB 项目</p>\n</blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly92My5ib290Y3NzLmNvbS8=\">https://v3.bootcss.com/</span></p>\n<blockquote>\n<p>webpack：流行的打包工具</p>\n</blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cud2VicGFja2pzLmNvbS8=\">https://www.webpackjs.com/</span></p>\n<blockquote>\n<p>Axios：基于 Promise 的 HTTP 库，用于向服务器发送请求，请求数据</p>\n</blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5heGlvcy1qcy5jb20vemgtY24vZG9jcy8=\">http://www.axios-js.com/zh-cn/docs/</span></p>\n<blockquote>\n<p>uniapp：使用 Vue.js 开发所有前端应用的框架，一套代码，多平台发布</p>\n</blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly91bmlhcHAuZGNsb3VkLmlvLw==\">https://uniapp.dcloud.io/</span></p>\n<blockquote>\n<p>Element UI：基于 Vue 的样式组件库</p>\n</blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbGVtZW50LmVsZW1lLmNuLyMvemgtQ04v\">https://element.eleme.cn/#/zh-CN/</span></p>\n<blockquote>\n<p>Vuex：一个专为 Vue.js 应用程序开发的<strong>状态管理模式 + 库</strong></p>\n</blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWV4LnZ1ZWpzLm9yZy96aC9ndWlkZS8=\">https://vuex.vuejs.org/zh/guide/</span></p>\n<blockquote>\n<p>MDN：面向 Web 开发者的文档，内容齐全，具有权威性</p>\n</blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWI=\">https://developer.mozilla.org/zh-CN/docs/Web</span></p>\n<blockquote>\n<p>阮一峰：ES6 入门教程</p>\n</blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9lczYucnVhbnlpZmVuZy5jb20v\">https://es6.ruanyifeng.com/</span></p>\n<blockquote>\n<p>React：用于构建用户界面的 JavaScript 库</p>\n</blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9yZWFjdGpzLm9yZy8=\">https://reactjs.org/</span></p>\n<blockquote>\n<p>Node：一个基于 Chrome V8 引擎的 JavaScript 运行环境</p>\n</blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL25vZGVqcy5jbi8=\">http://nodejs.cn/</span></p>\n<blockquote>\n<p>TypeScript：JavaScript 类型的超集，可以编译为纯 JavaScript，可在任何浏览器、计算机、操作系统运行，开源</p>\n</blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudHNsYW5nLmNuLw==\">https://www.tslang.cn/</span></p>\n<blockquote>\n<p>Electron：使用 JavaScript，HTML 和 CSS 构建跨平台的桌面应用程序</p>\n</blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZWxlY3Ryb25qcy5vcmcv\">https://www.electronjs.org/</span></p>\n<blockquote>\n<p>Babel：Babel 是一个 JavaScript 编译器，可将 ES6 编译为 ES5 代码，使部分浏览器兼容</p>\n</blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWJlbGpzLmlvLw==\">https://babeljs.io/</span></p>\n<blockquote>\n<p>RequireJS：一个 JavaScript 文件和模块加载器</p>\n</blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9yZXF1aXJlanMub3JnLw==\">https://requirejs.org/</span></p>\n<blockquote>\n<p>开发者资源：自 2005 年以来记录 Web 技术，包括 CSS、HTML 和 JavaScript</p>\n</blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04v\">https://developer.mozilla.org/zh-CN/</span></p>\n<blockquote>\n<p>阮一峰 JS 教程</p>\n</blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL2phdmFzY3JpcHQucnVhbnlpZmVuZy5jb20v\">http://javascript.ruanyifeng.com/</span></p>\n<blockquote>\n<p>微信开发文档：微信小程序、微信公众号、小游戏等</p>\n</blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXJzLndlaXhpbi5xcS5jb20vZG9jLw==\">https://developers.weixin.qq.com/doc/</span></p>\n",
            "tags": [
                "前端学习网站"
            ]
        },
        {
            "id": "http://csstar.top/2022/03/11/ES7-11/",
            "url": "http://csstar.top/2022/03/11/ES7-11/",
            "title": "ES7-11",
            "date_published": "2022-03-11T06:00:54.000Z",
            "content_html": "<h1 id=\"es7-11\"><a class=\"markdownIt-Anchor\" href=\"#es7-11\">#</a> ES7-11</h1>\n<h2 id=\"es7\"><a class=\"markdownIt-Anchor\" href=\"#es7\">#</a> ES7</h2>\n<ul>\n<li>Array.prototype.includes\t\t方法用来检测数组中是否包含某个元素，返回 boolean 值</li>\n<li>指数操作符  **                       用来实现幂运算，功能与 Math.pow 结果相同</li>\n</ul>\n<h2 id=\"es8\"><a class=\"markdownIt-Anchor\" href=\"#es8\">#</a> ES8</h2>\n<blockquote>\n<p>async 函数</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// return 不是一个 Promise  类型的对象  则函数结果为一个成功的Promise对象</span></span><br><span class=\"line\">    <span class=\"comment\">// throw 抛出错误，则函数结果为一个失败的Promise对象</span></span><br><span class=\"line\">    <span class=\"comment\">// 返回结果是一个 Promise对象 那么返回一个成功的Promise对象</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        resolve(<span class=\"string\">&#x27;sucess&#x27;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// reject(&#x27;error&#x27;);</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> result = fn();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 调用then方法</span></span><br><span class=\"line\">result.then(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;sucess&#x27;</span>);</span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"params\">reason</span> =&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.warn(<span class=\"string\">&#x27;reason&#x27;</span>);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>await 表达式</p>\n</blockquote>\n<ul>\n<li>必须放在 async 函数中</li>\n<li>右侧表达式一般为 promise 对象</li>\n<li>await 返回的是 promise 成功的值</li>\n<li>await 的 promise 如果失败了，会抛出异常，需要通过 try…catch 捕获异常</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>) =&gt;</span>&#123;</span><br><span class=\"line\">    resolve(<span class=\"string\">&#x27;sucess&#x27;</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> result = <span class=\"keyword\">await</span> p;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result);    <span class=\"comment\">// 返回一个成功的Promise对象</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>对象方法扩展</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> school = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">&#x27;eric&#x27;</span>,</span><br><span class=\"line\">    cities: [<span class=\"string\">&#x27;beijing&#x27;</span>,<span class=\"string\">&#x27;shanghai&#x27;</span>,<span class=\"string\">&#x27;guangzhou&#x27;</span>,<span class=\"string\">&#x27;shenzhen&#x27;</span>],</span><br><span class=\"line\">    xueke: [<span class=\"string\">&#x27;math&#x27;</span>,<span class=\"string\">&#x27;java&#x27;</span>,<span class=\"string\">&#x27;front&#x27;</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取对象所有键</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.keys(school));</span><br><span class=\"line\"><span class=\"comment\">// 获取对象所有值</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.values(school));</span><br><span class=\"line\"><span class=\"comment\">// 获取所有的键值</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.entries(school));</span><br><span class=\"line\"><span class=\"comment\">// 创建Map</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> m = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>(<span class=\"built_in\">Object</span>.entries(school));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(m.get(<span class=\"string\">&#x27;cities&#x27;</span>));</span><br><span class=\"line\"><span class=\"comment\">// 对象属性的描述对象</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.getPropertyDescriptors(school));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>,&#123;</span><br><span class=\"line\">    name: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 设置值</span></span><br><span class=\"line\">        value: <span class=\"string\">&#x27;eric&#x27;</span>,</span><br><span class=\"line\">        <span class=\"comment\">// 属性特性</span></span><br><span class=\"line\">        writable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        configurable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        enumerable: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"es9\"><a class=\"markdownIt-Anchor\" href=\"#es9\">#</a> ES9</h2>\n<blockquote>\n<ul>\n<li>Rest 参数与 spread 扩展运算符在 ES6 中只针对数组，在 ES9 中也支持对象</li>\n<li>正则扩展 - 命名捕获分组     （?<name>.*）      提取规则更加方便   结果 groups 是捕获内容</name></li>\n<li>正则扩展 - 反向断言      根据正则表达式做唯一识别</li>\n<li>正则表达式 - dotAll 模式     正则表达式中。匹配除回车外的任何单字符，标记【s】改变这种行为，匹配任意单个字符</li>\n</ul>\n</blockquote>\n<h2 id=\"es10\"><a class=\"markdownIt-Anchor\" href=\"#es10\">#</a> ES10</h2>\n<blockquote>\n<ul>\n<li>Object.fromEnteries                      将二维数组转换为对象</li>\n<li>trimStart 和 trimEnd                       清除左侧右侧空白</li>\n<li>Array.prototype.flat 和 flatMap       将多维数组进行降维    |       先 map 后 flat</li>\n<li>Symbol.prototype.description       获取描述</li>\n</ul>\n</blockquote>\n<h2 id=\"es11\"><a class=\"markdownIt-Anchor\" href=\"#es11\">#</a> ES11</h2>\n<blockquote>\n<ul>\n<li>私有属性      在对象中通过 #变量名来声明     实例化对象不能直接访问，可以在类的内部定义方法访问私有属性</li>\n<li>Promise.allSettled         返回一个在所有给定的 promise 都已经 <code>fulfilled</code>  或 <code>rejected</code>  后的 promise，并带有一个对象数组，每个对象表示对应的 promise 结果</li>\n</ul>\n<ol>\n<li>当有多个彼此不依赖的异步任务成功完成时，或者想知道每个 promise 的结果时，通常使用它</li>\n<li>promise.all（）更适合彼此相互依赖或者在其中任何一个 reject 时立即结束</li>\n</ol>\n<ul>\n<li>String.prototype.matchAll     返回的结果是一个可迭代对象   可以使用 for…of 进行迭代   也可以使用扩展运算符</li>\n<li>可选链操作符</li>\n<li>动态 import           需要使用的时候才导入</li>\n<li>Bigint 类型</li>\n<li>globalThis              绝对全局对象     始终指向全局对象</li>\n</ul>\n</blockquote>\n",
            "tags": [
                "ES7-11"
            ]
        },
        {
            "id": "http://csstar.top/2022/03/10/ES6/",
            "url": "http://csstar.top/2022/03/10/ES6/",
            "title": "ES6",
            "date_published": "2022-03-10T14:34:09.000Z",
            "content_html": "<h1 id=\"es6\"><a class=\"markdownIt-Anchor\" href=\"#es6\">#</a> ES6</h1>\n<h2 id=\"const和let\"><a class=\"markdownIt-Anchor\" href=\"#const和let\">#</a> const 和 let</h2>\n<blockquote>\n<p>let 关键字</p>\n</blockquote>\n<ul>\n<li>不允许重复声明</li>\n<li>块级作用域</li>\n<li>不存在变量提升</li>\n<li>不影响作用域链</li>\n</ul>\n<blockquote>\n<p>const 关键字</p>\n</blockquote>\n<ul>\n<li>必须初始化</li>\n<li>不允许重复声明</li>\n<li>不允许修改</li>\n<li>块级作用域</li>\n</ul>\n<blockquote>\n<p>注：对象属性修改和数组元素变化不会发生 const 错误</p>\n<p>应用场景：声明对象类型使用 const ，非对象类型声明选择 let</p>\n</blockquote>\n<h2 id=\"变量的解构赋值\"><a class=\"markdownIt-Anchor\" href=\"#变量的解构赋值\">#</a> 变量的解构赋值</h2>\n<blockquote>\n<p>按照一定模式，从数组和对象中提取值，对变量进行赋值，这就是解构赋值</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 数组的解构赋值</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"string\">&#x27;eric&#x27;</span>,<span class=\"string\">&#x27;chen&#x27;</span>,<span class=\"string\">&#x27;jack&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> [zhang, liu, li] = arr;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 对象的解构赋值</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> lin = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">&#x27;jack&#x27;</span>,</span><br><span class=\"line\">    tags: [<span class=\"string\">&#x27;ball&#x27;</span>,<span class=\"string\">&#x27;bull&#x27;</span>]</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;name, tages&#125; = lin;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 复杂解构</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> wangfei = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">&#x27;王菲&#x27;</span>,</span><br><span class=\"line\">    age: <span class=\"number\">18</span>,</span><br><span class=\"line\">    songs: [<span class=\"string\">&#x27;红豆&#x27;</span>,<span class=\"string\">&#x27;流年&#x27;</span>,<span class=\"string\">&#x27;暧昧&#x27;</span>],</span><br><span class=\"line\">    history: [</span><br><span class=\"line\">        &#123;<span class=\"attr\">name</span>: <span class=\"string\">&#x27;窦唯&#x27;</span>&#125;,</span><br><span class=\"line\">        &#123;<span class=\"attr\">name</span>: <span class=\"string\">&#x27;谢霆锋&#x27;</span>&#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span>&#123;<span class=\"attr\">songs</span>:[one,two,three],<span class=\"attr\">history</span>:[first,second,third]&#125; = weifang;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意： 频繁使用对象方法、数组元素、就可以使用解构赋值形式</p>\n</blockquote>\n<h2 id=\"模板字符串\"><a class=\"markdownIt-Anchor\" href=\"#模板字符串\">#</a> 模板字符串</h2>\n<blockquote>\n<p>增强版的字符串，用反引号来标识字符串</p>\n</blockquote>\n<ul>\n<li>字符串中可以出现换行符</li>\n<li>可以使用 ${xxx} 形式输出变量    (可以进行两个变量的字符串拼接来代替 + 号)</li>\n</ul>\n<h2 id=\"对象的简化写法\"><a class=\"markdownIt-Anchor\" href=\"#对象的简化写法\">#</a> 对象的简化写法</h2>\n<blockquote>\n<p>ES6 允许在大括号里面，直接写变量和函数，作为对象属性和方法</p>\n</blockquote>\n<ul>\n<li>优点是写法简洁、代码量更少</li>\n<li>缺点是代码可读性降低，格式化没那么标准</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> name = <span class=\"string\">&#x27;eric&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> slogon = <span class=\"string\">&#x27;i can do all things&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> improve = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;take it easy&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 属性和方法简写</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> csstar = &#123;</span><br><span class=\"line\">    name,</span><br><span class=\"line\">    slogon,</span><br><span class=\"line\">    improve,</span><br><span class=\"line\">    change() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;just change&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"箭头函数\"><a class=\"markdownIt-Anchor\" href=\"#箭头函数\">#</a> 箭头函数</h2>\n<ul>\n<li>\n<p>this 是静态的，始终指向定义时的对象，call 方法无法改变 this 指向</p>\n</li>\n<li>\n<p>不能作为构造函数实例化对象</p>\n</li>\n<li>\n<p>不能使用 arguments 变量</p>\n</li>\n<li>\n<p>箭头函数的简写</p>\n<ol>\n<li>省略小括号，当形参有且只有一个的时候</li>\n<li>省略花括号，当函数体只有一条语句的时候</li>\n</ol>\n</li>\n<li>\n<p>箭头函数适合与 this 无关的回调，定时器，数组的方法回调</p>\n</li>\n<li>\n<p>箭头函数不适合 this 有关的回调，事件的回调，对象的方法</p>\n</li>\n</ul>\n<h2 id=\"es6允许给函数参数赋值初始值\"><a class=\"markdownIt-Anchor\" href=\"#es6允许给函数参数赋值初始值\">#</a> ES6 允许给函数参数赋值初始值</h2>\n<ul>\n<li>形参初始值  具有默认值的参数，一般位置都要靠后（潜规则）</li>\n<li>与结构赋值结合</li>\n</ul>\n<h2 id=\"es6-rest参数获取函数的实参代替arguments\"><a class=\"markdownIt-Anchor\" href=\"#es6-rest参数获取函数的实参代替arguments\">#</a> ES6 rest 参数，获取函数的实参，代替 arguments</h2>\n<ol>\n<li>ES5 获取实参的方式</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">date</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">arguments</span>);\t\t<span class=\"comment\">// 返回一个对象</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">date(<span class=\"string\">&#x27;jack&#x27;</span>,<span class=\"string\">&#x27;eric&#x27;</span>,<span class=\"string\">&#x27;mike&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>rest 参数</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">date</span>(<span class=\"params\">...args</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(args);\t\t<span class=\"comment\">// 返回一个数组</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">date(<span class=\"string\">&#x27;jack&#x27;</span>,<span class=\"string\">&#x27;eric&#x27;</span>,<span class=\"string\">&#x27;mike&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>rest 参数必须要放到参数最后</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fun</span>(<span class=\"params\">a,b,...args</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(b);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(args);\t\t<span class=\"comment\">// 返回一个数组</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fun(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,);</span><br></pre></td></tr></table></figure>\n<h2 id=\"扩展运算符\"><a class=\"markdownIt-Anchor\" href=\"#扩展运算符\">#</a> 扩展运算符</h2>\n<blockquote>\n<p>将【数组】转换为逗号分隔的【参数序列】</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 声明一个数组</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> boys = [<span class=\"string\">&#x27;jack&#x27;</span>,<span class=\"string\">&#x27;mike&#x27;</span>,<span class=\"string\">&#x27;eric&#x27;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">chunwan</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">chunwan(...boys);\t<span class=\"comment\">// 相当于 chunwan(&#x27;jack&#x27;,&#x27;mike&#x27;,&#x27;eric&#x27;);</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>扩展运算符的运用</p>\n</blockquote>\n<ul>\n<li>数组的合并</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr1 = [<span class=\"string\">&#x27;a&#x27;</span>,<span class=\"string\">&#x27;b&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> arr2 = [<span class=\"string\">&#x27;c&#x27;</span>,<span class=\"string\">&#x27;d&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> combineArr = arr1.concat(arr2);  <span class=\"comment\">// es5</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> combineArr2 = [...arr1, ...arr2];  <span class=\"comment\">// es6</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(conbineArr,combineArr2);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>数组的克隆</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr1 = [<span class=\"string\">&#x27;e&#x27;</span>,<span class=\"string\">&#x27;g&#x27;</span>,<span class=\"string\">&#x27;m&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> arr2 = [...arr1];   <span class=\"comment\">// [&#x27;e&#x27;,&#x27;g&#x27;,&#x27;m&#x27;]</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>将伪数组转换为真正的数组</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> divs = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">&#x27;div&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> divArr = [...divs];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(divArr);   <span class=\"comment\">// arguments</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"symbol-的基本使用\"><a class=\"markdownIt-Anchor\" href=\"#symbol-的基本使用\">#</a> symbol 的基本使用</h2>\n<blockquote>\n<p>symbol 数据类型的特点，是 JavaScript 语言的第七种数据类型</p>\n</blockquote>\n<ul>\n<li>sumbol 的值是唯一的，用来解决命名冲突的问题</li>\n<li>symbol 值不能与其它数据进行运算</li>\n<li>symbol 定义的对象属性不能使用 for… in 循环遍历，Reflect.ownKeys 获取对象键名</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建symbol</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> s = <span class=\"built_in\">Symbol</span>();</span><br><span class=\"line\"><span class=\"keyword\">let</span> s2 = <span class=\"built_in\">Symbol</span>(<span class=\"string\">&#x27;shang&#x27;</span>);\t\t<span class=\"comment\">// 字符串里只是一种标识</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> s3 = <span class=\"built_in\">Symbol</span>(<span class=\"string\">&#x27;shang&#x27;</span>);\t\t<span class=\"comment\">// 这里的Symbol是函数</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s2 == s3);\t\t\t<span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 通过Symbol.for()方式创建</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> s4 = <span class=\"built_in\">Symbol</span>.for(<span class=\"string\">&#x27;shang&#x27;</span>);\t<span class=\"comment\">// 这里的Symbol是对象</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> s5 = <span class=\"built_in\">Symbol</span>.for(<span class=\"string\">&#x27;shang&#x27;</span>);\t<span class=\"comment\">// 通过描述的字符串得出唯一的symbol值</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s4 = s5);\t\t\t<span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>JavaScript 数据类型 : USONB</p>\n</blockquote>\n<ul>\n<li>u\t\tundefined</li>\n<li>s       string    symbol</li>\n<li>o       object</li>\n<li>n        null      number</li>\n<li>b        boolean</li>\n</ul>\n<blockquote>\n<p>symbol 是独一无二的值，用来给对象添加属性和方法</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 给game对象添加属性和方法</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> game = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 声明一个对象</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> methods = &#123;</span><br><span class=\"line\">    up: <span class=\"built_in\">Symbol</span>(),</span><br><span class=\"line\">    down: <span class=\"built_in\">Symbol</span>()</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">game[methods.up] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;up&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">game[methods.down] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;down&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> youxi = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">&#x27;langrensha,</span></span><br><span class=\"line\"><span class=\"string\">    [Symbol(&#x27;</span>say<span class=\"string\">&#x27;)] : function()&#123;</span></span><br><span class=\"line\"><span class=\"string\">        console.log(&#x27;</span>i can say<span class=\"string\">&#x27;）;</span></span><br><span class=\"line\"><span class=\"string\">    &#125;，</span></span><br><span class=\"line\"><span class=\"string\">    [Symbol(&#x27;</span>zibao<span class=\"string\">&#x27;)]: function() &#123;</span></span><br><span class=\"line\"><span class=\"string\">        console.log(&#x27;</span>i can zibao<span class=\"string\">&#x27;);</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>symbol 内置属性：这些属性对应的值都是用来控制这个对象在特定场景下的一个表现</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>Symbol.hasInstance</th>\n<th>当其他对象使用 instanceof 运算符，判断是否为该对象的实例时，会调用这个方法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Symbol.replace</strong></td>\n<td><strong>当该对象被 str.replace (myObject) 方法调用时，会返回该方法的返回值</strong></td>\n</tr>\n<tr>\n<td><strong>Symbol.split</strong></td>\n<td><strong>当该对象被 str.split (myObject) 方法调用时，会返回该方法的返回值</strong></td>\n</tr>\n<tr>\n<td><strong>Symbol.iterator</strong></td>\n<td><strong>对象进行 for…of 循环时，会调用 Symbol.iterator 方法，返回该对象的默认遍历器</strong></td>\n</tr>\n<tr>\n<td><strong>…</strong></td>\n<td><strong>…</strong></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"迭代器\"><a class=\"markdownIt-Anchor\" href=\"#迭代器\">#</a> 迭代器</h2>\n<blockquote>\n<p>迭代器是一种接口，为各种不同的数据结构提供统一的访问机制，任何数据只要部署了 iterator 接口 (对象里的一个属性)，可完成遍历操作</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> xiyou = [<span class=\"string\">&#x27;tangsheng&#x27;</span>, <span class=\"string\">&#x27;sunyukong&#x27;</span>, <span class=\"string\">&#x27;shasheng&#x27;</span>, <span class=\"string\">&#x27;zhubajie&#x27;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> v <span class=\"keyword\">of</span> xiyou)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(v);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> iterator = xiyou[<span class=\"built_in\">Symbol</span>.iterator]();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next());</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next());</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next());</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 自定义遍历数据</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> banji = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">&#x27;终极一班&#x27;</span>,</span><br><span class=\"line\">    stus: [</span><br><span class=\"line\">        <span class=\"string\">&#x27;xiaoming&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;xiaotian&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;xiaoning&#x27;</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    [<span class=\"built_in\">Symbol</span>.iterator]()&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 声明一个索引变量</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> _this = <span class=\"built_in\">this</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            next: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(index &lt; _this.stus.length)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">const</span> result = &#123;<span class=\"attr\">value</span>: _this.stus[index],<span class=\"attr\">done</span>: <span class=\"literal\">false</span>&#125;;</span><br><span class=\"line\">                    <span class=\"comment\">// 下标自增</span></span><br><span class=\"line\">                    index++;</span><br><span class=\"line\">                    <span class=\"comment\">// 返回结果</span></span><br><span class=\"line\">                    <span class=\"keyword\">return</span> result</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> &#123;<span class=\"attr\">value</span>: <span class=\"literal\">undefined</span>, <span class=\"attr\">done</span>: <span class=\"literal\">true</span>&#125;;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> v <span class=\"keyword\">of</span> banji) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>,log(v);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">banji.stus.forEach();   <span class=\"comment\">// forEach() 是数组的方法，不能用于对象</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"生成器\"><a class=\"markdownIt-Anchor\" href=\"#生成器\">#</a> 生成器</h2>\n<blockquote>\n<p>特殊的函数     异步编程 （比如回调函数）</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> * <span class=\"title\">gen</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">//  console.log(&quot;hello generator&quot;);</span></span><br><span class=\"line\">    <span class=\"comment\">// yield 将代码进行分块</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;111&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">     <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;222&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">     <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;333&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">     <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;444&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> iterator = gen();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 遍历</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> v <span class=\"keyword\">of</span> gen)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(v);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>生成函数的参数</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> * <span class=\"title\">gen</span>(<span class=\"params\">arg</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(arg);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> one = <span class=\"keyword\">yield</span> <span class=\"number\">111</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(one);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> two = <span class=\"keyword\">yield</span> <span class=\"number\">222</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(two);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> three = <span class=\"keyword\">yield</span> <span class=\"number\">333</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(three);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> iterator = gen(<span class=\"string\">&#x27;AAA&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">// next方法可以传入实参  传入的参数将作为上一个yeild语句的返回结果</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next());</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next(<span class=\"string\">&#x27;BBB&#x27;</span>));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next(<span class=\"string\">&#x27;CCC&#x27;</span>));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next(<span class=\"string\">&#x27;DDD&#x27;</span>));</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>生成器函数实例</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 异步编程：文件操作   网络操作（AJAX、request）  数据库操作</span></span><br><span class=\"line\"><span class=\"comment\">// 1s后控制台输出 111   2s后输出222   3s后输出333</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 可以达到效果，但是不具有易读性、且难以调试    称为【回调地狱】</span></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">111</span>);</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">   \t\t <span class=\"built_in\">console</span>.log(<span class=\"number\">222</span>);</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">   \t\t\t <span class=\"built_in\">console</span>.log(<span class=\"number\">333</span>);</span><br><span class=\"line\">\t\t&#125;,<span class=\"number\">3000</span>);</span><br><span class=\"line\">\t&#125;,<span class=\"number\">2000</span>);</span><br><span class=\"line\">&#125;,<span class=\"number\">1000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 生成器函数 解决了 回调地狱</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">one</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"number\">111</span>);</span><br><span class=\"line\">        iterator.next();</span><br><span class=\"line\">    &#125;,<span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">two</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"number\">222</span>);</span><br><span class=\"line\">        iterator.next();</span><br><span class=\"line\">    &#125;,<span class=\"number\">2000</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">three</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"number\">333</span>);</span><br><span class=\"line\">        iterator.next();</span><br><span class=\"line\">    &#125;,<span class=\"number\">3000</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> * <span class=\"title\">gen</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> one();</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> two();</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> three();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 调用生成器函数</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> iterator = gen();</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取数据  用户数据  订单数据  商品数据</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getUsers</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> data = <span class=\"string\">&#x27;用户数据&#x27;</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 调用next方法，并将数据传入</span></span><br><span class=\"line\">        iterator.next(data);</span><br><span class=\"line\">    &#125;,<span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getOrders</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> data = <span class=\"string\">&#x27;订单数据&#x27;</span>;</span><br><span class=\"line\">        iterator.next(data);</span><br><span class=\"line\">    &#125;,<span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getGoods</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> data = <span class=\"string\">&#x27;商品数据&#x27;</span>;</span><br><span class=\"line\">    &#125;,<span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> * <span class=\"title\">gen</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> users = <span class=\"keyword\">yield</span> getUsers();</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(users);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> orders = <span class=\"keyword\">yield</span> getOrders();</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(orders);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> goods = <span class=\"keyword\">yield</span> getGoods();</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(goods);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> iterator = gen();</span><br><span class=\"line\">iterator.next();</span><br></pre></td></tr></table></figure>\n<h2 id=\"promise\"><a class=\"markdownIt-Anchor\" href=\"#promise\">#</a> Promise</h2>\n<blockquote>\n<p>异步编程新的解决方案，语法上是一个构造函数，用来封装异步操作并可以获取其成功或失败的结果</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve,reject</span>) =&gt; </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">let</span> data = <span class=\"string\">&#x27;数据库中的用户数据&#x27;</span>;</span><br><span class=\"line\">    \t\tresolve(data);</span><br><span class=\"line\">    \t\t<span class=\"comment\">// let err = &#x27;数据发生错误&#x27;;</span></span><br><span class=\"line\">            <span class=\"comment\">// reject(err);</span></span><br><span class=\"line\">\t\t&#125;,<span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 调用promise对象的 then 方法</span></span><br><span class=\"line\">p.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(value);</span><br><span class=\"line\">&#125;,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">reason</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(reason);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>读取文件：使用 Promise 封装</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 前提需要引入fs模块</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>)</span>&#123;</span><br><span class=\"line\">   fs.readFile(<span class=\"string\">&quot;路径&quot;</span>, <span class=\"function\">(<span class=\"params\">err,data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span>(err)  reject(err);</span><br><span class=\"line\">       resolve(data);</span><br><span class=\"line\">   &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">p.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(value.toString());</span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">reason</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;读取失败&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>使用 Promise 封装 AJAX 请求</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1. 创建对象</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\"><span class=\"comment\">// 2. 初始化</span></span><br><span class=\"line\">xhr.open(<span class=\"string\">&quot;GET&quot;</span>,<span class=\"string\">&quot;https://api.apiopen.top/...&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 3. 发送</span></span><br><span class=\"line\">xhr.send();</span><br><span class=\"line\"><span class=\"comment\">// 4.绑定事件  处理响应结果</span></span><br><span class=\"line\">xhr.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(xhr.status &gt;= <span class=\"number\">200</span> &amp;&amp; xhr.status &lt; <span class=\"number\">300</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(xhr.response);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.error(xhr.status);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1. 创建对象</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">    <span class=\"comment\">// 2. 初始化</span></span><br><span class=\"line\">    xhr.open(<span class=\"string\">&quot;GET&quot;</span>,<span class=\"string\">&quot;https://api.apiopen.top/...&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 3. 发送</span></span><br><span class=\"line\">    xhr.send();</span><br><span class=\"line\">    <span class=\"comment\">// 4.绑定事件  处理响应结果</span></span><br><span class=\"line\">    xhr.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(xhr.status &gt;= <span class=\"number\">200</span> &amp;&amp; xhr.status &lt; <span class=\"number\">300</span>)&#123;</span><br><span class=\"line\">            resolve(xhr.response);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            reject(xhr.status);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 指定回调</span></span><br><span class=\"line\">p.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(value);</span><br><span class=\"line\">&#125;,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">reason</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(reason);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Promise.prototype.then</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// p 为 Promise对象</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> result = p.then(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(value);</span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"params\">reason</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(reason);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result);   <span class=\"comment\">// then方法返回的也是一个Promise</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>then 方法返回的也是一个 Promise 对象</p>\n</li>\n<li>\n<p>对象的状态由回调函数的执行结果决定</p>\n<ol>\n<li>回调函数返回的结果是 【非 Promise 类型的属性】，状态为成功，返回值为对象成功的值</li>\n<li>如果是 Promise 对象，那么 Promise 对象的状态决定了 then 方法返回的 Promise 对象的状态</li>\n</ol>\n</li>\n<li>\n<p>由于返回的结果都是 Promise 对象，所以通过 then 方法可以链式调用，解决了回调地狱</p>\n</li>\n</ul>\n<blockquote>\n<p>使用 Promise 异步读取多个文件并合并内容</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>)=&gt;</span> &#123;</span><br><span class=\"line\">    fs.readFile(<span class=\"string\">&quot;path1&quot;</span>, <span class=\"function\">(<span class=\"params\">err,data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 理论上这里要进行读取成功/失败的判断，确保成功前提下，这里直接调用resolve</span></span><br><span class=\"line\">        resolve(data);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">p.then(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</span><br><span class=\"line\">    fs.readFile(<span class=\"string\">&quot;path2&quot;</span>, <span class=\"function\">(<span class=\"params\">err,data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        resolve(value, data);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        fs.readFile(<span class=\"string\">&quot;path3&quot;</span>, <span class=\"function\">(<span class=\"params\">err,data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            value.push(data);</span><br><span class=\"line\">            resolve(value);</span><br><span class=\"line\">    \t&#125;);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(value.join(<span class=\"string\">&#x27;\\r\\n&#x27;</span>));</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>catch 方法：用于指定发生错误的回调函数</p>\n</blockquote>\n<ul>\n<li>\n<p>可以看作是 then 方法的一个语法糖，回调函数只用传一个参数</p>\n</li>\n<li>\n<p>then 方法指定的回调函数如果允许抛出错误，也会被 catch 捕捉</p>\n</li>\n<li>\n<p>错误总会被下一个 catch 语句捕获</p>\n</li>\n</ul>\n<h2 id=\"set集合\"><a class=\"markdownIt-Anchor\" href=\"#set集合\">#</a> Set (集合)</h2>\n<blockquote>\n<p>ES6 提供的新的数据结构 Set (集合)。类似于数组，但是成员的值都是唯一的，且实现了 iterator 接口，可以使用扩展运算符和 for…of 进行遍历</p>\n</blockquote>\n<ul>\n<li>属性和方法如下：\n<ol>\n<li>size\t\t返回集合元素个数</li>\n<li>add       向集合中添加新元素，返回当前集合</li>\n<li>delete    删除元素，返回 boolean 值</li>\n<li>has         检查集合中是否包含某个元素，返回 boolean 值</li>\n<li>clear       清空集合，返回 undefined</li>\n</ol>\n</li>\n</ul>\n<blockquote>\n<p>集合实践</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">4</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2 = [<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 去重</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> result = [...new <span class=\"built_in\">Set</span>(arr)];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 交集</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> result1 = [...new <span class=\"built_in\">Set</span>(arr)].filter(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>(arr2).has(item));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result1);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 并集</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> union = [...new <span class=\"built_in\">Set</span>([...arr, ...arr2])];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(union);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 差集</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> diff = [...new <span class=\"built_in\">Set</span>(arr)].filter(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> !(<span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>(arr2).has(item)));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(diff);</span><br></pre></td></tr></table></figure>\n<h2 id=\"map\"><a class=\"markdownIt-Anchor\" href=\"#map\">#</a> Map</h2>\n<blockquote>\n<p>类似于对象，是键值对的集合</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义Map</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> m = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\"><span class=\"comment\">// 设置键值</span></span><br><span class=\"line\">m.set(<span class=\"string\">&#x27;name&#x27;</span>,<span class=\"string\">&#x27;shangguigu&#x27;</span>);</span><br><span class=\"line\">m.set(<span class=\"string\">&#x27;change&#x27;</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i can change you&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">let</span> key = &#123;</span><br><span class=\"line\">    school : <span class=\"string\">&#x27;atguigu&#x27;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">m.set(key, [<span class=\"string\">&#x27;北京&#x27;</span>,<span class=\"string\">&#x27;上海&#x27;</span>]);</span><br><span class=\"line\"><span class=\"comment\">// 获取键值对个数</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(m.size);</span><br><span class=\"line\"><span class=\"comment\">// 删除</span></span><br><span class=\"line\">m.delete(<span class=\"string\">&#x27;name&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 获取键的值</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(m.get(<span class=\"string\">&#x27;change&#x27;</span>));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(m.get(<span class=\"string\">&#x27;key&#x27;</span>));</span><br></pre></td></tr></table></figure>\n<h2 id=\"class类\"><a class=\"markdownIt-Anchor\" href=\"#class类\">#</a> class 类</h2>\n<blockquote>\n<p>ES6 引入 class 类，作为对象的模板，可以看作是一个语法糖</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ES5</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Phone</span>(<span class=\"params\">brand, price</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.brand = brand;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.price = price;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Phone.prototype.call = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i can call&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> one = <span class=\"keyword\">new</span> Phone(<span class=\"string\">&#x27;1+&#x27;</span>,<span class=\"number\">1999</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ES6</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PhonePlus</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 构造方法，名字不能更改</span></span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(brand,price)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.brand = brand;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.price = price;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 方法必须使用该语法，不能使用 ES 5的对象完整形式</span></span><br><span class=\"line\">    call() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i can call&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> onePlus = <span class=\"keyword\">new</span> PhonePlus(<span class=\"string\">&#x27;1+&#x27;</span>,<span class=\"number\">1999</span>);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>实例对象和函数对象的属性和方法是不相通的，函数对象的属性称为静态成员，以面向对象的角度来看，函数对象的属性属于类，不属于实例对象</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Phone</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Phone.name = <span class=\"string\">&#x27;shouji&#x27;</span>;</span><br><span class=\"line\">Phone.change = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i can change&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> nokia = <span class=\"keyword\">new</span> Phone();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(nokia.name);   <span class=\"comment\">// undefined</span></span><br><span class=\"line\">nokia.change();   \t\t   <span class=\"comment\">// is not a function</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 函数的原型对象和实例对象的属性和方法是相通的</span></span><br><span class=\"line\">Phone.prototype.size = <span class=\"string\">&#x27;5.5inch&#x27;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(nokia.size);\t<span class=\"comment\">// 5.5inch</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// static 标注的属性和方法属于类而不属于实例对象</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PhonePlus</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> name = <span class=\"string\">&#x27;shouji&#x27;</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> change()&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i can change&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> onePlus = <span class=\"keyword\">new</span> PhonePlus();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(onePlus.name);\t<span class=\"comment\">// undefined</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Phone.name);    <span class=\"comment\">// shouji</span></span><br><span class=\"line\">onePlus.change();</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>对象继承</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ES 5 实现函数继承</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Phone</span>(<span class=\"params\">brand, price</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.brand = brand;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.price = price;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Phone.prototype.call = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i can call&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SmartPhone</span>(<span class=\"params\">brand,price,color,size</span>)</span>&#123;</span><br><span class=\"line\">    Phone.call(<span class=\"built_in\">this</span>,brand,price);</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.color = color;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.size = size;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置子级构造函数的模型</span></span><br><span class=\"line\">SmartPhone.prototype = <span class=\"keyword\">new</span> Phone;</span><br><span class=\"line\">SmartPhone.prototype.constructor = SmartPhone;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 声明字类的方法</span></span><br><span class=\"line\">SmartPhone.prototype.photo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i can take photos&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">SmartPhone.prototype.game = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i can play game&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> stin = <span class=\"keyword\">new</span> SmartPhone(<span class=\"string\">&#x27;stin&#x27;</span>,<span class=\"number\">2499</span>,<span class=\"string\">&#x27;black&#x27;</span>,<span class=\"string\">&#x27;5.5inch&#x27;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(stin);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ES 6 实现继承</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Phone</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(brand,price) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.brand = brand;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.price = price;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    call() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i can call&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SmartPhone</span> <span class=\"keyword\">extends</span> <span class=\"title\">Phone</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(brand,price,color,size)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(brand,price);</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.color = color;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.size = size;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    photo() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i can take photo&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    game()&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i can play games&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> xiaomi = <span class=\"keyword\">new</span> SmartPhone(<span class=\"string\">&#x27;xiaomi&#x27;</span>,<span class=\"number\">1999</span>,<span class=\"string\">&#x27;black&#x27;</span>,<span class=\"string\">&#x27;4.7inch&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>字类对父类进行重写</p>\n</blockquote>\n<ul>\n<li>字类不能调用通过 super 调用父类的同名方法，只能进行重写</li>\n<li>字类重写的方法覆盖父类同名方法，自定义字类功能</li>\n</ul>\n<blockquote>\n<p>get 和 set</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Phone</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">get</span> <span class=\"title\">price</span>()&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;调用price属性就会执行，且属性值为return返回值&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&#x27;abcdefg&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 必须有一个参数</span></span><br><span class=\"line\">    <span class=\"keyword\">set</span> <span class=\"title\">price</span>(<span class=\"params\">newVal</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;价格属性被修改了&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 实例化对象</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> s = <span class=\"keyword\">new</span> Phone();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s.price);    <span class=\"comment\">// 上面的字符串     adcdefg</span></span><br><span class=\"line\"></span><br><span class=\"line\">s.price = <span class=\"string\">&#x27;free&#x27;</span>;\t<span class=\"comment\">// 对price属性进行修改，触发set函数</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"数值扩展\"><a class=\"markdownIt-Anchor\" href=\"#数值扩展\">#</a> 数值扩展</h2>\n<ul>\n<li>Number.EPSILON    \t\t\t表示最小精度，常用于浮点数运算</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">eqal</span>(<span class=\"params\">a,b</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">Math</span>.abx(a-b) &lt; <span class=\"built_in\">Number</span>.EPSILON)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">0.1</span> + <span class=\"number\">0.2</span> === <span class=\"number\">0.3</span>);   <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(eqal(<span class=\"number\">0.1</span>+<span class=\"number\">0.2</span>, <span class=\"number\">0.3</span>));  <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>二进制和八进制</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"number\">0b1010</span>;\t\t<span class=\"comment\">// 二进制</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> o = <span class=\"number\">0o777</span>;\t\t<span class=\"comment\">// 八进制</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> x - <span class=\"number\">0xff</span>;\t\t<span class=\"comment\">// 十六进制</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(o);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(x);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Number.isFinite\t\t检测一个数值是否为有限数</li>\n<li>Number.isNaN         检查一个数值是否为  NaN</li>\n<li>Number.parseInt      Number.parseFloat       截取</li>\n<li>Number.isInteger      判断一个数是否为整数</li>\n<li>Math.trunc                 将小数部分抹掉</li>\n<li>Math.sign                   判断一个数是正数、0、负数</li>\n</ul>\n<h2 id=\"对象方法扩展\"><a class=\"markdownIt-Anchor\" href=\"#对象方法扩展\">#</a> 对象方法扩展</h2>\n<ul>\n<li>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL09iamVjdC5pcw==\">Object.is</span> \t\t\t判断两个值是否完全相等    大致相当于 ====</p>\n<ol>\n<li>NaN  ===  NaN                   \t结果为 false</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL09iamVjdC5pcw==\">Object.is</span> (NaN,NaN)              结果为 true</li>\n</ol>\n</li>\n<li>\n<p>Object.assign                                     对象的合并</p>\n</li>\n<li>\n<p>Object.setPrototypeOf                      设置原型对象</p>\n</li>\n<li>\n<p>Object.getPrototypeOf                      获取原型对象</p>\n</li>\n</ul>\n<h2 id=\"模块化\"><a class=\"markdownIt-Anchor\" href=\"#模块化\">#</a> 模块化</h2>\n<blockquote>\n<p>将大程序文件拆分成一个个功能模块，然后最后将模块汇总</p>\n</blockquote>\n<p>模块化的优势如下：</p>\n<ol>\n<li>防止命名冲突</li>\n<li>高维护性      解决依赖之间模糊的关系问题</li>\n<li>代码复用</li>\n</ol>\n<blockquote>\n<p>模块化产品</p>\n</blockquote>\n<ol>\n<li>CommonJS \t\tNodeJS、Browserify</li>\n<li>AMD                    requireJS</li>\n<li>CMD                    seaJS</li>\n<li>ES6 模块化          通过 export  import 进行模块的导入与导出</li>\n</ol>\n<blockquote>\n<p>暴露模块的语法</p>\n</blockquote>\n<ol>\n<li>分别暴露               exoprt    方法 1               export  方法 2       export 属性 1</li>\n<li 暴露的方法和属性>统一暴露               export    </li>\n<li 暴露的方法、属性、对象>默认暴露                export   default  </li>\n</ol>\n<blockquote>\n<p>引入模块的语法</p>\n</blockquote>\n<ol>\n<li>import   *  as   别名   from “路径”\t \t\t\t\t\t\t\t\t\t\t\t\t通用模式</li>\n<li>import   {school,  teach}    from “路径”;                                解构赋值形式</li>\n<li>import   {school as campus,  findJob}    from “路径”;         如果解构重名，需要起别名</li>\n<li>import    {default   as   m3}  from “路径”;                             default 对象</li>\n<li>import    m3  from “路径”;                                                      简便形式    针对默认暴露</li>\n</ol>\n<blockquote>\n<p>app.js    入口文件</p>\n</blockquote>\n<ul>\n<li>将模块和需要导入的 package 全部放入 app.js 入口文件</li>\n<li>在 html 主页面只需要引入入口文件即可，设置 type 为 module</li>\n</ul>\n<blockquote>\n<p>babel 对模块化代码的转换</p>\n</blockquote>\n<ol>\n<li>安装工具     babel-cli      babel-preset-env      browserify (正式项目里使用 webpack)</li>\n<li>npx  babel     打包文件    -d    目标文件</li>\n<li>npx   browserify    dist/js/app.js    -o   dist/bundle.js</li>\n</ol>\n",
            "tags": [
                "ES6"
            ]
        },
        {
            "id": "http://csstar.top/2022/03/09/vscode%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/",
            "url": "http://csstar.top/2022/03/09/vscode%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/",
            "title": "vscode常用快捷键",
            "date_published": "2022-03-09T05:16:51.000Z",
            "content_html": "<h1 id=\"vscode常用快捷键\"><a class=\"markdownIt-Anchor\" href=\"#vscode常用快捷键\">#</a> vscode 常用快捷键</h1>\n<ul>\n<li>向上 / 下复制当前行</li>\n</ul>\n<blockquote>\n<p>alt + shift  +  ⬆/⬇</p>\n</blockquote>\n<ul>\n<li>逐个选择文本</li>\n</ul>\n<blockquote>\n<p>CTRL  +  shift  +  ⬅/➡</p>\n</blockquote>\n<ul>\n<li>批量替换匹配文本</li>\n</ul>\n<blockquote>\n<p>CTRL  +  F2</p>\n</blockquote>\n<ul>\n<li>将当前行代码上 / 下移</li>\n</ul>\n<blockquote>\n<p>alt   +  ⬆/⬇</p>\n</blockquote>\n<ul>\n<li>删除当前行</li>\n</ul>\n<blockquote>\n<p>CTRL  +  x</p>\n</blockquote>\n<ul>\n<li>多行同时编辑</li>\n</ul>\n<blockquote>\n<ol>\n<li>\n<p>CTRL  +  alt   +   ⬆/⬇</p>\n</li>\n<li>\n<p>alt  +  鼠标选中特定位置</p>\n</li>\n</ol>\n</blockquote>\n<ul>\n<li>快速定位文件首位行</li>\n</ul>\n<blockquote>\n<p>CTRL  +  home/end</p>\n</blockquote>\n<ul>\n<li>删除上一个词</li>\n</ul>\n<blockquote>\n<p>CTRL  +  backspace</p>\n</blockquote>\n<ul>\n<li>选择光标左 / 右侧全部内容</li>\n</ul>\n<blockquote>\n<p>CTRL  +  shift  +   home/end</p>\n</blockquote>\n<ul>\n<li>按名称搜索文件</li>\n</ul>\n<blockquote>\n<p>CTRL  +  p</p>\n</blockquote>\n",
            "tags": [
                "快捷操作"
            ]
        },
        {
            "id": "http://csstar.top/2020/10/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%A4%8D%E4%B9%A0/",
            "url": "http://csstar.top/2020/10/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%A4%8D%E4%B9%A0/",
            "title": "计算机组成原理复习",
            "date_published": "2020-10-03T12:23:32.000Z",
            "content_html": "<h1 id=\"重点知识点\"><a class=\"markdownIt-Anchor\" href=\"#重点知识点\">#</a> 重点知识点</h1>\n<p>IEEE754 标准的 32/64 位浮点数的表示方法、补码的加减运算、双符号位运算判断是否溢出、指令格式的设计、存储器的扩展问题、静态存储图、SRAM 结构图、cache 的相关计算、寻址方式、CPU 模型、指令周期、双总线数据通路、指令周期流程图、ALU 运算器的结构图、微指令格式设计、微程序控制器、流水线时空图以及一些相关计算（吞吐率，加速比）、总线带宽、磁盘计算、刷新存储器、中断原理。</p>\n<h1 id=\"cache的相关计算\"><a class=\"markdownIt-Anchor\" href=\"#cache的相关计算\">#</a> cache 的相关计算</h1>\n<ol>\n<li>\n<p>命中率 H = 访问 cache 的次数 /（访问 cache 次数 + 访问主存的次数）</p>\n</li>\n<li>\n<p>平均访问时间 t=H✖访问 cache 的平均时间 +（1-H）✖访问主存的平均时间</p>\n</li>\n<li>\n<p>主存慢于 cache 的倍率 r = 访问主存平均的时间 / 访问 cache 的平均时间</p>\n</li>\n<li>\n<p>访问频率 e=t（c）/  t（a） =  1/ （r+（1-r）h）</p>\n</li>\n</ol>\n<h1 id=\"磁盘的相关计算\"><a class=\"markdownIt-Anchor\" href=\"#磁盘的相关计算\">#</a> 磁盘的相关计算</h1>\n<ol>\n<li>平均存储时间 = 找道时间 + 等待时间（1/2r） + 数据传输时间（b/rN）</li>\n<li>有效存储区域：外半径 - 内半径</li>\n<li>圆柱面 = 道密度✖有效存储区域</li>\n<li>每道信息量 N：有效道周长✖位密度 D</li>\n<li>每道信息量：每道信息量✖圆柱面</li>\n<li>总存储量：每道信息量✖有效面数</li>\n<li>数据传输率：D（r）=r（转速）✖N（每道信息量）    D（r）=D（位密度）✖ v（线速度）</li>\n</ol>\n<h1 id=\"ieee754标准\"><a class=\"markdownIt-Anchor\" href=\"#ieee754标准\">#</a> IEEE754 标准</h1>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>阶符</th>\n<th>阶码</th>\n<th>数值位</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>32 位浮点数</td>\n<td>1 位</td>\n<td>8 位</td>\n<td>23 位</td>\n</tr>\n<tr>\n<td>64 位浮点数</td>\n<td>1 位</td>\n<td>11 位</td>\n<td>52 位</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>注意：阶码用移码来表示，其中 32 位在指数的基础上加上 127，64 位在指数的基础上加上 1023</p>\n</blockquote>\n<h1 id=\"补码加减法\"><a class=\"markdownIt-Anchor\" href=\"#补码加减法\">#</a> 补码加减法</h1>\n<blockquote>\n<p>正数的补码是本身，负数的补码是符号位不变，数值为取反，末尾加一；</p>\n<p>符号的最高位进位应该丢弃；</p>\n<p>采用双符号位补码运算可确定是否溢出；</p>\n<p>y 的补码求 - y 补码的原则：包含符号位取反末尾加一；</p>\n</blockquote>\n<p>公式：</p>\n<p>x 的补码 + y 的补码 =  （x+y）的补码</p>\n<p>x 的补码 - y 的补码   = x 的补码 + （-y）的补码 = （x-y）的补码</p>\n<h1 id=\"机器的指令格式\"><a class=\"markdownIt-Anchor\" href=\"#机器的指令格式\">#</a> 机器的指令格式</h1>\n<table>\n<thead>\n<tr>\n<th>操作码</th>\n<th>寻址位</th>\n<th>数据域</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>与指令的数量有关</td>\n<td>与寻址方式的数量有关</td>\n<td>机器字长减去前面两个域的位数</td>\n</tr>\n</tbody>\n</table>\n<p>以上是单地址的表示方法，还有双地址，三地址的表示方法。</p>\n<h1 id=\"主存地址格式\"><a class=\"markdownIt-Anchor\" href=\"#主存地址格式\">#</a> 主存地址格式</h1>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>第一个域</th>\n<th>第二个域</th>\n<th>第三个域</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>直接映射方式</td>\n<td>标记（s-r）</td>\n<td>行号 r</td>\n<td>字地址 w</td>\n</tr>\n<tr>\n<td>组相联映射方式</td>\n<td>标记（s-d）</td>\n<td>组号 d</td>\n<td>字地址 w</td>\n</tr>\n<tr>\n<td>全相联映射方式</td>\n<td>标记 s</td>\n<td>字地址 w</td>\n<td>无，只有两个域</td>\n</tr>\n</tbody>\n</table>\n<p>解释：</p>\n<ol>\n<li>w 的计算：与块的大小有关</li>\n<li>d 的计算：组数    （cache 的行数 = 组数✖每组的行数）</li>\n<li>s 的计算：与主存的块数有关</li>\n<li>主存地址的长度：（s+w）</li>\n<li>主存寻址单元数 + 主存容量：2 的（s+w）次方</li>\n</ol>\n<blockquote>\n<p>单位的换算：1MB  = 2 的 20 次方 B     1KB = 2 的 10 次方 B</p>\n<p>同时注意 B 和 b 的区别，前者为字节，后者为比特，一个字节等于八个比特</p>\n</blockquote>\n<h1 id=\"存储器存储信息\"><a class=\"markdownIt-Anchor\" href=\"#存储器存储信息\">#</a> 存储器存储信息</h1>\n<p>存储位元总数：存储器容量（2 的地址位）✖存储器的字长</p>\n<p>如：16 位地址，32 位字长的 RAM 存储器</p>\n<p>存储容量为：2 的 16 次方✖2 的 5 次方 / 8  = 2 的 18 次方个字节</p>\n<h1 id=\"流水cpu\"><a class=\"markdownIt-Anchor\" href=\"#流水cpu\">#</a> 流水 CPU</h1>\n<p>同一个处理机同一时间只能处理一个程序。</p>\n<p>吞吐率（每秒钟执行完毕的指令条数） =  总指令条数 / 总时间</p>\n<p>加速比：非流水 CPU 所耗的时间 /  流水 CPU 耗时</p>\n<h1 id=\"微指令格式\"><a class=\"markdownIt-Anchor\" href=\"#微指令格式\">#</a> 微指令格式</h1>\n<table>\n<thead>\n<tr>\n<th>操作控制 OP</th>\n<th>测试字段 P</th>\n<th>地址字段 A</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>操作控制</td>\n<td>顺序控制</td>\n<td>顺序控制</td>\n</tr>\n</tbody>\n</table>\n<p>控存容量：1024✖64 位 —&gt; 地址字段有 10 位</p>\n<p>测试字段的位数：与控制转移条件的个数有关</p>\n<p>操作控制字段：微指令字长减去上面两个字段所占的位数</p>\n<blockquote>\n<p>控制存储器：只读存储器，存放全部指令系统的微程序；</p>\n<p>微指令寄存器：微命令寄存器，负责存放 P 字段和控制字段。微地址寄存器，存放下一条微指令的地址信息。</p>\n<p>地址转移逻辑：微程序出现分支时，根据测试标志的状态，去对微地址寄存器中的内容进行修改。</p>\n</blockquote>\n<h1 id=\"中断\"><a class=\"markdownIt-Anchor\" href=\"#中断\">#</a> 中断</h1>\n<p>定义：</p>\n<blockquote>\n<p>子程序的数据准备就绪时，向 CPU 发送请求中断的信号。（我理解的是请求暂时中断主程序，来服务子程序，子程序处理完后，返回主程序继续执行）</p>\n</blockquote>\n<p>注意：</p>\n<blockquote>\n<ul>\n<li>向 CPU 发送中断信号的同时，同时将 “中断屏蔽触发器” 置为 1，关闭中断请求，防止其它程序中断请求</li>\n<li>处理完子程序，“中断屏蔽触发器” 置为 0，开放，便于其它子程序发送中断请求信号</li>\n</ul>\n</blockquote>\n<p>其它概念:</p>\n<blockquote>\n<p>保护现场：将 PC 内容、CPU 状态等保存到堆栈中；</p>\n<p>四个标志触发器：RD（准备就绪）、EI（允许中断触发器）、IR（中断寄存器）、IM（中断屏蔽触发器）；</p>\n<p>单级中断 / 多级中断</p>\n</blockquote>\n<h1 id=\"寻址方式\"><a class=\"markdownIt-Anchor\" href=\"#寻址方式\">#</a> 寻址方式</h1>\n<h2 id=\"指令的寻址方式\"><a class=\"markdownIt-Anchor\" href=\"#指令的寻址方式\">#</a> 指令的寻址方式</h2>\n<blockquote>\n<p>总共有两种：顺序寻址方式和跳跃寻址方式</p>\n</blockquote>\n<h2 id=\"操作数的基本寻址方式\"><a class=\"markdownIt-Anchor\" href=\"#操作数的基本寻址方式\">#</a> 操作数的基本寻址方式</h2>\n<blockquote>\n<p>隐含寻址、立即寻址、直接寻址、间接寻址、寄存器寻址、寄存器间接寻址、偏移寻址、堆栈寻址。</p>\n</blockquote>\n",
            "tags": [
                "计算机组成原理"
            ]
        },
        {
            "id": "http://csstar.top/2020/09/27/%E7%AC%AC%E5%9B%9B%E5%91%A8%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/",
            "url": "http://csstar.top/2020/09/27/%E7%AC%AC%E5%9B%9B%E5%91%A8%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/",
            "title": "第四周知识点总结",
            "date_published": "2020-09-27T01:28:06.000Z",
            "content_html": "<h1 id=\"关于博客插入图片\"><a class=\"markdownIt-Anchor\" href=\"#关于博客插入图片\">#</a> 关于博客插入图片</h1>\n<h2 id=\"遇到的问题\"><a class=\"markdownIt-Anchor\" href=\"#遇到的问题\">#</a> 遇到的问题</h2>\n<p>如果是阿里云服务器，你使用本地的图片路径，远端服务器是访问不到的。这和在 github 上部署有些不一样，因为你可以新建一个 images 文件专门用来存放图片，github 可以访问得到。</p>\n<h2 id=\"解决办法\"><a class=\"markdownIt-Anchor\" href=\"#解决办法\">#</a> 解决办法</h2>\n<p>使用图床来实现图片的加载，我就用自己的话说一下图床。</p>\n<blockquote>\n<p>图床：你把本地图片上传到一个云存储里，然后这个云存储会把这些图片自动生成网页链接，于是你就可以通过网络链接来访问这些图片，相当于你博客引用的图片就是引用网上的图片，这样远端服务器就可以访问的到。</p>\n</blockquote>\n<h2 id=\"添加图片链接的格式\"><a class=\"markdownIt-Anchor\" href=\"#添加图片链接的格式\">#</a> 添加图片链接的格式</h2>\n<ul>\n<li>\n<p>！[描述信息] (图片链接 )</p>\n</li>\n<li>\n<p>img 标签 + src（图片链接）+alt（描述信息）</p>\n</li>\n</ul>\n<h2 id=\"data-src与src属性\"><a class=\"markdownIt-Anchor\" href=\"#data-src与src属性\">#</a> data-src 与 src 属性</h2>\n<p>img 标签如果只有 data-src 属性，是无法实现图片的显示的，它是图片懒加载的标志，负责存储照片的信息，只有同时存在 src 属性，才会把 data-src 中存储的图片信息赋值给 src，最终实现图片的实现。</p>\n<h1 id=\"进程的几种状态\"><a class=\"markdownIt-Anchor\" href=\"#进程的几种状态\">#</a> 进程的几种状态</h1>\n<h2 id=\"三种基本状态\"><a class=\"markdownIt-Anchor\" href=\"#三种基本状态\">#</a> 三种基本状态</h2>\n<blockquote>\n<p>准备状态，运行状态，就绪状态</p>\n</blockquote>\n<ul>\n<li>就绪状态：一个进程获得了除处理机外的一切资源，只要被调度，就会由就绪状态变为运行状态。</li>\n<li>运行状态：一个进程在处理机上运行。</li>\n<li>阻塞状态：正在执行的进程，由于等待某个事件发生而无法执行时，放弃处理机便处于阻塞状态。例如：等待 I/O 完成、申请缓冲区不能满足、等待信号等。</li>\n</ul>\n<h2 id=\"进程状态的变迁\"><a class=\"markdownIt-Anchor\" href=\"#进程状态的变迁\">#</a> 进程状态的变迁</h2>\n<blockquote>\n<ol>\n<li>就绪 —&gt; 执行</li>\n</ol>\n</blockquote>\n<p>处于就绪的进曾，一旦被分配了处理机，配可以转换为执行状态。</p>\n<blockquote>\n<ol start=\"2\">\n<li>执行 —&gt; 就绪</li>\n</ol>\n</blockquote>\n<p>执行状态的进程所分配的时间片用完了，就不得不让出处理机，但同时又是非自愿推出执行状态，因此处于就绪队列，等待处理机处理。</p>\n<blockquote>\n<ol start=\"3\">\n<li>执行 —&gt; 阻塞</li>\n</ol>\n</blockquote>\n<p>正在执行的进程因为等待某件事情的执行结果而无法继续执行。</p>\n<blockquote>\n<ol start=\"4\">\n<li>阻塞 —&gt; 就绪</li>\n</ol>\n</blockquote>\n<p>处于阻塞状态的进程，若其等待的事情已经发生，进程便由阻塞态转变为就绪态。</p>\n<h2 id=\"阻塞状态和等待状态\"><a class=\"markdownIt-Anchor\" href=\"#阻塞状态和等待状态\">#</a> 阻塞状态和等待状态</h2>\n<p>阻塞时被动的阻塞，一个线程去争抢一个内部对象的锁，但是此时这个锁被其他线程所持有，那么该线程就会进入阻塞状态，也就是单例模式中，多个线程同时争抢锁，没有抢到锁的那个线程的状态。</p>\n<blockquote>\n<p>线程和别的线程争抢锁没有抢到，就处于阻塞状态；（此时线程还没有进入同步代码块）</p>\n<p>线程抢到了锁进入同步代码块，某些条件下，就处于等待状态。</p>\n</blockquote>\n<h1 id=\"操作系统的基本知识\"><a class=\"markdownIt-Anchor\" href=\"#操作系统的基本知识\">#</a> 操作系统的基本知识</h1>\n<ol>\n<li>一个字节 = 8bit</li>\n<li>发送延时 = 数据帧的长度 / 发送速率</li>\n<li>传播延时 = 信道长度 / 电磁波在信道上的传播速率</li>\n<li>除了发送和传播延时，还有处理延时和排队延时</li>\n<li>总延时 = 发送延时 + 传播延时 + 处理延时 + 排队延时</li>\n</ol>\n",
            "tags": [
                "小的知识点"
            ]
        },
        {
            "id": "http://csstar.top/2020/09/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/",
            "url": "http://csstar.top/2020/09/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/",
            "title": "设计模式之单例模式",
            "date_published": "2020-09-21T11:07:10.000Z",
            "content_html": "<h1 id=\"概括\"><a class=\"markdownIt-Anchor\" href=\"#概括\">#</a> 概括</h1>\n<h2 id=\"定义\"><a class=\"markdownIt-Anchor\" href=\"#定义\">#</a> 定义</h2>\n<p>单例模式指在内存中只会创建一次且仅创建一次对象的模式。</p>\n<h2 id=\"原因\"><a class=\"markdownIt-Anchor\" href=\"#原因\">#</a> 原因</h2>\n<p>该模式是为了防止创建多个对象造成的资源浪费和管理困难的问题，仅在内存中创建一个对象，让有需要调用的地方都使用这一个单例对象。</p>\n<h2 id=\"两种模式\"><a class=\"markdownIt-Anchor\" href=\"#两种模式\">#</a> 两种模式</h2>\n<p>饿汉式：只有在需要调用对象的时候采取调用单例对象。</p>\n<p>懒汉式：类加载的时候就已经创建好了单例对象，随时等待调用。</p>\n<h1 id=\"使用方法\"><a class=\"markdownIt-Anchor\" href=\"#使用方法\">#</a> 使用方法</h1>\n<h2 id=\"懒汉式\"><a class=\"markdownIt-Anchor\" href=\"#懒汉式\">#</a> 懒汉式：</h2>\n<p>当程序需要使用对象的时候，先判断对象是否已经实例化，如果没有，则实例化对象，如果已经实例化，则直接返回对象。</p>\n<p><strong>示意图：</strong></p>\n<p><img data-src=\"http://qh82kvit3.hn-bkt.clouddn.com/clipboard-1601039788093.png\" alt></p>\n<p><strong>实例代码：</strong></p>\n<p><img data-src=\"http://qh82kvit3.hn-bkt.clouddn.com/clipboard-1601039836972.png\" alt=\"avatar\"></p>\n<h2 id=\"饿汉模式\"><a class=\"markdownIt-Anchor\" href=\"#饿汉模式\">#</a> 饿汉模式</h2>\n<p>类加载的时候直接创建单例对象，当需要调用时，直接使用这个已经创建好的单例对象就行</p>\n<p><strong>示意图：</strong></p>\n<p><img data-src=\"http://qh82kvit3.hn-bkt.clouddn.com/clipboard-1601039865541.png\" alt=\"avatar\"></p>\n<p><strong>示例代码：</strong></p>\n<p><img data-src=\"http://qh82kvit3.hn-bkt.clouddn.com/clipboard-1601039888935.png\" alt=\"avatar\"></p>\n<p><strong>注意：</strong></p>\n<p>类在加载的时候会在内存中实例化一个对象，当类被撤除时，这个对象也会随之消失。</p>\n<h1 id=\"改进和优化\"><a class=\"markdownIt-Anchor\" href=\"#改进和优化\">#</a> 改进和优化</h1>\n<h2 id=\"懒汉模式的优化\"><a class=\"markdownIt-Anchor\" href=\"#懒汉模式的优化\">#</a> 懒汉模式的优化</h2>\n<p>问题 1：如果两个线程同时判断不存在已经实例化的对象，那么这两个线程都会实例化对象，就产生了两个对象，不符合单例模式。这里涉及到线程并发的问题。</p>\n<p><strong>示意图：</strong></p>\n<p><img data-src=\"http://qh82kvit3.hn-bkt.clouddn.com/clipboard-1601039901878.png\" alt=\"avatar\"></p>\n<p><strong>解决方案 1：</strong></p>\n<p>在方法上或类对象上加锁</p>\n<p><strong>synchronized 的解释：</strong></p>\n<p>同步代码块中的锁，当有一个线程执行同步代码时，别的线程就不能执行此代码块。</p>\n<p><strong>示例代码：</strong></p>\n<p><img data-src=\"http://qh82kvit3.hn-bkt.clouddn.com/clipboard-1601039914173.png\" alt=\"avatar\"></p>\n<p>问题 2：以上很好地解决了多个线程可能同时创建多个对象的情况，但是，每次去获取对象的时候都要先获取锁，并发性能非常的差，可能情况下，会出现卡帧的情况。</p>\n<p><strong>解决方案 2：</strong></p>\n<p>性能优化。如果还没有实例化对象，就需要先获取锁，一旦对象已经实例化后，就可以省去获取锁的过程。所以不能直接在方法上加锁。</p>\n<p><strong>示例代码：</strong></p>\n<p><img data-src=\"http://qh82kvit3.hn-bkt.clouddn.com/clipboard-1601039929391.png\" alt=\"avatar\"></p>\n<p>因此，解决了线程并发和性能优化的问题。</p>\n<p><strong>解释：</strong></p>\n<p>【1】，第一个分支判断是否已经实例化对象，如果已经实例化，则直接返回对象，如果没有的话，就会进入下一个分支。</p>\n<p>【2】，多个线程获取争抢同一个锁，第一个获取锁的线程，就获取了判断的资格，会判断是否有其他线程已经实例化对象了，如果没有，就会实例化一个对象。也因此有了第一个且唯一的对象，当其他进程再次进行判断时，已经有了对象，就会直接返回实例化的对象，而不会再去创建对象。</p>\n<p>【3】懒汉模式可总结为：双重校验 + 锁。</p>\n<p><strong>完整代码：</strong></p>\n<p><img data-src=\"http://qh82kvit3.hn-bkt.clouddn.com/clipboard-1601039941802.png\" alt=\"avatar\"></p>\n<p><strong>volatile 防止指令重排：</strong></p>\n<p><strong>创建一个对象，在 JVM 中会经过三步：</strong></p>\n<p>（1）为 singleehan 分配内存空间</p>\n<p>（2）初始化 singleehan 对象</p>\n<p>（3）将 singleehan 指向分配好的内存空间</p>\n<p><strong>指令重排序：</strong></p>\n<p>JVM 在保证最终结果正确的情况下，可以不按照程序编码的顺序执行语句，仅可能提高程序的性能。</p>\n<p><img data-src=\"http://qh82kvit3.hn-bkt.clouddn.com/clipboard-1601039959416.png\" alt=\"avatar\"></p>\n<p><strong>volatile 的作用：</strong></p>\n<p>使用 volatile 关键字修饰的变量，可以保证其指令执行的顺序与程序指明的顺序一致，不会发生顺序变换，这样在多线程环境下就不会发生 NPE 异常了。volatile 还有第二个作用：使用 volatile 关键字修饰的变量，可以保证其内存可见性，即每一时刻线程读取到该变量的值都是内存中最新的那个值，线程每次操作该变量都需要先读取该变量。</p>\n<p>因此，会需要对上述代码进行如下改进：</p>\n<p><img data-src=\"http://qh82kvit3.hn-bkt.clouddn.com/clipboard.png\" alt=\"avatar\"></p>\n<p><strong>目的：为了防止指令重排导致的 NPE 异常。</strong></p>\n<h1 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\">#</a> 总结</h1>\n<p>1，单例模式有两种类型：懒汉式和饿汉式。</p>\n<p>2，懒汉式：只有需要调用的时候才回去创建对象，实现方法：双重校验 + 锁 + volatile 防止指令重排</p>\n<p>3，饿汉式：类加载的时候就会初始化实例对象，等待着被调用。不存在并发和性能的问题。</p>\n<p>4，如果对于内存要求不高，那么就是用饿汉式，好处是不容易出错；如果对于内存的要求很高，就是用懒汉式。</p>\n<p>5，为了防止多线程环境下，因为指令重排序导致变量报 NPE，需要在单例对象上添加 volatile 关键字防止指令重排序。</p>\n",
            "tags": [
                "单例模式"
            ]
        },
        {
            "id": "http://csstar.top/2020/09/15/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E5%90%8E%E4%B9%A0%E9%A2%98/",
            "url": "http://csstar.top/2020/09/15/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E5%90%8E%E4%B9%A0%E9%A2%98/",
            "title": "机器学习之模型评估",
            "date_published": "2020-09-15T06:02:26.000Z",
            "content_html": "<h1 id=\"假设空间与版本空间\"><a class=\"markdownIt-Anchor\" href=\"#假设空间与版本空间\">#</a> 假设空间与版本空间</h1>\n<h2 id=\"概念\"><a class=\"markdownIt-Anchor\" href=\"#概念\">#</a> 概念</h2>\n<blockquote>\n<p>假设空间：所有可能取到的值组成的样本。</p>\n<p>版本空间：与给定正样本一致和与负样本不一致的假设子集集合。</p>\n</blockquote>\n<h2 id=\"计算\"><a class=\"markdownIt-Anchor\" href=\"#计算\">#</a> 计算</h2>\n<p>假设西瓜由青绿、乌黑、浅白三种颜色，同理，根蒂和敲声也由三种属性完全定义。求假设空间：</p>\n<blockquote>\n<p>假设空间大小：</p>\n<p>（3+1）✖（3+1）✖（3+1）+1 = 65</p>\n</blockquote>\n<p>（3+1）：就拿颜色来说，可能任意一种颜色都可以，其他属性也是一样。</p>\n<p>（+1）：世界上没有好瓜</p>\n<blockquote>\n<p>版本空间：根据给定的样本，从假设空间中<strong>剔除</strong>与正样本不一致，与负样本一致的假设。</p>\n</blockquote>\n<h1 id=\"模型评估与选择\"><a class=\"markdownIt-Anchor\" href=\"#模型评估与选择\">#</a> 模型评估与选择</h1>\n<h2 id=\"过拟合与欠拟合\"><a class=\"markdownIt-Anchor\" href=\"#过拟合与欠拟合\">#</a> 过拟合与欠拟合</h2>\n<blockquote>\n<ul>\n<li>过拟合：对训练样本的特征训练的太好了，导致泛化能力下降，对新样本的预测很差的现象。</li>\n<li>欠拟合：训练样本的特征不够，泛化能力太高了。比如模型可能训练出绿色是叶子的结论，那么对于一棵树，模型也将树判断为叶子。</li>\n</ul>\n</blockquote>\n<h2 id=\"评估方法\"><a class=\"markdownIt-Anchor\" href=\"#评估方法\">#</a> 评估方法</h2>\n<p><strong>通常用测试误差来近似模型的泛化误差。</strong></p>\n<h3 id=\"留出法hold-out\"><a class=\"markdownIt-Anchor\" href=\"#留出法hold-out\">#</a> 留出法（hold out）</h3>\n<p>留出法直接将数据集划分为两个互斥的部分，其中一部分用来做训练集，另一部分用来做测试集。通常训练集与测试集的比例为 7：3。</p>\n<blockquote>\n<p>注意：</p>\n<ol>\n<li>尽可能保持数据分布的一致性。通常采用 “分层采样” 的方法。</li>\n<li>采用若干次随机划分避免单次流出法的不稳定。</li>\n</ol>\n</blockquote>\n<h3 id=\"交叉验证法cross-validation\"><a class=\"markdownIt-Anchor\" href=\"#交叉验证法cross-validation\">#</a> 交叉验证法（cross validation)</h3>\n<p>交叉验证法先将数据集划分为 k 个大小相似的互斥子集，每次采用 k-1 个子集作为训练集，剩下的一个子集作为测试集。进行 k 次训练和测试，最终返回 k 个测试结果的均值。又称为 “k 折交叉验证”</p>\n<blockquote>\n<p>通常重复 p 次不同的划分，最终结果是 p 次 k 折交叉验证结果的均值。</p>\n</blockquote>\n<h3 id=\"留一法leave-one-outloo\"><a class=\"markdownIt-Anchor\" href=\"#留一法leave-one-outloo\">#</a> 留一法（leave-one-out，LOO）</h3>\n<p>留一法是交叉验证法的一种特殊情况，k = 样本数，即将样本分成一份一个样本，每次测试集只有一个样本。</p>\n<blockquote>\n<p>该方法的确定，计算的开销比较大。</p>\n</blockquote>\n<h3 id=\"自助法bootstrapping\"><a class=\"markdownIt-Anchor\" href=\"#自助法bootstrapping\">#</a> 自助法（bootstrapping）</h3>\n<p>自助法以自助采样为基础（有放回采样）。每次随机从数据集中挑选一个样本，放入另一个数据集合，然后将样本放回原数据中，重复操作 m 次，因此得到了一个含 m 个样本的数据集。</p>\n<blockquote>\n<p>样本在 m 次采样中始终不被采到的概率（1-1\\m）的 m 次方，当 m 足够大时，上述式子的极限约为 0.368。说明有 0.368 的样本不会出现在新的数据集中，新数据集中含有更多的数据，我们可以用来当作训练集，剩下的做测试集。</p>\n</blockquote>\n<ul>\n<li>优点：在数据集较小、难以有效划分训练和测试集的时候很有用。</li>\n<li>改变了初始数据集的分布，会引入估计偏差。</li>\n</ul>\n",
            "tags": [
                "机器学习"
            ]
        },
        {
            "id": "http://csstar.top/2020/09/13/Pandas-DataFrame/",
            "url": "http://csstar.top/2020/09/13/Pandas-DataFrame/",
            "title": "认识Pandas-DataFrame",
            "date_published": "2020-09-13T08:25:21.000Z",
            "content_html": "<h1 id=\"dataframe的创建\"><a class=\"markdownIt-Anchor\" href=\"#dataframe的创建\">#</a> DataFrame 的创建</h1>\n<h2 id=\"dataframe和series简介\"><a class=\"markdownIt-Anchor\" href=\"#dataframe和series简介\">#</a> DataFrame 和 Series 简介</h2>\n<p>DataFrame 是一种表格型的数据结构。DataFrame 既有行索引，也有列索引，它可以看作是由 Series 组成的字典，并且这些 Series 共用一个索引。创建方式有很多种，主要是根据 dict 进行创建，或者是读取 csv 或者 txt 文件。</p>\n<blockquote>\n<p><strong>Series</strong>：简单来说，就是一个竖着的 List，一般创建需要传入一个 List。</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\">s = pd.Series([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,np.nan])</span><br><span class=\"line\">print(s)      <span class=\"comment\"># 竖着的列表，其中np.nan为NaN，还包含默认的索引列</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>numpy 中不存在的值都会被赋值为 NaN</li>\n<li>默认索引列为数字（从 0 开始），也可以自定义索引列，在 Series 函数中添加 index 关键字，同时给一个自定义索引列表</li>\n</ul>\n</blockquote>\n<h2 id=\"根据字典创建\"><a class=\"markdownIt-Anchor\" href=\"#根据字典创建\">#</a> 根据字典创建</h2>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data = &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;name&#x27;</span>:[<span class=\"string\">&#x27;csstar&#x27;</span>,<span class=\"string\">&#x27;jackson&#x27;</span>,<span class=\"string\">&#x27;tom&#x27;</span>,<span class=\"string\">&#x27;jerry&#x27;</span>,<span class=\"string\">&#x27;yummy&#x27;</span>],</span><br><span class=\"line\">    <span class=\"string\">&#x27;year&#x27;</span>:[<span class=\"number\">2000</span>,<span class=\"number\">2001</span>,<span class=\"number\">2008</span>,<span class=\"number\">2010</span>,<span class=\"number\">2020</span>],</span><br><span class=\"line\">    <span class=\"string\">&#x27;sex&#x27;</span>:[<span class=\"string\">&#x27;m&#x27;</span>,<span class=\"string\">&#x27;m&#x27;</span>,<span class=\"string\">&#x27;m&#x27;</span>,<span class=\"string\">&#x27;w&#x27;</span>,<span class=\"string\">&#x27;w&#x27;</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\"># 得到了DataFrame对象，包含默认索引列</span></span><br><span class=\"line\">frame = pd.DataFrame(data)  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># index是行索引--&gt;对应行  columns是列索引--&gt;对应列</span></span><br><span class=\"line\">frame2 = pd.DataFrame(data,index=[<span class=\"string\">&#x27;one&#x27;</span>,<span class=\"string\">&#x27;two&#x27;</span>,<span class=\"string\">&#x27;three&#x27;</span>,<span class=\"string\">&#x27;four&#x27;</span>,<span class=\"string\">&#x27;five&#x27;</span>],columns=[<span class=\"string\">&#x27;name&#x27;</span>,<span class=\"string\">&#x27;sex&#x27;</span>,<span class=\"string\">&#x27;year&#x27;</span>])</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>如果 columns 中出现了没有定义的列，那么该列的数据都为 NaN</li>\n<li>可以用 index，columns，values 来访问 DataFrame 的行索引，列索引以及数据值，数据返回的是一个<strong>二维数组</strong>。</li>\n</ul>\n</blockquote>\n<h2 id=\"读取文件的方式创建\"><a class=\"markdownIt-Anchor\" href=\"#读取文件的方式创建\">#</a> 读取文件的方式创建</h2>\n<p>读取文件生成 DataFrame 最常用的是<strong> read_csv,read_table</strong> 方法</p>\n<p><img data-src=\"http://qh82kvit3.hn-bkt.clouddn.com/image-20200913170309272.png\" alt=\"图片无法显示\"></p>\n<p>还有一些其他的 DataFrame 创建方式，比如说可以通过读取 mysql 或者 mongoDB，读取 json 文件等方式来生成 DataFrame 对象。</p>\n<h1 id=\"dataframe轴的概念\"><a class=\"markdownIt-Anchor\" href=\"#dataframe轴的概念\">#</a> DataFrame 轴的概念</h1>\n<p>在 DataFrame 的处理中经常会遇到轴的概念，我们所说的 axis=0 即表示沿着每一列或者行标签 / 索引值向下执行的，axis = 1 即表示沿着每一行或者列标签方向执行对应的方法</p>\n<h1 id=\"dataframe的性质\"><a class=\"markdownIt-Anchor\" href=\"#dataframe的性质\">#</a> DataFrame 的性质</h1>\n<h2 id=\"索引-切片\"><a class=\"markdownIt-Anchor\" href=\"#索引-切片\">#</a> 索引、切片</h2>\n<p>根据列的名字获取一列，返回的是一个 Series</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">frame[<span class=\"string\">&#x27;列索引的名字&#x27;</span>]</span><br></pre></td></tr></table></figure>\n<p>获取多列或者多行</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data = pd.DataFrame(np.arange(<span class=\"number\">16</span>).reshape((<span class=\"number\">4</span>,<span class=\"number\">4</span>)),index = [<span class=\"string\">&#x27;Ohio&#x27;</span>,<span class=\"string\">&#x27;Colorado&#x27;</span>,<span class=\"string\">&#x27;Utah&#x27;</span>,<span class=\"string\">&#x27;New York&#x27;</span>],columns=[<span class=\"string\">&#x27;one&#x27;</span>,<span class=\"string\">&#x27;two&#x27;</span>,<span class=\"string\">&#x27;three&#x27;</span>,<span class=\"string\">&#x27;four&#x27;</span>])</span><br><span class=\"line\">data[[<span class=\"string\">&#x27;two&#x27;</span>,<span class=\"string\">&#x27;three&#x27;</span>]]</span><br><span class=\"line\"><span class=\"comment\">#输出</span></span><br><span class=\"line\">    two three</span><br><span class=\"line\">Ohio    <span class=\"number\">1</span>   <span class=\"number\">2</span></span><br><span class=\"line\">Colorado    <span class=\"number\">5</span>   <span class=\"number\">6</span></span><br><span class=\"line\">Utah    <span class=\"number\">9</span>   <span class=\"number\">10</span></span><br><span class=\"line\">New York    <span class=\"number\">13</span>  <span class=\"number\">14</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#取行</span></span><br><span class=\"line\">data[:<span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"comment\">#输出</span></span><br><span class=\"line\">    one two three   four</span><br><span class=\"line\">Ohio    <span class=\"number\">0</span>   <span class=\"number\">1</span>   <span class=\"number\">2</span>   <span class=\"number\">3</span></span><br><span class=\"line\">Colorado    <span class=\"number\">4</span>   <span class=\"number\">5</span>   <span class=\"number\">6</span>   <span class=\"number\">7</span></span><br></pre></td></tr></table></figure>\n<p>根据逻辑条件来选取</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data[data[<span class=\"string\">&#x27;three&#x27;</span>]&gt;<span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"comment\">#输出</span></span><br><span class=\"line\">    one two three   four</span><br><span class=\"line\">Colorado    <span class=\"number\">4</span>   <span class=\"number\">5</span>   <span class=\"number\">6</span>   <span class=\"number\">7</span></span><br><span class=\"line\">Utah    <span class=\"number\">8</span>   <span class=\"number\">9</span>   <span class=\"number\">10</span>  <span class=\"number\">11</span></span><br><span class=\"line\">New York    <span class=\"number\">12</span>  <span class=\"number\">13</span>  <span class=\"number\">14</span>  <span class=\"number\">15</span></span><br></pre></td></tr></table></figure>\n<p>专门用于索引的方法，如果用标签 —&gt;loc 方法，如果用下标 —&gt;iloc 方法</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#data.ix[&#x27;Colorado&#x27;,[&#x27;two&#x27;,&#x27;three&#x27;]]</span></span><br><span class=\"line\">data.loc[<span class=\"string\">&#x27;Colorado&#x27;</span>,[<span class=\"string\">&#x27;two&#x27;</span>,<span class=\"string\">&#x27;three&#x27;</span>]]</span><br><span class=\"line\"><span class=\"comment\">#输出</span></span><br><span class=\"line\">two      <span class=\"number\">5</span></span><br><span class=\"line\">three    <span class=\"number\">6</span></span><br><span class=\"line\">Name: Colorado, dtype: int64</span><br><span class=\"line\"></span><br><span class=\"line\">data.iloc[<span class=\"number\">0</span>:<span class=\"number\">3</span>,<span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"comment\">#输出</span></span><br><span class=\"line\">Ohio         <span class=\"number\">2</span></span><br><span class=\"line\">Colorado     <span class=\"number\">6</span></span><br><span class=\"line\">Utah        <span class=\"number\">10</span></span><br><span class=\"line\">Name: three, dtype: int64</span><br></pre></td></tr></table></figure>\n<h2 id=\"修改数据\"><a class=\"markdownIt-Anchor\" href=\"#修改数据\">#</a> 修改数据</h2>\n<p>使用标量修改某一列</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">frame[<span class=\"string\">&#x27;debt&#x27;</span>]=<span class=\"number\">16.5</span></span><br><span class=\"line\">frame <span class=\"comment\"># debt列全部数据为16.5</span></span><br></pre></td></tr></table></figure>\n<p>使用一个列表来修改，不过要保证列表的长度与 DataFrame 长度相同：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">frame.debt = np.arange(<span class=\"number\">5</span>)</span><br></pre></td></tr></table></figure>\n<p>使用一个 Series，此时会根据索引来进行精确匹配</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">val=pd.Series([<span class=\"number\">-1.2</span>,<span class=\"number\">-1.5</span>,<span class=\"number\">-1.7</span>],index[<span class=\"string\">&#x27;two&#x27;</span>,<span class=\"string\">&#x27;four&#x27;</span>,<span class=\"string\">&#x27;five&#x27;</span>])</span><br><span class=\"line\">frame[<span class=\"string\">&#x27;debt&#x27;</span>] = val  <span class=\"comment\">#定义一个三个数据的Series来代替指定index行的值，从而实现精确定位并修改</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"重新索引\"><a class=\"markdownIt-Anchor\" href=\"#重新索引\">#</a> 重新索引</h2>\n<p>使用 reinex 方法对 DataFrame 进行重新索引，可以重新索引行或 i 列，或者两者都索引，只穿一个参数的情况下，会重新索引行。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">frame = pd.DataFrame(np.arange(<span class=\"number\">9</span>).reshape((<span class=\"number\">3</span>,<span class=\"number\">3</span>)),index=[<span class=\"number\">1</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>],columns=[<span class=\"string\">&#x27;Ohio&#x27;</span>,<span class=\"string\">&#x27;Texas&#x27;</span>,<span class=\"string\">&#x27;California&#x27;</span>])</span><br><span class=\"line\">frame2 = frame.reindex([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>])</span><br><span class=\"line\">frame2</span><br><span class=\"line\"><span class=\"comment\">#输出</span></span><br><span class=\"line\">    Ohio    Texas   California</span><br><span class=\"line\"><span class=\"number\">1</span>   <span class=\"number\">0.0</span> <span class=\"number\">1.0</span> <span class=\"number\">2.0</span></span><br><span class=\"line\"><span class=\"number\">2</span>   NaN NaN NaN</span><br><span class=\"line\"><span class=\"number\">4</span>   <span class=\"number\">3.0</span> <span class=\"number\">4.0</span> <span class=\"number\">5.0</span></span><br><span class=\"line\"><span class=\"number\">5</span>   <span class=\"number\">6.0</span> <span class=\"number\">7.0</span> <span class=\"number\">8.0</span></span><br><span class=\"line\"></span><br><span class=\"line\">states = [<span class=\"string\">&#x27;Texas&#x27;</span>,<span class=\"string\">&#x27;Utah&#x27;</span>,<span class=\"string\">&#x27;California&#x27;</span>]</span><br><span class=\"line\">frame.reindex(columns=states)</span><br><span class=\"line\"><span class=\"comment\">#输出</span></span><br><span class=\"line\">    Texas   Utah    California</span><br><span class=\"line\"><span class=\"number\">1</span>   <span class=\"number\">1</span>   NaN <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">4</span>   <span class=\"number\">4</span>   NaN <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"number\">5</span>   <span class=\"number\">7</span>   NaN <span class=\"number\">8</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"丢弃指定轴上的值\"><a class=\"markdownIt-Anchor\" href=\"#丢弃指定轴上的值\">#</a> 丢弃指定轴上的值</h2>\n<p>使用 drop 方法丢弃指定轴上的值，不会对 DataFrame 造成影响</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">frame = pd.DataFrame(np.arange(<span class=\"number\">9</span>).reshape((<span class=\"number\">3</span>,<span class=\"number\">3</span>)),index = [<span class=\"string\">&#x27;a&#x27;</span>,<span class=\"string\">&#x27;c&#x27;</span>,<span class=\"string\">&#x27;d&#x27;</span>],columns = [<span class=\"string\">&#x27;Ohio&#x27;</span>,<span class=\"string\">&#x27;Texas&#x27;</span>,<span class=\"string\">&#x27;California&#x27;</span>])</span><br><span class=\"line\">frame.drop(<span class=\"string\">&#x27;a&#x27;</span>) </span><br><span class=\"line\"><span class=\"comment\">#输出</span></span><br><span class=\"line\">Ohio    Texas   California</span><br><span class=\"line\">a   <span class=\"number\">0</span>   <span class=\"number\">1</span>   <span class=\"number\">2</span></span><br><span class=\"line\">c   <span class=\"number\">3</span>   <span class=\"number\">4</span>   <span class=\"number\">5</span></span><br><span class=\"line\">d   <span class=\"number\">6</span>   <span class=\"number\">7</span>   <span class=\"number\">8</span></span><br><span class=\"line\"></span><br><span class=\"line\">frame.drop([<span class=\"string\">&#x27;Ohio&#x27;</span>],axis=<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"comment\">#输出</span></span><br><span class=\"line\">    Texas   California</span><br><span class=\"line\">a   <span class=\"number\">1</span>   <span class=\"number\">2</span></span><br><span class=\"line\">c   <span class=\"number\">4</span>   <span class=\"number\">5</span></span><br><span class=\"line\">d   <span class=\"number\">7</span>   <span class=\"number\">8</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"算术运算\"><a class=\"markdownIt-Anchor\" href=\"#算术运算\">#</a> 算术运算</h2>\n<p>DataFrame 在进行算数运算时会进行补齐，在不重叠的部分补足 NA：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df1 = pd.DataFrame(np.arange(<span class=\"number\">9</span>).reshape((<span class=\"number\">3</span>,<span class=\"number\">3</span>)),columns=list(<span class=\"string\">&#x27;bcd&#x27;</span>),index=[<span class=\"string\">&#x27;Ohio&#x27;</span>,<span class=\"string\">&#x27;Texas&#x27;</span>,<span class=\"string\">&#x27;Colorado&#x27;</span>])</span><br><span class=\"line\">df2 = pd.DataFrame(np.arange(<span class=\"number\">12</span>).reshape((<span class=\"number\">4</span>,<span class=\"number\">3</span>)),columns = list(<span class=\"string\">&#x27;bde&#x27;</span>),index=[<span class=\"string\">&#x27;Utah&#x27;</span>,<span class=\"string\">&#x27;Ohio&#x27;</span>,<span class=\"string\">&#x27;Texas&#x27;</span>,<span class=\"string\">&#x27;Oregon&#x27;</span>])</span><br><span class=\"line\">df1 + df2</span><br><span class=\"line\"><span class=\"comment\">#输出</span></span><br><span class=\"line\">    b   c   d   e</span><br><span class=\"line\">Colorado    NaN NaN NaN NaN</span><br><span class=\"line\">Ohio    <span class=\"number\">3.0</span> NaN <span class=\"number\">6.0</span> NaN</span><br><span class=\"line\">Oregon  NaN NaN NaN NaN</span><br><span class=\"line\">Texas   <span class=\"number\">9.0</span> NaN <span class=\"number\">12.0</span>    NaN</span><br><span class=\"line\">Utah    NaN NaN NaN NaN</span><br></pre></td></tr></table></figure>\n<p>可以使用 fill_value 方法填充 NA 数据，不过两个 df 都为 NA 的数据，该方法不会填充：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df1.add(df2,fill_value=<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"comment\">#输出</span></span><br><span class=\"line\">    b   c   d   e</span><br><span class=\"line\">Colorado    <span class=\"number\">6.0</span> <span class=\"number\">7.0</span> <span class=\"number\">8.0</span> NaN</span><br><span class=\"line\">Ohio    <span class=\"number\">3.0</span> <span class=\"number\">1.0</span> <span class=\"number\">6.0</span> <span class=\"number\">5.0</span></span><br><span class=\"line\">Oregon  <span class=\"number\">9.0</span> NaN <span class=\"number\">10.0</span>    <span class=\"number\">11.0</span></span><br><span class=\"line\">Texas   <span class=\"number\">9.0</span> <span class=\"number\">4.0</span> <span class=\"number\">12.0</span>    <span class=\"number\">8.0</span></span><br><span class=\"line\">Utah    <span class=\"number\">0.0</span> NaN <span class=\"number\">1.0</span> <span class=\"number\">2.0</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"函数应用与映射\"><a class=\"markdownIt-Anchor\" href=\"#函数应用与映射\">#</a> 函数应用与映射</h2>\n<p>numpy 的元素级数组方法，也可以用于操作 Pandas 对象：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">frame = pd.DataFrame(np.random.randn(<span class=\"number\">3</span>,<span class=\"number\">3</span>),columns=list(<span class=\"string\">&#x27;bcd&#x27;</span>),index=[<span class=\"string\">&#x27;Ohio&#x27;</span>,<span class=\"string\">&#x27;Texas&#x27;</span>,<span class=\"string\">&#x27;Colorado&#x27;</span>])</span><br><span class=\"line\">np.abs(frame)</span><br><span class=\"line\"><span class=\"comment\">#输出</span></span><br><span class=\"line\">    b   c   d</span><br><span class=\"line\">Ohio    <span class=\"number\">0.367521</span>    <span class=\"number\">0.232387</span>    <span class=\"number\">0.649330</span></span><br><span class=\"line\">Texas   <span class=\"number\">3.115632</span>    <span class=\"number\">1.415106</span>    <span class=\"number\">2.093794</span></span><br><span class=\"line\">Colorado    <span class=\"number\">0.714983</span>    <span class=\"number\">1.420871</span>    <span class=\"number\">0.557722</span></span><br></pre></td></tr></table></figure>\n<p>另一个常见的操作是，将函数应用到各列或行所形成的一维数组上。DataFrame 的 apply 方法即可实现此功能。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f = <span class=\"keyword\">lambda</span> x:x.max() - x.min()</span><br><span class=\"line\">frame.apply(f)</span><br><span class=\"line\"><span class=\"comment\">#输出</span></span><br><span class=\"line\">b    <span class=\"number\">3.830616</span></span><br><span class=\"line\">c    <span class=\"number\">2.835978</span></span><br><span class=\"line\">d    <span class=\"number\">2.743124</span></span><br><span class=\"line\">dtype: float64</span><br><span class=\"line\"></span><br><span class=\"line\">frame.apply(f,axis=<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"comment\">#输出</span></span><br><span class=\"line\">Ohio        <span class=\"number\">1.016851</span></span><br><span class=\"line\">Texas       <span class=\"number\">4.530739</span></span><br><span class=\"line\">Colorado    <span class=\"number\">2.135855</span></span><br><span class=\"line\">dtype: float64</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f</span>(<span class=\"params\">x</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> pd.Series([x.min(),x.max()],index=[<span class=\"string\">&#x27;min&#x27;</span>,<span class=\"string\">&#x27;max&#x27;</span>])</span><br><span class=\"line\">frame.apply(f)</span><br><span class=\"line\"><span class=\"comment\">#输出</span></span><br><span class=\"line\">    b   c   d</span><br><span class=\"line\">min <span class=\"number\">-0.714983</span>   <span class=\"number\">-1.415106</span>   <span class=\"number\">-0.649330</span></span><br><span class=\"line\">max <span class=\"number\">3.115632</span>    <span class=\"number\">1.420871</span>    <span class=\"number\">2.093794</span></span><br></pre></td></tr></table></figure>\n<p>元素级的 Python 函数也是可以用的，使用 applymap 方法：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">format = <span class=\"keyword\">lambda</span> x:<span class=\"string\">&#x27;%.2f&#x27;</span>%x</span><br><span class=\"line\">frame.applymap(format)</span><br><span class=\"line\"><span class=\"comment\">#输出</span></span><br><span class=\"line\">b   c   d</span><br><span class=\"line\">Ohio    <span class=\"number\">0.37</span>    <span class=\"number\">-0.23</span>   <span class=\"number\">-0.65</span></span><br><span class=\"line\">Texas   <span class=\"number\">3.12</span>    <span class=\"number\">-1.42</span>   <span class=\"number\">2.09</span></span><br><span class=\"line\">Colorado    <span class=\"number\">-0.71</span>   <span class=\"number\">1.42</span>    <span class=\"number\">-0.56</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"排序与排名\"><a class=\"markdownIt-Anchor\" href=\"#排序与排名\">#</a> 排序与排名</h2>\n<p>对于 DataFrame，sort_index 可以根据任意轴的排序，并指定升序降序</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">frame = pd.DataFrame(np.arange(<span class=\"number\">8</span>).reshape((<span class=\"number\">2</span>,<span class=\"number\">4</span>)),index=[<span class=\"string\">&#x27;three&#x27;</span>,<span class=\"string\">&#x27;one&#x27;</span>],columns=[<span class=\"string\">&#x27;d&#x27;</span>,<span class=\"string\">&#x27;a&#x27;</span>,<span class=\"string\">&#x27;b&#x27;</span>,<span class=\"string\">&#x27;c&#x27;</span>])</span><br><span class=\"line\">frame.sort_index()</span><br><span class=\"line\"><span class=\"comment\">#输出</span></span><br><span class=\"line\">    d   a   b   c</span><br><span class=\"line\">one <span class=\"number\">4</span>   <span class=\"number\">5</span>   <span class=\"number\">6</span>   <span class=\"number\">7</span></span><br><span class=\"line\">three   <span class=\"number\">0</span>   <span class=\"number\">1</span>   <span class=\"number\">2</span>   <span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\">frame.sort_index(<span class=\"number\">1</span>,ascending=<span class=\"literal\">False</span>)</span><br><span class=\"line\"><span class=\"comment\">#输出</span></span><br><span class=\"line\">    d   a   b   c</span><br><span class=\"line\">one <span class=\"number\">4</span>   <span class=\"number\">5</span>   <span class=\"number\">6</span>   <span class=\"number\">7</span></span><br><span class=\"line\">three   <span class=\"number\">0</span>   <span class=\"number\">1</span>   <span class=\"number\">2</span>   <span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n<p>DataFrame 也可以按照值进行排序：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#按照任意一列或多列进行排序</span></span><br><span class=\"line\">frame.sort_values(by=[<span class=\"string\">&#x27;a&#x27;</span>,<span class=\"string\">&#x27;b&#x27;</span>])</span><br><span class=\"line\"><span class=\"comment\">#输出</span></span><br><span class=\"line\">    d   a   b   c</span><br><span class=\"line\">three   <span class=\"number\">0</span>   <span class=\"number\">1</span>   <span class=\"number\">2</span>   <span class=\"number\">3</span></span><br><span class=\"line\">one <span class=\"number\">4</span>   <span class=\"number\">5</span>   <span class=\"number\">6</span>   <span class=\"number\">7</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"汇总和计算描述统计\"><a class=\"markdownIt-Anchor\" href=\"#汇总和计算描述统计\">#</a> 汇总和计算描述统计</h2>\n<p>DataFrame 中实现了 sum、mean、max 等方法，我们可以指定进行汇总统计的轴，同时，也可以使用 describe 函数查看基本所有的统计项：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df = pd.DataFrame([[<span class=\"number\">1.4</span>,np.nan],[<span class=\"number\">7.1</span>,<span class=\"number\">-4.5</span>],[np.nan,np.nan],[<span class=\"number\">0.75</span>,<span class=\"number\">-1.3</span>]],index=[<span class=\"string\">&#x27;a&#x27;</span>,<span class=\"string\">&#x27;b&#x27;</span>,<span class=\"string\">&#x27;c&#x27;</span>,<span class=\"string\">&#x27;d&#x27;</span>],columns=[<span class=\"string\">&#x27;one&#x27;</span>,<span class=\"string\">&#x27;two&#x27;</span>])</span><br><span class=\"line\">df.sum(axis=<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"comment\">#输出</span></span><br><span class=\"line\">one    <span class=\"number\">9.25</span></span><br><span class=\"line\">two   <span class=\"number\">-5.80</span></span><br><span class=\"line\">dtype: float64</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#Na会被自动排除，可以使用skipna选项来禁用该功能</span></span><br><span class=\"line\">df.mean(axis=<span class=\"number\">1</span>,skipna=<span class=\"literal\">False</span>)</span><br><span class=\"line\"><span class=\"comment\">#输出</span></span><br><span class=\"line\">a      NaN</span><br><span class=\"line\">b    <span class=\"number\">1.300</span></span><br><span class=\"line\">c      NaN</span><br><span class=\"line\">d   <span class=\"number\">-0.275</span></span><br><span class=\"line\">dtype: float64</span><br><span class=\"line\"><span class=\"comment\">#idxmax返回间接统计，是达到最大值的索引</span></span><br><span class=\"line\"></span><br><span class=\"line\">df.idxmax()</span><br><span class=\"line\"><span class=\"comment\">#输出</span></span><br><span class=\"line\">one    b</span><br><span class=\"line\">two    d</span><br><span class=\"line\">dtype: object</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#describe返回的是DataFrame的汇总统计</span></span><br><span class=\"line\"><span class=\"comment\">#非数值型的与数值型的统计返回结果不同</span></span><br><span class=\"line\">df.describe()</span><br><span class=\"line\"><span class=\"comment\">#输出</span></span><br><span class=\"line\">one two</span><br><span class=\"line\">count   <span class=\"number\">3.000000</span>    <span class=\"number\">2.000000</span></span><br><span class=\"line\">mean    <span class=\"number\">3.083333</span>    <span class=\"number\">-2.900000</span></span><br><span class=\"line\">std <span class=\"number\">3.493685</span>    <span class=\"number\">2.262742</span></span><br><span class=\"line\">min <span class=\"number\">0.750000</span>    <span class=\"number\">-4.500000</span></span><br><span class=\"line\"><span class=\"number\">25</span>% <span class=\"number\">1.075000</span>    <span class=\"number\">-3.700000</span></span><br><span class=\"line\"><span class=\"number\">50</span>% <span class=\"number\">1.400000</span>    <span class=\"number\">-2.900000</span></span><br><span class=\"line\"><span class=\"number\">75</span>% <span class=\"number\">4.250000</span>    <span class=\"number\">-2.100000</span></span><br><span class=\"line\">max <span class=\"number\">7.100000</span>    <span class=\"number\">-1.300000</span></span><br></pre></td></tr></table></figure>\n<p>DataFrame 也实现了 corr 和 cov 方法来计算一个 DataFrame 的相关系数矩阵和协方差矩阵，同时 DataFrame 也可以与 Series 求解相关的系数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">frame1 = pd.DataFrame(np.random.randn(<span class=\"number\">3</span>,<span class=\"number\">3</span>),index=list(<span class=\"string\">&#x27;abc&#x27;</span>),columns=list(<span class=\"string\">&#x27;abc&#x27;</span>))</span><br><span class=\"line\">frame1.corr</span><br><span class=\"line\"><span class=\"comment\">#输出</span></span><br><span class=\"line\">&lt;bound method DataFrame.corr of           a         b         c</span><br><span class=\"line\">a  <span class=\"number\">1.253773</span>  <span class=\"number\">0.429059</span>  <span class=\"number\">1.535575</span></span><br><span class=\"line\">b <span class=\"number\">-0.113987</span> <span class=\"number\">-2.837396</span> <span class=\"number\">-0.894469</span></span><br><span class=\"line\">c <span class=\"number\">-0.548208</span>  <span class=\"number\">0.834003</span>  <span class=\"number\">0.994863</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">frame1.cov()</span><br><span class=\"line\"><span class=\"comment\">#输出</span></span><br><span class=\"line\">a   b   c</span><br><span class=\"line\">a   <span class=\"number\">0.884409</span>    <span class=\"number\">0.357304</span>    <span class=\"number\">0.579613</span></span><br><span class=\"line\">b   <span class=\"number\">0.357304</span>    <span class=\"number\">4.052147</span>    <span class=\"number\">2.442527</span></span><br><span class=\"line\">c   <span class=\"number\">0.579613</span>    <span class=\"number\">2.442527</span>    <span class=\"number\">1.627843</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#corrwith用于计算每一列与Series的相关系数</span></span><br><span class=\"line\">frame1.corrwith(frame1[<span class=\"string\">&#x27;a&#x27;</span>])</span><br><span class=\"line\"><span class=\"comment\">#输出</span></span><br><span class=\"line\">a    <span class=\"number\">1.000000</span></span><br><span class=\"line\">b    <span class=\"number\">0.188742</span></span><br><span class=\"line\">c    <span class=\"number\">0.483065</span></span><br><span class=\"line\">dtype: float64</span><br></pre></td></tr></table></figure>\n<h2 id=\"处理缺失数据\"><a class=\"markdownIt-Anchor\" href=\"#处理缺失数据\">#</a> 处理缺失数据</h2>\n<p>Pandas 中缺失值相关的方法主要有以下三个：</p>\n<ul>\n<li>isnull 方法用于判断数据是否为空数据</li>\n<li>fillna 方法用于填补缺失数据</li>\n<li>dropna 方法用于舍弃缺失数据</li>\n</ul>\n<p>上面两个方法返回一个新的 Series 或者 DataFrame，对原数据没有影响，如果想在原数据上进行直接修改，使用 inplace 参数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data = pd.DataFrame([[<span class=\"number\">1</span>,<span class=\"number\">6.5</span>,<span class=\"number\">3</span>],[<span class=\"number\">1</span>,np.nan,np.nan],[np.nan,np.nan,np.nan],[np.nan,<span class=\"number\">6.5</span>,<span class=\"number\">3</span>]])</span><br><span class=\"line\">data.dropna()</span><br><span class=\"line\"><span class=\"comment\">#输出</span></span><br><span class=\"line\">    <span class=\"number\">0</span>   <span class=\"number\">1</span>   <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">0</span>   <span class=\"number\">1.0</span> <span class=\"number\">6.5</span> <span class=\"number\">3.0</span></span><br></pre></td></tr></table></figure>\n<p>对 DataFrame 来说，dropna 方法如果发现缺失值，就会进行整个数据行的删除，不过可以指定删除的方式，how=all，是当整个全是 na 的时候才可以进行删除，同时还可以指定删除的轴。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data.dropna(how=<span class=\"string\">&#x27;all&#x27;</span>,axis=<span class=\"number\">1</span>,inplace=<span class=\"literal\">True</span>)</span><br><span class=\"line\">data</span><br><span class=\"line\"><span class=\"comment\">#输出</span></span><br><span class=\"line\"><span class=\"number\">0</span>   <span class=\"number\">1</span>   <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">0</span>   <span class=\"number\">1.0</span> <span class=\"number\">6.5</span> <span class=\"number\">3.0</span></span><br><span class=\"line\"><span class=\"number\">1</span>   <span class=\"number\">1.0</span> NaN NaN</span><br><span class=\"line\"><span class=\"number\">2</span>   NaN NaN NaN</span><br><span class=\"line\"><span class=\"number\">3</span>   NaN <span class=\"number\">6.5</span> <span class=\"number\">3.0</span></span><br></pre></td></tr></table></figure>\n<p>DataFrame 填充缺失值可以统一填充，也可以按列填充，或者指定一种填充方式：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data.fillna(&#123;<span class=\"number\">1</span>:<span class=\"number\">2</span>,<span class=\"number\">2</span>:<span class=\"number\">3</span>&#125;)</span><br><span class=\"line\"><span class=\"comment\">#输出</span></span><br><span class=\"line\"><span class=\"number\">0</span>   <span class=\"number\">1</span>   <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">0</span>   <span class=\"number\">1.0</span> <span class=\"number\">6.5</span> <span class=\"number\">3.0</span></span><br><span class=\"line\"><span class=\"number\">1</span>   <span class=\"number\">1.0</span> <span class=\"number\">2.0</span> <span class=\"number\">3.0</span></span><br><span class=\"line\"><span class=\"number\">2</span>   NaN <span class=\"number\">2.0</span> <span class=\"number\">3.0</span></span><br><span class=\"line\"><span class=\"number\">3</span>   NaN <span class=\"number\">6.5</span> <span class=\"number\">3.0</span></span><br><span class=\"line\"></span><br><span class=\"line\">data.fillna(method=<span class=\"string\">&#x27;ffill&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">#输出</span></span><br><span class=\"line\"><span class=\"number\">0</span>   <span class=\"number\">1</span>   <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">0</span>   <span class=\"number\">1.0</span> <span class=\"number\">6.5</span> <span class=\"number\">3.0</span></span><br><span class=\"line\"><span class=\"number\">1</span>   <span class=\"number\">1.0</span> <span class=\"number\">6.5</span> <span class=\"number\">3.0</span></span><br><span class=\"line\"><span class=\"number\">2</span>   <span class=\"number\">1.0</span> <span class=\"number\">6.5</span> <span class=\"number\">3.0</span></span><br><span class=\"line\"><span class=\"number\">3</span>   <span class=\"number\">1.0</span> <span class=\"number\">6.5</span> <span class=\"number\">3.0</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"数据转换的一个实例\"><a class=\"markdownIt-Anchor\" href=\"#数据转换的一个实例\">#</a> 数据转换的一个实例</h1>\n<p>通过 tushare 接口返回的数据就是一个 DataFrame 格式的数据，我们通过 pandas 里的 DataFrame 来获取特定的几列来绘制 K 线。最基础的 K 线需要的数据格式是横轴一般为时间组成的列表，纵轴为以列表为对象的列表，格式为 [[],[],[]…[] ]。主要是通过 tolist () 函数来将 DataFrame 对象或者 Series 转换成列表格式，从而符合绘制曲线的数据格式要求。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> tushare <span class=\"keyword\">as</span> ts</span><br><span class=\"line\"><span class=\"keyword\">from</span> pandas <span class=\"keyword\">import</span> DataFrame</span><br><span class=\"line\"><span class=\"keyword\">from</span> pyecharts.charts <span class=\"keyword\">import</span> Kline</span><br><span class=\"line\"><span class=\"keyword\">from</span> pyecharts <span class=\"keyword\">import</span> options <span class=\"keyword\">as</span> opts</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 通过get_hist_data()函数直接获取到大盘参数---暂时认为接口返回的数据是json格式</span></span><br><span class=\"line\">data = ts.get_hist_data(<span class=\"string\">&#x27;600519&#x27;</span>,start=<span class=\"string\">&#x27;2020-09-01&#x27;</span>,ktype=<span class=\"string\">&#x27;D&#x27;</span>)</span><br><span class=\"line\">data2 = data.sort_index(ascending=<span class=\"literal\">True</span>)     <span class=\"comment\">#升序</span></span><br><span class=\"line\">print(data2)        <span class=\"comment\"># 打印返回数据</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># df.open 和df[&#x27;open&#x27;]返回值是一样的</span></span><br><span class=\"line\">df = DataFrame(data2,columns=[<span class=\"string\">&#x27;open&#x27;</span>,<span class=\"string\">&#x27;high&#x27;</span>,<span class=\"string\">&#x27;close&#x27;</span>,<span class=\"string\">&#x27;low&#x27;</span>])</span><br><span class=\"line\">print(df)               <span class=\"comment\"># 从data2大的表结构数据中抽出columns中的这几列</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将数据转换成列表-----&gt;K线所需要的数据类型</span></span><br><span class=\"line\">dfList = df.values.tolist()</span><br><span class=\"line\">print(dfList)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 选中指定列df[&#x27;列的名字&#x27;]</span></span><br><span class=\"line\">print(df[<span class=\"string\">&#x27;open&#x27;</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取行索引</span></span><br><span class=\"line\">print(df.index)</span><br><span class=\"line\"><span class=\"comment\"># Index([&#x27;2020-09-01&#x27;, &#x27;2020-09-02&#x27;, &#x27;2020-09-03&#x27;, &#x27;2020-09-04&#x27;, &#x27;2020-09-07&#x27;,</span></span><br><span class=\"line\"><span class=\"comment\">#        &#x27;2020-09-08&#x27;, &#x27;2020-09-09&#x27;, &#x27;2020-09-10&#x27;, &#x27;2020-09-11&#x27;],</span></span><br><span class=\"line\"><span class=\"comment\">#       dtype=&#x27;object&#x27;, name=&#x27;date&#x27;)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将索引---&gt;此处为date转换成列表</span></span><br><span class=\"line\">date = df.index.tolist()</span><br><span class=\"line\">print(df.index.tolist())</span><br><span class=\"line\"><span class=\"comment\"># [&#x27;2020-09-01&#x27;, &#x27;2020-09-02&#x27;, &#x27;2020-09-03&#x27;, &#x27;2020-09-04&#x27;, &#x27;2020-09-07&#x27;, &#x27;2020-09-08&#x27;, &#x27;2020-09-09&#x27;, &#x27;2020-09-10&#x27;, &#x27;2020-09-11&#x27;]</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取列索引</span></span><br><span class=\"line\">print(df.columns)</span><br><span class=\"line\"><span class=\"comment\"># Index([&#x27;open&#x27;, &#x27;high&#x27;, &#x27;close&#x27;, &#x27;low&#x27;], dtype=&#x27;object&#x27;)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 通过行索引索取指定的行数据</span></span><br><span class=\"line\">print(df.loc[<span class=\"string\">&#x27;2020-09-01&#x27;</span>])</span><br><span class=\"line\"><span class=\"comment\"># 将series列数据转换为列表</span></span><br><span class=\"line\">print(df.loc[<span class=\"string\">&#x27;2020-09-01&#x27;</span>].tolist())</span><br><span class=\"line\"><span class=\"comment\"># open     1792.00</span></span><br><span class=\"line\"><span class=\"comment\"># high     1802.00</span></span><br><span class=\"line\"><span class=\"comment\"># close    1801.98</span></span><br><span class=\"line\"><span class=\"comment\"># low      1775.01</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取DataFrame对象的一些统计描述</span></span><br><span class=\"line\">print( df.describe() )     <span class=\"comment\"># 获取返回数据的大致描述</span></span><br><span class=\"line\"><span class=\"comment\">#               open         high        close          low</span></span><br><span class=\"line\"><span class=\"comment\"># count     9.000000     9.000000     9.000000     9.000000</span></span><br><span class=\"line\"><span class=\"comment\"># mean   1751.267778  1766.864444  1746.853333  1724.421111</span></span><br><span class=\"line\"><span class=\"comment\"># std      48.213887    42.352767    43.539719    42.882137</span></span><br><span class=\"line\"><span class=\"comment\"># min    1688.000000  1711.000000  1688.000000  1677.070000</span></span><br><span class=\"line\"><span class=\"comment\"># 25%    1703.740000  1736.000000  1711.400000  1688.000000</span></span><br><span class=\"line\"><span class=\"comment\"># 50%    1760.000000  1776.990000  1733.000000  1703.970000</span></span><br><span class=\"line\"><span class=\"comment\"># 75%    1792.000000  1802.000000  1793.000000  1770.000000</span></span><br><span class=\"line\"><span class=\"comment\"># max    1825.000000  1828.000000  1801.980000  1779.700000</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># .add_yaxis(&quot;kline&quot;,data3) K线需要的数据格式</span></span><br><span class=\"line\">data3 = [</span><br><span class=\"line\">     [<span class=\"number\">2332.08</span>, <span class=\"number\">2273.4</span>, <span class=\"number\">2259.25</span>, <span class=\"number\">2333.54</span>],</span><br><span class=\"line\">     [<span class=\"number\">2274.81</span>, <span class=\"number\">2326.31</span>, <span class=\"number\">2270.1</span>, <span class=\"number\">2328.14</span>],</span><br><span class=\"line\">     [<span class=\"number\">2333.61</span>, <span class=\"number\">2347.18</span>, <span class=\"number\">2321.6</span>, <span class=\"number\">2351.44</span>],</span><br><span class=\"line\">     [<span class=\"number\">2340.44</span>, <span class=\"number\">2324.29</span>, <span class=\"number\">2304.27</span>, <span class=\"number\">2352.02</span>],</span><br><span class=\"line\">     [<span class=\"number\">2326.42</span>, <span class=\"number\">2318.61</span>, <span class=\"number\">2314.59</span>, <span class=\"number\">2333.67</span>],</span><br><span class=\"line\">     [<span class=\"number\">2314.68</span>, <span class=\"number\">2310.59</span>, <span class=\"number\">2296.58</span>, <span class=\"number\">2320.96</span>],</span><br><span class=\"line\">     [<span class=\"number\">2309.16</span>, <span class=\"number\">2286.6</span>, <span class=\"number\">2264.83</span>, <span class=\"number\">2333.29</span>],</span><br><span class=\"line\">     [<span class=\"number\">2282.17</span>, <span class=\"number\">2263.97</span>, <span class=\"number\">2253.25</span>, <span class=\"number\">2286.33</span>],</span><br><span class=\"line\">     [<span class=\"number\">2255.77</span>, <span class=\"number\">2270.28</span>, <span class=\"number\">2253.31</span>, <span class=\"number\">2276.22</span>],</span><br><span class=\"line\"> ]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 绘制K线图所需要的数据-----横轴的date以及纵轴的open,high,low,close四个参数</span></span><br><span class=\"line\"><span class=\"comment\"># 难点：如何将DataFrame格式的表格数据转换成以列表为对象元素的列表 [ [],[],[],[],[] ]</span></span><br><span class=\"line\">kline=(</span><br><span class=\"line\">     Kline()</span><br><span class=\"line\">         .add_xaxis(date)</span><br><span class=\"line\">         .add_yaxis(<span class=\"string\">&quot;kline&quot;</span>,dfList)</span><br><span class=\"line\">         .set_global_opts(</span><br><span class=\"line\">             yaxis_opts=opts.AxisOpts(is_scale=<span class=\"literal\">True</span>),</span><br><span class=\"line\">             xaxis_opts=opts.AxisOpts(is_scale=<span class=\"literal\">True</span>),</span><br><span class=\"line\">             title_opts=opts.TitleOpts(title=<span class=\"string\">&quot;茅台近日-日K线&quot;</span>),</span><br><span class=\"line\">        )</span><br><span class=\"line\">     )</span><br><span class=\"line\">kline.render()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 把json格式的数据，转换成单个key-value的形式，并且把每个dict存入list中</span></span><br><span class=\"line\"><span class=\"comment\"># def parse(self,df):</span></span><br><span class=\"line\"><span class=\"comment\">#     for key,value in df.items():</span></span><br><span class=\"line\"><span class=\"comment\">#         if isinstance(value,dict):</span></span><br><span class=\"line\"><span class=\"comment\">#             self.parse(value)</span></span><br><span class=\"line\"><span class=\"comment\">#         elif isinstance(value,list):</span></span><br><span class=\"line\"><span class=\"comment\">#             for k in range(len(value)):</span></span><br><span class=\"line\"><span class=\"comment\">#                 self.parse(value[k])</span></span><br><span class=\"line\"><span class=\"comment\">#         else:</span></span><br><span class=\"line\"><span class=\"comment\">#             self.L.append(&#123;key:value&#125;)</span></span><br><span class=\"line\"><span class=\"comment\">#     return self.L</span></span><br></pre></td></tr></table></figure>\n<p>结果为：</p>\n<p>image-20200914192636539.png</p>\n<p><img data-src=\"http://qh82kvit3.hn-bkt.clouddn.com/image-20200914192636539.png\" alt=\"图片暂时无法显示\"></p>\n",
            "tags": [
                "Pandas"
            ]
        },
        {
            "id": "http://csstar.top/2020/09/12/Docker%E5%85%A5%E9%97%A8/",
            "url": "http://csstar.top/2020/09/12/Docker%E5%85%A5%E9%97%A8/",
            "title": "Docker入门",
            "date_published": "2020-09-12T07:59:46.000Z",
            "content_html": "<h1 id=\"docker入门\"><a class=\"markdownIt-Anchor\" href=\"#docker入门\">#</a> Docker 入门</h1>\n<h2 id=\"docker简介\"><a class=\"markdownIt-Anchor\" href=\"#docker简介\">#</a> docker 简介</h2>\n<h3 id=\"三要素\"><a class=\"markdownIt-Anchor\" href=\"#三要素\">#</a> 三要素：</h3>\n<p>仓库，镜像，容器</p>\n<h3 id=\"why\"><a class=\"markdownIt-Anchor\" href=\"#why\">#</a> why：</h3>\n<p>开发代码 ----&gt; 运维工程师不一定能运行</p>\n<p>环境 / 配置不同 -&gt; 导致相同代码不一定能成功运行得到正确结果</p>\n<h3 id=\"简化\"><a class=\"markdownIt-Anchor\" href=\"#简化\">#</a> 简化：</h3>\n<p>将代码 / 依赖 / 配置 / 环境等一系列进行打包形成一个统一的镜像</p>\n<p>这个统一的镜像可以在较为简单的环境下成功运行</p>\n<h3 id=\"比喻\"><a class=\"markdownIt-Anchor\" href=\"#比喻\">#</a> 比喻：</h3>\n<p>一个集装箱代表一个运行环境，相互分离，互不干扰</p>\n<h2 id=\"虚拟机与docker的概念和区别\"><a class=\"markdownIt-Anchor\" href=\"#虚拟机与docker的概念和区别\">#</a> 虚拟机与 docker 的概念和区别</h2>\n<h3 id=\"虚拟机\"><a class=\"markdownIt-Anchor\" href=\"#虚拟机\">#</a> 虚拟机：</h3>\n<p>在一种操作系统里运行另一种操作系统，跟真实系统一模一样</p>\n<h3 id=\"区别\"><a class=\"markdownIt-Anchor\" href=\"#区别\">#</a> 区别：</h3>\n<p>虚拟机运行分钟级，而 docker 则是秒级</p>\n<p>虚拟里占用资源多，包含了硬件，软件一整套操作系统</p>\n<p>docker 轻量级的，且基于宿主机的内核</p>\n<p>Linux 容器不是模拟一个完整的操作系统，按需导入</p>\n<p>docker 可以认为是一种精简版的 linux 环境，更简洁，灵活</p>\n<h2 id=\"资源\"><a class=\"markdownIt-Anchor\" href=\"#资源\">#</a> 资源</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL2RvY2tlci1jbi5jb20=\">docker-cn.com</span>    //docker 中文网<br>\n Docker Hub        //docker 仓库</p>\n<h2 id=\"docker安装\"><a class=\"markdownIt-Anchor\" href=\"#docker安装\">#</a> Docker 安装</h2>\n<p>centos 6.5 或更高的版本</p>\n<blockquote>\n<p>uname -r        cat  /etc/redhat-release    // 查看 centos 版本<br>\n epel-release    //epel 安装 docker 依赖库   tag：6.8<br>\n<span class=\"exturl\" data-url=\"aHR0cDovL2RvY2tlci5pbw==\">docker.io</span>         // 正式的 docker 镜像      tag：6.8</p>\n</blockquote>\n<p>7.0 版本不同，具体参考官方文档</p>\n<h2 id=\"三部分\"><a class=\"markdownIt-Anchor\" href=\"#三部分\">#</a> 三部分</h2>\n<p>client--------&gt;docker bulid / pull / run<br>\ndocker_host---------&gt;Docker  daemon<br>\nrepository-------------&gt; 仓库</p>\n<h3 id=\"理解\"><a class=\"markdownIt-Anchor\" href=\"#理解\">#</a> 理解：</h3>\n<p>镜像 ------ 是只读模板<br>\n容器 ------ 时利用镜像创造的实例，可以看作简易版的 linux<br>\n 仓库 ------ 集中存放镜像文件   分为公开库 / 私有库</p>\n<h2 id=\"阿里云网易云镜像加速\"><a class=\"markdownIt-Anchor\" href=\"#阿里云网易云镜像加速\">#</a> 阿里云 / 网易云镜像加速：</h2>\n<p>注册账号<br>\n获得阿里云加速器链接<br>\n配置文件<br>\n重载配置文件 / 重启 docker<br>\n 检查是否生效  ps -ef | grep docker</p>\n<h3 id=\"docker-run-查找顺序\"><a class=\"markdownIt-Anchor\" href=\"#docker-run-查找顺序\">#</a> docker run 查找顺序</h3>\n<p>本地容器 ------&gt; 本地镜像 --------&gt;hub 共有仓库去 pull 镜像 -----&gt; 本地更具镜像实例一个容器</p>\n<h2 id=\"docker命令\"><a class=\"markdownIt-Anchor\" href=\"#docker命令\">#</a> docker 命令</h2>\n<blockquote>\n<p>systemctl  start  docker     // 启动 docker</p>\n</blockquote>\n<blockquote>\n<p>docker images                  // 本地镜像模板</p>\n<p>-a  所有镜像     -q 所有镜像 id     --digests  摘要</p>\n<p>–no-trunc 完整镜像信息     // 参数</p>\n</blockquote>\n<blockquote>\n<p>docker search &lt;images_name&gt;   // 在 docker hub 共有仓库中搜寻镜像</p>\n<p>-s    星数限定      --no-trunc 完整镜像信息    --automated  只显示该类型镜像</p>\n</blockquote>\n<blockquote>\n<p>docker  pull  &lt;images_name&gt;：tag   // 拉去某个特定版本镜像</p>\n</blockquote>\n<blockquote>\n<p>docker rmi  &lt;images_name&gt;  // 运行时删除不了</p>\n<p>-f   强制删除</p>\n</blockquote>\n<blockquote>\n<p>docker rmi -f  images1:tag  images2:tag  // 删除多个镜像</p>\n</blockquote>\n<blockquote>\n<p>docker rmi -f  $(docker images -qa)    // 删除全部镜像</p>\n</blockquote>\n<h3 id=\"docker-ps-的参数\"><a class=\"markdownIt-Anchor\" href=\"#docker-ps-的参数\">#</a> docker ps 的参数：</h3>\n<blockquote>\n<p>docker ps -a 可查看后台运行的容器 id，并根据需求删除</p>\n<p>docker inspect 容器 id     // 查看容器内部的细节</p>\n</blockquote>\n<h2 id=\"镜像原理\"><a class=\"markdownIt-Anchor\" href=\"#镜像原理\">#</a> 镜像原理：</h2>\n<p>轻量的，可执行的独立软件包，用来打包软件和软件所需的运行环境</p>\n<p>docker 镜像实际上是一层层文件系统，这种为 UnionFile 层级文件系统</p>\n<p>一个文件的内存大，说明需要的层级文件多，依赖的环境复杂</p>\n<h2 id=\"分层结构\"><a class=\"markdownIt-Anchor\" href=\"#分层结构\">#</a> 分层结构：</h2>\n<p>优点 ------ 共享资源</p>\n<p>镜像层可读，容器层可写</p>\n<blockquote>\n<p>docker commit     // 提交容器副本成为一个新的镜像</p>\n<p>-m “提交信息”    -a 作者    容器 ID  目标镜像名：tag</p>\n</blockquote>\n<h2 id=\"防火墙\"><a class=\"markdownIt-Anchor\" href=\"#防火墙\">#</a> 防火墙：</h2>\n<blockquote>\n<p>systemctl status firewalld.service   // 查看防火墙状态</p>\n</blockquote>\n<blockquote>\n<p>systemctl stop firewalld.service   // 关闭运行的防火墙</p>\n</blockquote>\n<blockquote>\n<p>systemctl disable firewalld.service  // 永久关闭防火墙</p>\n</blockquote>\n<h2 id=\"docker容器数据卷\"><a class=\"markdownIt-Anchor\" href=\"#docker容器数据卷\">#</a> docker 容器数据卷：</h2>\n<p>保证数据的持久化，容器之间共享数据，数据同步</p>\n<h3 id=\"直接命令\"><a class=\"markdownIt-Anchor\" href=\"#直接命令\">#</a> 直接命令：</h3>\n<blockquote>\n<p>docker run -it -v /myDataVolume:/dataVolumeContainer centos</p>\n</blockquote>\n<p>:ro   // 修改权限为只读模式</p>\n<p>映射文件夹下无法新建文件，且无法修改文件，形成单方向同步</p>\n<h2 id=\"dockerfile\"><a class=\"markdownIt-Anchor\" href=\"#dockerfile\">#</a> DockerFile：</h2>\n<p>对镜像源码的描述，编译文件</p>\n<p>提示错误：“docker build” requires exactly 1 argument.</p>\n<p>原因是因为（少了一个 ‘.’ ， ‘.’ 代表当前路径）</p>\n<p>[root@docker mydocker]# docker build -f /mydocker/DockerFile -t cs/centos .</p>\n<p>. 打包当前目录</p>\n<h3 id=\"数据卷容器\"><a class=\"markdownIt-Anchor\" href=\"#数据卷容器\">#</a> 数据卷容器：</h3>\n<p>容器间传递共享</p>\n<p>docker run -it --name dc01 cs/centos  // 父容器</p>\n<p>docker run -it --name dc02 --volumes-from dc01 cs/centos   // 子容器</p>\n<p>删除父容器 1，对 2，3 子容器不影响，干掉父容器 1，对 2，3 之间的数据共享也不影响</p>\n<h3 id=\"dockerfile-镜像构建文件\"><a class=\"markdownIt-Anchor\" href=\"#dockerfile-镜像构建文件\">#</a> DockerFile:  镜像构建文件</h3>\n<p>手动编写符合 file 规范的 dockerfile 文件</p>\n<p>docker build 命令执行，生成镜像</p>\n<p>docker run 执行</p>\n<h3 id=\"dockerfile-2\"><a class=\"markdownIt-Anchor\" href=\"#dockerfile-2\">#</a> dockerfile：</h3>\n<p>1，每条保留字指令都必须大写首字母，且保留字后不为空</p>\n<p>2，指令自上而下，顺序执行，# 表注释</p>\n<p>3，每条指令创建一个新的镜像层，并不断提交给镜像</p>\n<h3 id=\"docker执行dockerfile的大致流程\"><a class=\"markdownIt-Anchor\" href=\"#docker执行dockerfile的大致流程\">#</a> docker 执行 dockerfile 的大致流程：</h3>\n<p>1，docker 从基础镜像运行一个容器</p>\n<p>2，执行一条条指令，对容器进行修改</p>\n<p>3，执行 docker commit 提交新的镜像层，对镜像进行修改</p>\n<p>4，docker 基于新镜像在运行一个容器</p>\n<p>5，在依次类推，直到运行完所有指令</p>\n<h3 id=\"dockerfile保留字\"><a class=\"markdownIt-Anchor\" href=\"#dockerfile保留字\">#</a> dockerfile 保留字：</h3>\n<p>基础镜像</p>\n<p>作者说明</p>\n<p>执行命令</p>\n<p>指定对外暴露的端口</p>\n<p>进入终端的指定工作目录</p>\n<p>构建镜像中设置环境变量</p>\n<p>拷贝并解压缩某个压缩包</p>\n<p>与 add 功能相同，但不能解压缩</p>\n<p>自建容器卷</p>\n<p>指定容器启动时要运行的命令，只有最后一个 CMD 命令生效</p>\n<p>指定容器启动时要运行的命令，但不会覆盖之前的命令</p>\n<p>触发器</p>\n<h2 id=\"cmd和entrypoint区别\"><a class=\"markdownIt-Anchor\" href=\"#cmd和entrypoint区别\">#</a> CMD 和 ENTRYPOINT 区别：</h2>\n<p>CMD  run 命令后加参数覆盖之前的命令</p>\n<p>ENTRYPOINT  run 命令后的参数添加到命令里</p>\n",
            "tags": [
                "Docker"
            ]
        }
    ]
}