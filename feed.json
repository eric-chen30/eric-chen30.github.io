{
    "version": "https://jsonfeed.org/version/1",
    "title": "CsStar",
    "description": "Work Hard To Be A Better Man",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2020/09/13/%E8%AE%A4%E8%AF%86Pandas-DataFrame/",
            "url": "http://example.com/2020/09/13/%E8%AE%A4%E8%AF%86Pandas-DataFrame/",
            "title": "认识Pandas-DataFrame",
            "date_published": "2020-09-13T08:25:21.000Z",
            "content_html": "<h1 id=\"pandas-dataframe基础知识总结\"><a class=\"markdownIt-Anchor\" href=\"#pandas-dataframe基础知识总结\">#</a> Pandas-DataFrame 基础知识总结</h1>\n<h2 id=\"dataframe的创建\"><a class=\"markdownIt-Anchor\" href=\"#dataframe的创建\">#</a> DataFrame 的创建</h2>\n<h3 id=\"dataframe和series简介\"><a class=\"markdownIt-Anchor\" href=\"#dataframe和series简介\">#</a> DataFrame 和 Series 简介</h3>\n<p>DataFrame 是一种表格型的数据结构。DataFrame 既有行索引，也有列索引，它可以看作是由 Series 组成的字典，并且这些 Series 共用一个索引。创建方式有很多种，主要是根据 dict 进行创建，或者是读取 csv 或者 txt 文件。</p>\n<blockquote>\n<p><strong>Series</strong>：简单来说，就是一个竖着的 List，一般创建需要传入一个 List。</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\">s = pd.Series([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,np.nan])</span><br><span class=\"line\">print(s)      <span class=\"comment\"># 竖着的列表，其中np.nan为NaN，还包含默认的索引列</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>numpy 中不存在的值都会被赋值为 NaN</li>\n<li>默认索引列为数字（从 0 开始），也可以自定义索引列，在 Series 函数中添加 index 关键字，同时给一个自定义索引列表</li>\n</ul>\n</blockquote>\n<h3 id=\"根据字典创建\"><a class=\"markdownIt-Anchor\" href=\"#根据字典创建\">#</a> 根据字典创建</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data = &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;name&#x27;</span>:[<span class=\"string\">&#x27;csstar&#x27;</span>,<span class=\"string\">&#x27;jackson&#x27;</span>,<span class=\"string\">&#x27;tom&#x27;</span>,<span class=\"string\">&#x27;jerry&#x27;</span>,<span class=\"string\">&#x27;yummy&#x27;</span>],</span><br><span class=\"line\">    <span class=\"string\">&#x27;year&#x27;</span>:[<span class=\"number\">2000</span>,<span class=\"number\">2001</span>,<span class=\"number\">2008</span>,<span class=\"number\">2010</span>,<span class=\"number\">2020</span>],</span><br><span class=\"line\">    <span class=\"string\">&#x27;sex&#x27;</span>:[<span class=\"string\">&#x27;m&#x27;</span>,<span class=\"string\">&#x27;m&#x27;</span>,<span class=\"string\">&#x27;m&#x27;</span>,<span class=\"string\">&#x27;w&#x27;</span>,<span class=\"string\">&#x27;w&#x27;</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\"># 得到了DataFrame对象，包含默认索引列</span></span><br><span class=\"line\">frame = pd.DataFrame(data)  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># index是行索引--&gt;对应行  columns是列索引--&gt;对应列</span></span><br><span class=\"line\">frame2 = pd.DataFrame(data,index=[<span class=\"string\">&#x27;one&#x27;</span>,<span class=\"string\">&#x27;two&#x27;</span>,<span class=\"string\">&#x27;three&#x27;</span>,<span class=\"string\">&#x27;four&#x27;</span>,<span class=\"string\">&#x27;five&#x27;</span>],columns=[<span class=\"string\">&#x27;name&#x27;</span>,<span class=\"string\">&#x27;sex&#x27;</span>,<span class=\"string\">&#x27;year&#x27;</span>])</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>如果 columns 中出现了没有定义的列，那么该列的数据都为 NaN</li>\n<li>可以用 index，columns，values 来访问 DataFrame 的行索引，列索引以及数据值，数据返回的是一个<strong>二维数组</strong>。</li>\n</ul>\n</blockquote>\n<h3 id=\"读取文件的方式创建\"><a class=\"markdownIt-Anchor\" href=\"#读取文件的方式创建\">#</a> 读取文件的方式创建</h3>\n<p>读取文件生成 DataFrame 最常用的是<strong> read_csv,read_table</strong> 方法</p>\n<p><img data-src=\"%E8%AE%A4%E8%AF%86Pandas-DataFrame.assets/image-20200913170309272.png\" alt=\"image-20200913170309272\"></p>\n<p>还有一些其他的 DataFrame 创建方式，比如说可以通过读取 mysql 或者 mongoDB，读取 json 文件等方式来生成 DataFrame 对象。</p>\n<h2 id=\"dataframe轴的概念\"><a class=\"markdownIt-Anchor\" href=\"#dataframe轴的概念\">#</a> DataFrame 轴的概念</h2>\n<p>在 DataFrame 的处理中经常会遇到轴的概念，我们所说的 axis=0 即表示沿着每一列或者行标签 / 索引值向下执行的，axis = 1 即表示沿着每一行或者列标签方向执行对应的方法</p>\n<h2 id=\"dataframe的性质\"><a class=\"markdownIt-Anchor\" href=\"#dataframe的性质\">#</a> DataFrame 的性质</h2>\n<h3 id=\"索引-切片\"><a class=\"markdownIt-Anchor\" href=\"#索引-切片\">#</a> 索引、切片</h3>\n<p>根据列的名字获取一列，返回的是一个 Series</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">frame[<span class=\"string\">&#x27;列索引的名字&#x27;</span>]</span><br></pre></td></tr></table></figure>\n<p>获取多列或者多行</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data = pd.DataFrame(np.arange(<span class=\"number\">16</span>).reshape((<span class=\"number\">4</span>,<span class=\"number\">4</span>)),index = [<span class=\"string\">&#x27;Ohio&#x27;</span>,<span class=\"string\">&#x27;Colorado&#x27;</span>,<span class=\"string\">&#x27;Utah&#x27;</span>,<span class=\"string\">&#x27;New York&#x27;</span>],columns=[<span class=\"string\">&#x27;one&#x27;</span>,<span class=\"string\">&#x27;two&#x27;</span>,<span class=\"string\">&#x27;three&#x27;</span>,<span class=\"string\">&#x27;four&#x27;</span>])</span><br><span class=\"line\">data[[<span class=\"string\">&#x27;two&#x27;</span>,<span class=\"string\">&#x27;three&#x27;</span>]]</span><br><span class=\"line\"><span class=\"comment\">#输出</span></span><br><span class=\"line\">    two three</span><br><span class=\"line\">Ohio    <span class=\"number\">1</span>   <span class=\"number\">2</span></span><br><span class=\"line\">Colorado    <span class=\"number\">5</span>   <span class=\"number\">6</span></span><br><span class=\"line\">Utah    <span class=\"number\">9</span>   <span class=\"number\">10</span></span><br><span class=\"line\">New York    <span class=\"number\">13</span>  <span class=\"number\">14</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#取行</span></span><br><span class=\"line\">data[:<span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"comment\">#输出</span></span><br><span class=\"line\">    one two three   four</span><br><span class=\"line\">Ohio    <span class=\"number\">0</span>   <span class=\"number\">1</span>   <span class=\"number\">2</span>   <span class=\"number\">3</span></span><br><span class=\"line\">Colorado    <span class=\"number\">4</span>   <span class=\"number\">5</span>   <span class=\"number\">6</span>   <span class=\"number\">7</span></span><br></pre></td></tr></table></figure>\n<p>根据逻辑条件来选取</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data[data[<span class=\"string\">&#x27;three&#x27;</span>]&gt;<span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"comment\">#输出</span></span><br><span class=\"line\">    one two three   four</span><br><span class=\"line\">Colorado    <span class=\"number\">4</span>   <span class=\"number\">5</span>   <span class=\"number\">6</span>   <span class=\"number\">7</span></span><br><span class=\"line\">Utah    <span class=\"number\">8</span>   <span class=\"number\">9</span>   <span class=\"number\">10</span>  <span class=\"number\">11</span></span><br><span class=\"line\">New York    <span class=\"number\">12</span>  <span class=\"number\">13</span>  <span class=\"number\">14</span>  <span class=\"number\">15</span></span><br></pre></td></tr></table></figure>\n<p>专门用于索引的方法，如果用标签 —&gt;loc 方法，如果用下标 —&gt;iloc 方法</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#data.ix[&#x27;Colorado&#x27;,[&#x27;two&#x27;,&#x27;three&#x27;]]</span></span><br><span class=\"line\">data.loc[<span class=\"string\">&#x27;Colorado&#x27;</span>,[<span class=\"string\">&#x27;two&#x27;</span>,<span class=\"string\">&#x27;three&#x27;</span>]]</span><br><span class=\"line\"><span class=\"comment\">#输出</span></span><br><span class=\"line\">two      <span class=\"number\">5</span></span><br><span class=\"line\">three    <span class=\"number\">6</span></span><br><span class=\"line\">Name: Colorado, dtype: int64</span><br><span class=\"line\"></span><br><span class=\"line\">data.iloc[<span class=\"number\">0</span>:<span class=\"number\">3</span>,<span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"comment\">#输出</span></span><br><span class=\"line\">Ohio         <span class=\"number\">2</span></span><br><span class=\"line\">Colorado     <span class=\"number\">6</span></span><br><span class=\"line\">Utah        <span class=\"number\">10</span></span><br><span class=\"line\">Name: three, dtype: int64</span><br></pre></td></tr></table></figure>\n<h3 id=\"修改数据\"><a class=\"markdownIt-Anchor\" href=\"#修改数据\">#</a> 修改数据</h3>\n<p>使用标量修改某一列</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">frame[<span class=\"string\">&#x27;debt&#x27;</span>]=<span class=\"number\">16.5</span></span><br><span class=\"line\">frame <span class=\"comment\"># debt列全部数据为16.5</span></span><br></pre></td></tr></table></figure>\n<p>使用一个列表来修改，不过要保证列表的长度与 DataFrame 长度相同：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">frame.debt = np.arange(<span class=\"number\">5</span>)</span><br></pre></td></tr></table></figure>\n<p>使用一个 Series，此时会根据索引来进行精确匹配</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">val=pd.Series([<span class=\"number\">-1.2</span>,<span class=\"number\">-1.5</span>,<span class=\"number\">-1.7</span>],index[<span class=\"string\">&#x27;two&#x27;</span>,<span class=\"string\">&#x27;four&#x27;</span>,<span class=\"string\">&#x27;five&#x27;</span>])</span><br><span class=\"line\">frame[<span class=\"string\">&#x27;debt&#x27;</span>] = val  <span class=\"comment\">#定义一个三个数据的Series来代替指定index行的值，从而实现精确定位并修改</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"重新索引\"><a class=\"markdownIt-Anchor\" href=\"#重新索引\">#</a> 重新索引</h3>\n<p>使用 reinex 方法对 DataFrame 进行重新索引，可以重新索引行或 i 列，或者两者都索引，只穿一个参数的情况下，会重新索引行。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">frame = pd.DataFrame(np.arange(<span class=\"number\">9</span>).reshape((<span class=\"number\">3</span>,<span class=\"number\">3</span>)),index=[<span class=\"number\">1</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>],columns=[<span class=\"string\">&#x27;Ohio&#x27;</span>,<span class=\"string\">&#x27;Texas&#x27;</span>,<span class=\"string\">&#x27;California&#x27;</span>])</span><br><span class=\"line\">frame2 = frame.reindex([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>])</span><br><span class=\"line\">frame2</span><br><span class=\"line\"><span class=\"comment\">#输出</span></span><br><span class=\"line\">    Ohio    Texas   California</span><br><span class=\"line\"><span class=\"number\">1</span>   <span class=\"number\">0.0</span> <span class=\"number\">1.0</span> <span class=\"number\">2.0</span></span><br><span class=\"line\"><span class=\"number\">2</span>   NaN NaN NaN</span><br><span class=\"line\"><span class=\"number\">4</span>   <span class=\"number\">3.0</span> <span class=\"number\">4.0</span> <span class=\"number\">5.0</span></span><br><span class=\"line\"><span class=\"number\">5</span>   <span class=\"number\">6.0</span> <span class=\"number\">7.0</span> <span class=\"number\">8.0</span></span><br><span class=\"line\"></span><br><span class=\"line\">states = [<span class=\"string\">&#x27;Texas&#x27;</span>,<span class=\"string\">&#x27;Utah&#x27;</span>,<span class=\"string\">&#x27;California&#x27;</span>]</span><br><span class=\"line\">frame.reindex(columns=states)</span><br><span class=\"line\"><span class=\"comment\">#输出</span></span><br><span class=\"line\">    Texas   Utah    California</span><br><span class=\"line\"><span class=\"number\">1</span>   <span class=\"number\">1</span>   NaN <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">4</span>   <span class=\"number\">4</span>   NaN <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"number\">5</span>   <span class=\"number\">7</span>   NaN <span class=\"number\">8</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"丢弃指定轴上的值\"><a class=\"markdownIt-Anchor\" href=\"#丢弃指定轴上的值\">#</a> 丢弃指定轴上的值</h3>\n<p>使用 drop 方法丢弃指定轴上的值，不会对 DataFrame 造成影响</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">frame = pd.DataFrame(np.arange(<span class=\"number\">9</span>).reshape((<span class=\"number\">3</span>,<span class=\"number\">3</span>)),index = [<span class=\"string\">&#x27;a&#x27;</span>,<span class=\"string\">&#x27;c&#x27;</span>,<span class=\"string\">&#x27;d&#x27;</span>],columns = [<span class=\"string\">&#x27;Ohio&#x27;</span>,<span class=\"string\">&#x27;Texas&#x27;</span>,<span class=\"string\">&#x27;California&#x27;</span>])</span><br><span class=\"line\">frame.drop(<span class=\"string\">&#x27;a&#x27;</span>) </span><br><span class=\"line\"><span class=\"comment\">#输出</span></span><br><span class=\"line\">Ohio    Texas   California</span><br><span class=\"line\">a   <span class=\"number\">0</span>   <span class=\"number\">1</span>   <span class=\"number\">2</span></span><br><span class=\"line\">c   <span class=\"number\">3</span>   <span class=\"number\">4</span>   <span class=\"number\">5</span></span><br><span class=\"line\">d   <span class=\"number\">6</span>   <span class=\"number\">7</span>   <span class=\"number\">8</span></span><br><span class=\"line\"></span><br><span class=\"line\">frame.drop([<span class=\"string\">&#x27;Ohio&#x27;</span>],axis=<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"comment\">#输出</span></span><br><span class=\"line\">    Texas   California</span><br><span class=\"line\">a   <span class=\"number\">1</span>   <span class=\"number\">2</span></span><br><span class=\"line\">c   <span class=\"number\">4</span>   <span class=\"number\">5</span></span><br><span class=\"line\">d   <span class=\"number\">7</span>   <span class=\"number\">8</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"算术运算\"><a class=\"markdownIt-Anchor\" href=\"#算术运算\">#</a> 算术运算</h3>\n<h3 id=\"函数应用与映射\"><a class=\"markdownIt-Anchor\" href=\"#函数应用与映射\">#</a> 函数应用与映射</h3>\n<h3 id=\"排序与排名\"><a class=\"markdownIt-Anchor\" href=\"#排序与排名\">#</a> 排序与排名</h3>\n<h3 id=\"汇总和计算描述统计\"><a class=\"markdownIt-Anchor\" href=\"#汇总和计算描述统计\">#</a> 汇总和计算描述统计</h3>\n<h3 id=\"处理缺失数据\"><a class=\"markdownIt-Anchor\" href=\"#处理缺失数据\">#</a> 处理缺失数据</h3>\n",
            "tags": [
                "Pandas"
            ]
        },
        {
            "id": "http://example.com/2020/09/12/Docker%E5%85%A5%E9%97%A8/",
            "url": "http://example.com/2020/09/12/Docker%E5%85%A5%E9%97%A8/",
            "title": "Docker入门",
            "date_published": "2020-09-12T07:59:46.000Z",
            "content_html": "<h1 id=\"docker入门\"><a class=\"markdownIt-Anchor\" href=\"#docker入门\">#</a> Docker 入门</h1>\n<h2 id=\"docker简介\"><a class=\"markdownIt-Anchor\" href=\"#docker简介\">#</a> docker 简介</h2>\n<h3 id=\"三要素\"><a class=\"markdownIt-Anchor\" href=\"#三要素\">#</a> 三要素：</h3>\n<p>仓库，镜像，容器</p>\n<h3 id=\"why\"><a class=\"markdownIt-Anchor\" href=\"#why\">#</a> why：</h3>\n<p>开发代码 ----&gt; 运维工程师不一定能运行</p>\n<p>环境 / 配置不同 -&gt; 导致相同代码不一定能成功运行得到正确结果</p>\n<h3 id=\"简化\"><a class=\"markdownIt-Anchor\" href=\"#简化\">#</a> 简化：</h3>\n<p>将代码 / 依赖 / 配置 / 环境等一系列进行打包形成一个统一的镜像</p>\n<p>这个统一的镜像可以在较为简单的环境下成功运行</p>\n<h3 id=\"比喻\"><a class=\"markdownIt-Anchor\" href=\"#比喻\">#</a> 比喻：</h3>\n<p>一个集装箱代表一个运行环境，相互分离，互不干扰</p>\n<h2 id=\"虚拟机与docker的概念和区别\"><a class=\"markdownIt-Anchor\" href=\"#虚拟机与docker的概念和区别\">#</a> 虚拟机与 docker 的概念和区别</h2>\n<h3 id=\"虚拟机\"><a class=\"markdownIt-Anchor\" href=\"#虚拟机\">#</a> 虚拟机：</h3>\n<p>在一种操作系统里运行另一种操作系统，跟真实系统一模一样</p>\n<h3 id=\"区别\"><a class=\"markdownIt-Anchor\" href=\"#区别\">#</a> 区别：</h3>\n<p>虚拟机运行分钟级，而 docker 则是秒级</p>\n<p>虚拟里占用资源多，包含了硬件，软件一整套操作系统</p>\n<p>docker 轻量级的，且基于宿主机的内核</p>\n<p>Linux 容器不是模拟一个完整的操作系统，按需导入</p>\n<p>docker 可以认为是一种精简版的 linux 环境，更简洁，灵活</p>\n<h2 id=\"资源\"><a class=\"markdownIt-Anchor\" href=\"#资源\">#</a> 资源</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL2RvY2tlci1jbi5jb20=\">docker-cn.com</span>    //docker 中文网<br>\n Docker Hub        //docker 仓库</p>\n<h2 id=\"docker安装\"><a class=\"markdownIt-Anchor\" href=\"#docker安装\">#</a> Docker 安装</h2>\n<p>centos 6.5 或更高的版本</p>\n<blockquote>\n<p>uname -r        cat  /etc/redhat-release    // 查看 centos 版本<br>\n epel-release    //epel 安装 docker 依赖库   tag：6.8<br>\n<span class=\"exturl\" data-url=\"aHR0cDovL2RvY2tlci5pbw==\">docker.io</span>         // 正式的 docker 镜像      tag：6.8</p>\n</blockquote>\n<p>7.0 版本不同，具体参考官方文档</p>\n<h2 id=\"三部分\"><a class=\"markdownIt-Anchor\" href=\"#三部分\">#</a> 三部分</h2>\n<p>client--------&gt;docker bulid / pull / run<br>\ndocker_host---------&gt;Docker  daemon<br>\nrepository-------------&gt; 仓库</p>\n<h3 id=\"理解\"><a class=\"markdownIt-Anchor\" href=\"#理解\">#</a> 理解：</h3>\n<p>镜像 ------ 是只读模板<br>\n容器 ------ 时利用镜像创造的实例，可以看作简易版的 linux<br>\n 仓库 ------ 集中存放镜像文件   分为公开库 / 私有库</p>\n<h2 id=\"阿里云网易云镜像加速\"><a class=\"markdownIt-Anchor\" href=\"#阿里云网易云镜像加速\">#</a> 阿里云 / 网易云镜像加速：</h2>\n<p>注册账号<br>\n获得阿里云加速器链接<br>\n配置文件<br>\n重载配置文件 / 重启 docker<br>\n 检查是否生效  ps -ef | grep docker</p>\n<h3 id=\"docker-run-查找顺序\"><a class=\"markdownIt-Anchor\" href=\"#docker-run-查找顺序\">#</a> docker run 查找顺序</h3>\n<p>本地容器 ------&gt; 本地镜像 --------&gt;hub 共有仓库去 pull 镜像 -----&gt; 本地更具镜像实例一个容器</p>\n<h2 id=\"docker命令\"><a class=\"markdownIt-Anchor\" href=\"#docker命令\">#</a> docker 命令</h2>\n<blockquote>\n<p>systemctl  start  docker     // 启动 docker</p>\n</blockquote>\n<blockquote>\n<p>docker images                  // 本地镜像模板</p>\n<p>-a  所有镜像     -q 所有镜像 id     --digests  摘要</p>\n<p>–no-trunc 完整镜像信息     // 参数</p>\n</blockquote>\n<blockquote>\n<p>docker search &lt;images_name&gt;   // 在 docker hub 共有仓库中搜寻镜像</p>\n<p>-s    星数限定      --no-trunc 完整镜像信息    --automated  只显示该类型镜像</p>\n</blockquote>\n<blockquote>\n<p>docker  pull  &lt;images_name&gt;：tag   // 拉去某个特定版本镜像</p>\n</blockquote>\n<blockquote>\n<p>docker rmi  &lt;images_name&gt;  // 运行时删除不了</p>\n<p>-f   强制删除</p>\n</blockquote>\n<blockquote>\n<p>docker rmi -f  images1:tag  images2:tag  // 删除多个镜像</p>\n</blockquote>\n<blockquote>\n<p>docker rmi -f  $(docker images -qa)    // 删除全部镜像</p>\n</blockquote>\n<img data-src=\"C:\\Users\\Administrator\\AppData\\Roaming\\Typora\\typora-user-images\\image-20200410102315483.png\" alt=\"image-20200410102315483\" style=\"zoom:150%;\" />\n<h3 id=\"docker-ps-的参数\"><a class=\"markdownIt-Anchor\" href=\"#docker-ps-的参数\">#</a> docker ps 的参数：</h3>\n<blockquote>\n<p>docker ps -a 可查看后台运行的容器 id，并根据需求删除</p>\n<p>docker inspect 容器 id     // 查看容器内部的细节</p>\n</blockquote>\n<h2 id=\"镜像原理\"><a class=\"markdownIt-Anchor\" href=\"#镜像原理\">#</a> 镜像原理：</h2>\n<p>轻量的，可执行的独立软件包，用来打包软件和软件所需的运行环境</p>\n<p>docker 镜像实际上是一层层文件系统，这种为 UnionFile 层级文件系统</p>\n<p>一个文件的内存大，说明需要的层级文件多，依赖的环境复杂</p>\n<h2 id=\"分层结构\"><a class=\"markdownIt-Anchor\" href=\"#分层结构\">#</a> 分层结构：</h2>\n<p>优点 ------ 共享资源</p>\n<p>镜像层可读，容器层可写</p>\n<blockquote>\n<p>docker commit     // 提交容器副本成为一个新的镜像</p>\n<p>-m “提交信息”    -a 作者    容器 ID  目标镜像名：tag</p>\n</blockquote>\n<h2 id=\"防火墙\"><a class=\"markdownIt-Anchor\" href=\"#防火墙\">#</a> 防火墙：</h2>\n<blockquote>\n<p>systemctl status firewalld.service   // 查看防火墙状态</p>\n</blockquote>\n<blockquote>\n<p>systemctl stop firewalld.service   // 关闭运行的防火墙</p>\n</blockquote>\n<blockquote>\n<p>systemctl disable firewalld.service  // 永久关闭防火墙</p>\n</blockquote>\n<h2 id=\"docker容器数据卷\"><a class=\"markdownIt-Anchor\" href=\"#docker容器数据卷\">#</a> docker 容器数据卷：</h2>\n<p>保证数据的持久化，容器之间共享数据，数据同步</p>\n<h3 id=\"直接命令\"><a class=\"markdownIt-Anchor\" href=\"#直接命令\">#</a> 直接命令：</h3>\n<blockquote>\n<p>docker run -it -v /myDataVolume:/dataVolumeContainer centos</p>\n</blockquote>\n<p>:ro   // 修改权限为只读模式</p>\n<p>映射文件夹下无法新建文件，且无法修改文件，形成单方向同步</p>\n<h2 id=\"dockerfile\"><a class=\"markdownIt-Anchor\" href=\"#dockerfile\">#</a> DockerFile：</h2>\n<p>对镜像源码的描述，编译文件</p>\n<p>提示错误：“docker build” requires exactly 1 argument.</p>\n<p>原因是因为（少了一个 ‘.’ ， ‘.’ 代表当前路径）</p>\n<p>[root@docker mydocker]# docker build -f /mydocker/DockerFile -t cs/centos .</p>\n<p>. 打包当前目录</p>\n<h3 id=\"数据卷容器\"><a class=\"markdownIt-Anchor\" href=\"#数据卷容器\">#</a> 数据卷容器：</h3>\n<p>容器间传递共享</p>\n<p>docker run -it --name dc01 cs/centos  // 父容器</p>\n<p>docker run -it --name dc02 --volumes-from dc01 cs/centos   // 子容器</p>\n<p>删除父容器 1，对 2，3 子容器不影响，干掉父容器 1，对 2，3 之间的数据共享也不影响</p>\n<h3 id=\"dockerfile-镜像构建文件\"><a class=\"markdownIt-Anchor\" href=\"#dockerfile-镜像构建文件\">#</a> DockerFile:  镜像构建文件</h3>\n<p>手动编写符合 file 规范的 dockerfile 文件</p>\n<p>docker build 命令执行，生成镜像</p>\n<p>docker run 执行</p>\n<h3 id=\"dockerfile-2\"><a class=\"markdownIt-Anchor\" href=\"#dockerfile-2\">#</a> dockerfile：</h3>\n<p>1，每条保留字指令都必须大写首字母，且保留字后不为空</p>\n<p>2，指令自上而下，顺序执行，# 表注释</p>\n<p>3，每条指令创建一个新的镜像层，并不断提交给镜像</p>\n<h3 id=\"docker执行dockerfile的大致流程\"><a class=\"markdownIt-Anchor\" href=\"#docker执行dockerfile的大致流程\">#</a> docker 执行 dockerfile 的大致流程：</h3>\n<p>1，docker 从基础镜像运行一个容器</p>\n<p>2，执行一条条指令，对容器进行修改</p>\n<p>3，执行 docker commit 提交新的镜像层，对镜像进行修改</p>\n<p>4，docker 基于新镜像在运行一个容器</p>\n<p>5，在依次类推，直到运行完所有指令</p>\n<h3 id=\"dockerfile保留字\"><a class=\"markdownIt-Anchor\" href=\"#dockerfile保留字\">#</a> dockerfile 保留字：</h3>\n<p>基础镜像</p>\n<p>作者说明</p>\n<p>执行命令</p>\n<p>指定对外暴露的端口</p>\n<p>进入终端的指定工作目录</p>\n<p>构建镜像中设置环境变量</p>\n<p>拷贝并解压缩某个压缩包</p>\n<p>与 add 功能相同，但不能解压缩</p>\n<p>自建容器卷</p>\n<p>指定容器启动时要运行的命令，只有最后一个 CMD 命令生效</p>\n<p>指定容器启动时要运行的命令，但不会覆盖之前的命令</p>\n<p>触发器</p>\n<h2 id=\"cmd和entrypoint区别\"><a class=\"markdownIt-Anchor\" href=\"#cmd和entrypoint区别\">#</a> CMD 和 ENTRYPOINT 区别：</h2>\n<p>CMD  run 命令后加参数覆盖之前的命令</p>\n<p>ENTRYPOINT  run 命令后的参数添加到命令里</p>\n",
            "tags": [
                "Docker"
            ]
        }
    ]
}