{
    "version": "https://jsonfeed.org/version/1",
    "title": "CsStar",
    "description": "Work Hard To Be A Better Man",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2020/09/15/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E5%90%8E%E4%B9%A0%E9%A2%98/",
            "url": "http://example.com/2020/09/15/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E5%90%8E%E4%B9%A0%E9%A2%98/",
            "title": "机器学习课后习题",
            "date_published": "2020-09-15T06:02:26.000Z",
            "content_html": "<h1 id=\"假设空间与版本空间\"><a class=\"markdownIt-Anchor\" href=\"#假设空间与版本空间\">#</a> 假设空间与版本空间</h1>\n<h2 id=\"概念\"><a class=\"markdownIt-Anchor\" href=\"#概念\">#</a> 概念</h2>\n<blockquote>\n<p>假设空间：所有可能取到的值组成的样本。</p>\n<p>版本空间：与给定正样本一致和与负样本不一致的假设子集集合。</p>\n</blockquote>\n<h2 id=\"计算\"><a class=\"markdownIt-Anchor\" href=\"#计算\">#</a> 计算</h2>\n<p>假设西瓜由青绿、乌黑、浅白三种颜色，同理，根蒂和敲声也由三种属性完全定义。求假设空间：</p>\n<blockquote>\n<p>假设空间大小：</p>\n<p>（3+1）✖（3+1）✖（3+1）+1 = 65</p>\n</blockquote>\n<p>（3+1）：就拿颜色来说，可能任意一种颜色都可以，其他属性也是一样。</p>\n<p>（+1）：世界上没有好瓜</p>\n<blockquote>\n<p>版本空间：根据给定的样本，从假设空间中<strong>剔除</strong>与正样本不一致，与负样本一致的假设。</p>\n</blockquote>\n<h1 id=\"模型评估与选择\"><a class=\"markdownIt-Anchor\" href=\"#模型评估与选择\">#</a> 模型评估与选择</h1>\n<h2 id=\"过拟合与欠拟合\"><a class=\"markdownIt-Anchor\" href=\"#过拟合与欠拟合\">#</a> 过拟合与欠拟合</h2>\n<blockquote>\n<ul>\n<li>过拟合：对训练样本的特征训练的太好了，导致泛化能力下降，对新样本的预测很差的现象。</li>\n<li>欠拟合：训练样本的特征不够，泛化能力太高了。比如模型可能训练出绿色是叶子的结论，那么对于一棵树，模型也将树判断为叶子。</li>\n</ul>\n</blockquote>\n<h2 id=\"评估方法\"><a class=\"markdownIt-Anchor\" href=\"#评估方法\">#</a> 评估方法</h2>\n<p><strong>通常用测试误差来近似模型的泛化误差。</strong></p>\n<h3 id=\"留出法hold-out\"><a class=\"markdownIt-Anchor\" href=\"#留出法hold-out\">#</a> 留出法（hold out）</h3>\n<p>留出法直接将数据集划分为两个互斥的部分，其中一部分用来做训练集，另一部分用来做测试集。通常训练集与测试集的比例为 7：3。</p>\n<blockquote>\n<p>注意：</p>\n<ol>\n<li>尽可能保持数据分布的一致性。通常采用 “分层采样” 的方法。</li>\n<li>采用若干次随机划分避免单次流出法的不稳定。</li>\n</ol>\n</blockquote>\n<h3 id=\"交叉验证法cross-validation\"><a class=\"markdownIt-Anchor\" href=\"#交叉验证法cross-validation\">#</a> 交叉验证法（cross validation)</h3>\n<p>交叉验证法先将数据集划分为 k 个大小相似的互斥子集，每次采用 k-1 个子集作为训练集，剩下的一个子集作为测试集。进行 k 次训练和测试，最终返回 k 个测试结果的均值。又称为 “k 折交叉验证”</p>\n<blockquote>\n<p>通常重复 p 次不同的划分，最终结果是 p 次 k 折交叉验证结果的均值。</p>\n</blockquote>\n<h3 id=\"留一法leave-one-outloo\"><a class=\"markdownIt-Anchor\" href=\"#留一法leave-one-outloo\">#</a> 留一法（leave-one-out，LOO）</h3>\n<p>留一法是交叉验证法的一种特殊情况，k = 样本数，即将样本分成一份一个样本，每次测试集只有一个样本。</p>\n<blockquote>\n<p>该方法的确定，计算的开销比较大。</p>\n</blockquote>\n<h3 id=\"自助法bootstrapping\"><a class=\"markdownIt-Anchor\" href=\"#自助法bootstrapping\">#</a> 自助法（bootstrapping）</h3>\n<p>自助法以自助采样为基础（有放回采样）。每次随机从数据集中挑选一个样本，放入另一个数据集合，然后将样本放回原数据中，重复操作 m 次，因此得到了一个含 m 个样本的数据集。</p>\n<blockquote>\n<p>样本在 m 次采样中始终不被采到的概率（1-1\\m）的 m 次方，当 m 足够大时，上述式子的极限约为 0.368。说明有 0.368 的样本不会出现在新的数据集中，新数据集中含有更多的数据，我们可以用来当作训练集，剩下的做测试集。</p>\n</blockquote>\n<ul>\n<li>优点：在数据集较小、难以有效划分训练和测试集的时候很有用。</li>\n<li>改变了初始数据集的分布，会引入估计偏差。</li>\n</ul>\n",
            "tags": [
                "机器学习"
            ]
        },
        {
            "id": "http://example.com/2020/09/13/Pandas-DataFrame/",
            "url": "http://example.com/2020/09/13/Pandas-DataFrame/",
            "title": "认识Pandas-DataFrame",
            "date_published": "2020-09-13T08:25:21.000Z",
            "content_html": "<h1 id=\"dataframe的创建\"><a class=\"markdownIt-Anchor\" href=\"#dataframe的创建\">#</a> DataFrame 的创建</h1>\n<h2 id=\"dataframe和series简介\"><a class=\"markdownIt-Anchor\" href=\"#dataframe和series简介\">#</a> DataFrame 和 Series 简介</h2>\n<p>DataFrame 是一种表格型的数据结构。DataFrame 既有行索引，也有列索引，它可以看作是由 Series 组成的字典，并且这些 Series 共用一个索引。创建方式有很多种，主要是根据 dict 进行创建，或者是读取 csv 或者 txt 文件。</p>\n<blockquote>\n<p><strong>Series</strong>：简单来说，就是一个竖着的 List，一般创建需要传入一个 List。</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\">s = pd.Series([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,np.nan])</span><br><span class=\"line\">print(s)      <span class=\"comment\"># 竖着的列表，其中np.nan为NaN，还包含默认的索引列</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>numpy 中不存在的值都会被赋值为 NaN</li>\n<li>默认索引列为数字（从 0 开始），也可以自定义索引列，在 Series 函数中添加 index 关键字，同时给一个自定义索引列表</li>\n</ul>\n</blockquote>\n<h2 id=\"根据字典创建\"><a class=\"markdownIt-Anchor\" href=\"#根据字典创建\">#</a> 根据字典创建</h2>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data = &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;name&#x27;</span>:[<span class=\"string\">&#x27;csstar&#x27;</span>,<span class=\"string\">&#x27;jackson&#x27;</span>,<span class=\"string\">&#x27;tom&#x27;</span>,<span class=\"string\">&#x27;jerry&#x27;</span>,<span class=\"string\">&#x27;yummy&#x27;</span>],</span><br><span class=\"line\">    <span class=\"string\">&#x27;year&#x27;</span>:[<span class=\"number\">2000</span>,<span class=\"number\">2001</span>,<span class=\"number\">2008</span>,<span class=\"number\">2010</span>,<span class=\"number\">2020</span>],</span><br><span class=\"line\">    <span class=\"string\">&#x27;sex&#x27;</span>:[<span class=\"string\">&#x27;m&#x27;</span>,<span class=\"string\">&#x27;m&#x27;</span>,<span class=\"string\">&#x27;m&#x27;</span>,<span class=\"string\">&#x27;w&#x27;</span>,<span class=\"string\">&#x27;w&#x27;</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\"># 得到了DataFrame对象，包含默认索引列</span></span><br><span class=\"line\">frame = pd.DataFrame(data)  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># index是行索引--&gt;对应行  columns是列索引--&gt;对应列</span></span><br><span class=\"line\">frame2 = pd.DataFrame(data,index=[<span class=\"string\">&#x27;one&#x27;</span>,<span class=\"string\">&#x27;two&#x27;</span>,<span class=\"string\">&#x27;three&#x27;</span>,<span class=\"string\">&#x27;four&#x27;</span>,<span class=\"string\">&#x27;five&#x27;</span>],columns=[<span class=\"string\">&#x27;name&#x27;</span>,<span class=\"string\">&#x27;sex&#x27;</span>,<span class=\"string\">&#x27;year&#x27;</span>])</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>如果 columns 中出现了没有定义的列，那么该列的数据都为 NaN</li>\n<li>可以用 index，columns，values 来访问 DataFrame 的行索引，列索引以及数据值，数据返回的是一个<strong>二维数组</strong>。</li>\n</ul>\n</blockquote>\n<h2 id=\"读取文件的方式创建\"><a class=\"markdownIt-Anchor\" href=\"#读取文件的方式创建\">#</a> 读取文件的方式创建</h2>\n<p>读取文件生成 DataFrame 最常用的是<strong> read_csv,read_table</strong> 方法</p>\n<p><img data-src=\"D:/FirstBlog/source/_posts/%E8%AE%A4%E8%AF%86Pandas-DataFrame.assets/image-20200913170309272.png\" alt=\"image-20200913170309272\"></p>\n<p>还有一些其他的 DataFrame 创建方式，比如说可以通过读取 mysql 或者 mongoDB，读取 json 文件等方式来生成 DataFrame 对象。</p>\n<h1 id=\"dataframe轴的概念\"><a class=\"markdownIt-Anchor\" href=\"#dataframe轴的概念\">#</a> DataFrame 轴的概念</h1>\n<p>在 DataFrame 的处理中经常会遇到轴的概念，我们所说的 axis=0 即表示沿着每一列或者行标签 / 索引值向下执行的，axis = 1 即表示沿着每一行或者列标签方向执行对应的方法</p>\n<h1 id=\"dataframe的性质\"><a class=\"markdownIt-Anchor\" href=\"#dataframe的性质\">#</a> DataFrame 的性质</h1>\n<h2 id=\"索引-切片\"><a class=\"markdownIt-Anchor\" href=\"#索引-切片\">#</a> 索引、切片</h2>\n<p>根据列的名字获取一列，返回的是一个 Series</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">frame[<span class=\"string\">&#x27;列索引的名字&#x27;</span>]</span><br></pre></td></tr></table></figure>\n<p>获取多列或者多行</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data = pd.DataFrame(np.arange(<span class=\"number\">16</span>).reshape((<span class=\"number\">4</span>,<span class=\"number\">4</span>)),index = [<span class=\"string\">&#x27;Ohio&#x27;</span>,<span class=\"string\">&#x27;Colorado&#x27;</span>,<span class=\"string\">&#x27;Utah&#x27;</span>,<span class=\"string\">&#x27;New York&#x27;</span>],columns=[<span class=\"string\">&#x27;one&#x27;</span>,<span class=\"string\">&#x27;two&#x27;</span>,<span class=\"string\">&#x27;three&#x27;</span>,<span class=\"string\">&#x27;four&#x27;</span>])</span><br><span class=\"line\">data[[<span class=\"string\">&#x27;two&#x27;</span>,<span class=\"string\">&#x27;three&#x27;</span>]]</span><br><span class=\"line\"><span class=\"comment\">#输出</span></span><br><span class=\"line\">    two three</span><br><span class=\"line\">Ohio    <span class=\"number\">1</span>   <span class=\"number\">2</span></span><br><span class=\"line\">Colorado    <span class=\"number\">5</span>   <span class=\"number\">6</span></span><br><span class=\"line\">Utah    <span class=\"number\">9</span>   <span class=\"number\">10</span></span><br><span class=\"line\">New York    <span class=\"number\">13</span>  <span class=\"number\">14</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#取行</span></span><br><span class=\"line\">data[:<span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"comment\">#输出</span></span><br><span class=\"line\">    one two three   four</span><br><span class=\"line\">Ohio    <span class=\"number\">0</span>   <span class=\"number\">1</span>   <span class=\"number\">2</span>   <span class=\"number\">3</span></span><br><span class=\"line\">Colorado    <span class=\"number\">4</span>   <span class=\"number\">5</span>   <span class=\"number\">6</span>   <span class=\"number\">7</span></span><br></pre></td></tr></table></figure>\n<p>根据逻辑条件来选取</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data[data[<span class=\"string\">&#x27;three&#x27;</span>]&gt;<span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"comment\">#输出</span></span><br><span class=\"line\">    one two three   four</span><br><span class=\"line\">Colorado    <span class=\"number\">4</span>   <span class=\"number\">5</span>   <span class=\"number\">6</span>   <span class=\"number\">7</span></span><br><span class=\"line\">Utah    <span class=\"number\">8</span>   <span class=\"number\">9</span>   <span class=\"number\">10</span>  <span class=\"number\">11</span></span><br><span class=\"line\">New York    <span class=\"number\">12</span>  <span class=\"number\">13</span>  <span class=\"number\">14</span>  <span class=\"number\">15</span></span><br></pre></td></tr></table></figure>\n<p>专门用于索引的方法，如果用标签 —&gt;loc 方法，如果用下标 —&gt;iloc 方法</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#data.ix[&#x27;Colorado&#x27;,[&#x27;two&#x27;,&#x27;three&#x27;]]</span></span><br><span class=\"line\">data.loc[<span class=\"string\">&#x27;Colorado&#x27;</span>,[<span class=\"string\">&#x27;two&#x27;</span>,<span class=\"string\">&#x27;three&#x27;</span>]]</span><br><span class=\"line\"><span class=\"comment\">#输出</span></span><br><span class=\"line\">two      <span class=\"number\">5</span></span><br><span class=\"line\">three    <span class=\"number\">6</span></span><br><span class=\"line\">Name: Colorado, dtype: int64</span><br><span class=\"line\"></span><br><span class=\"line\">data.iloc[<span class=\"number\">0</span>:<span class=\"number\">3</span>,<span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"comment\">#输出</span></span><br><span class=\"line\">Ohio         <span class=\"number\">2</span></span><br><span class=\"line\">Colorado     <span class=\"number\">6</span></span><br><span class=\"line\">Utah        <span class=\"number\">10</span></span><br><span class=\"line\">Name: three, dtype: int64</span><br></pre></td></tr></table></figure>\n<h2 id=\"修改数据\"><a class=\"markdownIt-Anchor\" href=\"#修改数据\">#</a> 修改数据</h2>\n<p>使用标量修改某一列</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">frame[<span class=\"string\">&#x27;debt&#x27;</span>]=<span class=\"number\">16.5</span></span><br><span class=\"line\">frame <span class=\"comment\"># debt列全部数据为16.5</span></span><br></pre></td></tr></table></figure>\n<p>使用一个列表来修改，不过要保证列表的长度与 DataFrame 长度相同：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">frame.debt = np.arange(<span class=\"number\">5</span>)</span><br></pre></td></tr></table></figure>\n<p>使用一个 Series，此时会根据索引来进行精确匹配</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">val=pd.Series([<span class=\"number\">-1.2</span>,<span class=\"number\">-1.5</span>,<span class=\"number\">-1.7</span>],index[<span class=\"string\">&#x27;two&#x27;</span>,<span class=\"string\">&#x27;four&#x27;</span>,<span class=\"string\">&#x27;five&#x27;</span>])</span><br><span class=\"line\">frame[<span class=\"string\">&#x27;debt&#x27;</span>] = val  <span class=\"comment\">#定义一个三个数据的Series来代替指定index行的值，从而实现精确定位并修改</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"重新索引\"><a class=\"markdownIt-Anchor\" href=\"#重新索引\">#</a> 重新索引</h2>\n<p>使用 reinex 方法对 DataFrame 进行重新索引，可以重新索引行或 i 列，或者两者都索引，只穿一个参数的情况下，会重新索引行。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">frame = pd.DataFrame(np.arange(<span class=\"number\">9</span>).reshape((<span class=\"number\">3</span>,<span class=\"number\">3</span>)),index=[<span class=\"number\">1</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>],columns=[<span class=\"string\">&#x27;Ohio&#x27;</span>,<span class=\"string\">&#x27;Texas&#x27;</span>,<span class=\"string\">&#x27;California&#x27;</span>])</span><br><span class=\"line\">frame2 = frame.reindex([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>])</span><br><span class=\"line\">frame2</span><br><span class=\"line\"><span class=\"comment\">#输出</span></span><br><span class=\"line\">    Ohio    Texas   California</span><br><span class=\"line\"><span class=\"number\">1</span>   <span class=\"number\">0.0</span> <span class=\"number\">1.0</span> <span class=\"number\">2.0</span></span><br><span class=\"line\"><span class=\"number\">2</span>   NaN NaN NaN</span><br><span class=\"line\"><span class=\"number\">4</span>   <span class=\"number\">3.0</span> <span class=\"number\">4.0</span> <span class=\"number\">5.0</span></span><br><span class=\"line\"><span class=\"number\">5</span>   <span class=\"number\">6.0</span> <span class=\"number\">7.0</span> <span class=\"number\">8.0</span></span><br><span class=\"line\"></span><br><span class=\"line\">states = [<span class=\"string\">&#x27;Texas&#x27;</span>,<span class=\"string\">&#x27;Utah&#x27;</span>,<span class=\"string\">&#x27;California&#x27;</span>]</span><br><span class=\"line\">frame.reindex(columns=states)</span><br><span class=\"line\"><span class=\"comment\">#输出</span></span><br><span class=\"line\">    Texas   Utah    California</span><br><span class=\"line\"><span class=\"number\">1</span>   <span class=\"number\">1</span>   NaN <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">4</span>   <span class=\"number\">4</span>   NaN <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"number\">5</span>   <span class=\"number\">7</span>   NaN <span class=\"number\">8</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"丢弃指定轴上的值\"><a class=\"markdownIt-Anchor\" href=\"#丢弃指定轴上的值\">#</a> 丢弃指定轴上的值</h2>\n<p>使用 drop 方法丢弃指定轴上的值，不会对 DataFrame 造成影响</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">frame = pd.DataFrame(np.arange(<span class=\"number\">9</span>).reshape((<span class=\"number\">3</span>,<span class=\"number\">3</span>)),index = [<span class=\"string\">&#x27;a&#x27;</span>,<span class=\"string\">&#x27;c&#x27;</span>,<span class=\"string\">&#x27;d&#x27;</span>],columns = [<span class=\"string\">&#x27;Ohio&#x27;</span>,<span class=\"string\">&#x27;Texas&#x27;</span>,<span class=\"string\">&#x27;California&#x27;</span>])</span><br><span class=\"line\">frame.drop(<span class=\"string\">&#x27;a&#x27;</span>) </span><br><span class=\"line\"><span class=\"comment\">#输出</span></span><br><span class=\"line\">Ohio    Texas   California</span><br><span class=\"line\">a   <span class=\"number\">0</span>   <span class=\"number\">1</span>   <span class=\"number\">2</span></span><br><span class=\"line\">c   <span class=\"number\">3</span>   <span class=\"number\">4</span>   <span class=\"number\">5</span></span><br><span class=\"line\">d   <span class=\"number\">6</span>   <span class=\"number\">7</span>   <span class=\"number\">8</span></span><br><span class=\"line\"></span><br><span class=\"line\">frame.drop([<span class=\"string\">&#x27;Ohio&#x27;</span>],axis=<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"comment\">#输出</span></span><br><span class=\"line\">    Texas   California</span><br><span class=\"line\">a   <span class=\"number\">1</span>   <span class=\"number\">2</span></span><br><span class=\"line\">c   <span class=\"number\">4</span>   <span class=\"number\">5</span></span><br><span class=\"line\">d   <span class=\"number\">7</span>   <span class=\"number\">8</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"算术运算\"><a class=\"markdownIt-Anchor\" href=\"#算术运算\">#</a> 算术运算</h2>\n<p>DataFrame 在进行算数运算时会进行补齐，在不重叠的部分补足 NA：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df1 = pd.DataFrame(np.arange(<span class=\"number\">9</span>).reshape((<span class=\"number\">3</span>,<span class=\"number\">3</span>)),columns=list(<span class=\"string\">&#x27;bcd&#x27;</span>),index=[<span class=\"string\">&#x27;Ohio&#x27;</span>,<span class=\"string\">&#x27;Texas&#x27;</span>,<span class=\"string\">&#x27;Colorado&#x27;</span>])</span><br><span class=\"line\">df2 = pd.DataFrame(np.arange(<span class=\"number\">12</span>).reshape((<span class=\"number\">4</span>,<span class=\"number\">3</span>)),columns = list(<span class=\"string\">&#x27;bde&#x27;</span>),index=[<span class=\"string\">&#x27;Utah&#x27;</span>,<span class=\"string\">&#x27;Ohio&#x27;</span>,<span class=\"string\">&#x27;Texas&#x27;</span>,<span class=\"string\">&#x27;Oregon&#x27;</span>])</span><br><span class=\"line\">df1 + df2</span><br><span class=\"line\"><span class=\"comment\">#输出</span></span><br><span class=\"line\">    b   c   d   e</span><br><span class=\"line\">Colorado    NaN NaN NaN NaN</span><br><span class=\"line\">Ohio    <span class=\"number\">3.0</span> NaN <span class=\"number\">6.0</span> NaN</span><br><span class=\"line\">Oregon  NaN NaN NaN NaN</span><br><span class=\"line\">Texas   <span class=\"number\">9.0</span> NaN <span class=\"number\">12.0</span>    NaN</span><br><span class=\"line\">Utah    NaN NaN NaN NaN</span><br></pre></td></tr></table></figure>\n<p>可以使用 fill_value 方法填充 NA 数据，不过两个 df 都为 NA 的数据，该方法不会填充：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df1.add(df2,fill_value=<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"comment\">#输出</span></span><br><span class=\"line\">    b   c   d   e</span><br><span class=\"line\">Colorado    <span class=\"number\">6.0</span> <span class=\"number\">7.0</span> <span class=\"number\">8.0</span> NaN</span><br><span class=\"line\">Ohio    <span class=\"number\">3.0</span> <span class=\"number\">1.0</span> <span class=\"number\">6.0</span> <span class=\"number\">5.0</span></span><br><span class=\"line\">Oregon  <span class=\"number\">9.0</span> NaN <span class=\"number\">10.0</span>    <span class=\"number\">11.0</span></span><br><span class=\"line\">Texas   <span class=\"number\">9.0</span> <span class=\"number\">4.0</span> <span class=\"number\">12.0</span>    <span class=\"number\">8.0</span></span><br><span class=\"line\">Utah    <span class=\"number\">0.0</span> NaN <span class=\"number\">1.0</span> <span class=\"number\">2.0</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"函数应用与映射\"><a class=\"markdownIt-Anchor\" href=\"#函数应用与映射\">#</a> 函数应用与映射</h2>\n<p>numpy 的元素级数组方法，也可以用于操作 Pandas 对象：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">frame = pd.DataFrame(np.random.randn(<span class=\"number\">3</span>,<span class=\"number\">3</span>),columns=list(<span class=\"string\">&#x27;bcd&#x27;</span>),index=[<span class=\"string\">&#x27;Ohio&#x27;</span>,<span class=\"string\">&#x27;Texas&#x27;</span>,<span class=\"string\">&#x27;Colorado&#x27;</span>])</span><br><span class=\"line\">np.abs(frame)</span><br><span class=\"line\"><span class=\"comment\">#输出</span></span><br><span class=\"line\">    b   c   d</span><br><span class=\"line\">Ohio    <span class=\"number\">0.367521</span>    <span class=\"number\">0.232387</span>    <span class=\"number\">0.649330</span></span><br><span class=\"line\">Texas   <span class=\"number\">3.115632</span>    <span class=\"number\">1.415106</span>    <span class=\"number\">2.093794</span></span><br><span class=\"line\">Colorado    <span class=\"number\">0.714983</span>    <span class=\"number\">1.420871</span>    <span class=\"number\">0.557722</span></span><br></pre></td></tr></table></figure>\n<p>另一个常见的操作是，将函数应用到各列或行所形成的一维数组上。DataFrame 的 apply 方法即可实现此功能。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f = <span class=\"keyword\">lambda</span> x:x.max() - x.min()</span><br><span class=\"line\">frame.apply(f)</span><br><span class=\"line\"><span class=\"comment\">#输出</span></span><br><span class=\"line\">b    <span class=\"number\">3.830616</span></span><br><span class=\"line\">c    <span class=\"number\">2.835978</span></span><br><span class=\"line\">d    <span class=\"number\">2.743124</span></span><br><span class=\"line\">dtype: float64</span><br><span class=\"line\"></span><br><span class=\"line\">frame.apply(f,axis=<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"comment\">#输出</span></span><br><span class=\"line\">Ohio        <span class=\"number\">1.016851</span></span><br><span class=\"line\">Texas       <span class=\"number\">4.530739</span></span><br><span class=\"line\">Colorado    <span class=\"number\">2.135855</span></span><br><span class=\"line\">dtype: float64</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f</span>(<span class=\"params\">x</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> pd.Series([x.min(),x.max()],index=[<span class=\"string\">&#x27;min&#x27;</span>,<span class=\"string\">&#x27;max&#x27;</span>])</span><br><span class=\"line\">frame.apply(f)</span><br><span class=\"line\"><span class=\"comment\">#输出</span></span><br><span class=\"line\">    b   c   d</span><br><span class=\"line\">min <span class=\"number\">-0.714983</span>   <span class=\"number\">-1.415106</span>   <span class=\"number\">-0.649330</span></span><br><span class=\"line\">max <span class=\"number\">3.115632</span>    <span class=\"number\">1.420871</span>    <span class=\"number\">2.093794</span></span><br></pre></td></tr></table></figure>\n<p>元素级的 Python 函数也是可以用的，使用 applymap 方法：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">format = <span class=\"keyword\">lambda</span> x:<span class=\"string\">&#x27;%.2f&#x27;</span>%x</span><br><span class=\"line\">frame.applymap(format)</span><br><span class=\"line\"><span class=\"comment\">#输出</span></span><br><span class=\"line\">b   c   d</span><br><span class=\"line\">Ohio    <span class=\"number\">0.37</span>    <span class=\"number\">-0.23</span>   <span class=\"number\">-0.65</span></span><br><span class=\"line\">Texas   <span class=\"number\">3.12</span>    <span class=\"number\">-1.42</span>   <span class=\"number\">2.09</span></span><br><span class=\"line\">Colorado    <span class=\"number\">-0.71</span>   <span class=\"number\">1.42</span>    <span class=\"number\">-0.56</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"排序与排名\"><a class=\"markdownIt-Anchor\" href=\"#排序与排名\">#</a> 排序与排名</h2>\n<p>对于 DataFrame，sort_index 可以根据任意轴的排序，并指定升序降序</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">frame = pd.DataFrame(np.arange(<span class=\"number\">8</span>).reshape((<span class=\"number\">2</span>,<span class=\"number\">4</span>)),index=[<span class=\"string\">&#x27;three&#x27;</span>,<span class=\"string\">&#x27;one&#x27;</span>],columns=[<span class=\"string\">&#x27;d&#x27;</span>,<span class=\"string\">&#x27;a&#x27;</span>,<span class=\"string\">&#x27;b&#x27;</span>,<span class=\"string\">&#x27;c&#x27;</span>])</span><br><span class=\"line\">frame.sort_index()</span><br><span class=\"line\"><span class=\"comment\">#输出</span></span><br><span class=\"line\">    d   a   b   c</span><br><span class=\"line\">one <span class=\"number\">4</span>   <span class=\"number\">5</span>   <span class=\"number\">6</span>   <span class=\"number\">7</span></span><br><span class=\"line\">three   <span class=\"number\">0</span>   <span class=\"number\">1</span>   <span class=\"number\">2</span>   <span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\">frame.sort_index(<span class=\"number\">1</span>,ascending=<span class=\"literal\">False</span>)</span><br><span class=\"line\"><span class=\"comment\">#输出</span></span><br><span class=\"line\">    d   a   b   c</span><br><span class=\"line\">one <span class=\"number\">4</span>   <span class=\"number\">5</span>   <span class=\"number\">6</span>   <span class=\"number\">7</span></span><br><span class=\"line\">three   <span class=\"number\">0</span>   <span class=\"number\">1</span>   <span class=\"number\">2</span>   <span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n<p>DataFrame 也可以按照值进行排序：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#按照任意一列或多列进行排序</span></span><br><span class=\"line\">frame.sort_values(by=[<span class=\"string\">&#x27;a&#x27;</span>,<span class=\"string\">&#x27;b&#x27;</span>])</span><br><span class=\"line\"><span class=\"comment\">#输出</span></span><br><span class=\"line\">    d   a   b   c</span><br><span class=\"line\">three   <span class=\"number\">0</span>   <span class=\"number\">1</span>   <span class=\"number\">2</span>   <span class=\"number\">3</span></span><br><span class=\"line\">one <span class=\"number\">4</span>   <span class=\"number\">5</span>   <span class=\"number\">6</span>   <span class=\"number\">7</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"汇总和计算描述统计\"><a class=\"markdownIt-Anchor\" href=\"#汇总和计算描述统计\">#</a> 汇总和计算描述统计</h2>\n<p>DataFrame 中实现了 sum、mean、max 等方法，我们可以指定进行汇总统计的轴，同时，也可以使用 describe 函数查看基本所有的统计项：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df = pd.DataFrame([[<span class=\"number\">1.4</span>,np.nan],[<span class=\"number\">7.1</span>,<span class=\"number\">-4.5</span>],[np.nan,np.nan],[<span class=\"number\">0.75</span>,<span class=\"number\">-1.3</span>]],index=[<span class=\"string\">&#x27;a&#x27;</span>,<span class=\"string\">&#x27;b&#x27;</span>,<span class=\"string\">&#x27;c&#x27;</span>,<span class=\"string\">&#x27;d&#x27;</span>],columns=[<span class=\"string\">&#x27;one&#x27;</span>,<span class=\"string\">&#x27;two&#x27;</span>])</span><br><span class=\"line\">df.sum(axis=<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"comment\">#输出</span></span><br><span class=\"line\">one    <span class=\"number\">9.25</span></span><br><span class=\"line\">two   <span class=\"number\">-5.80</span></span><br><span class=\"line\">dtype: float64</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#Na会被自动排除，可以使用skipna选项来禁用该功能</span></span><br><span class=\"line\">df.mean(axis=<span class=\"number\">1</span>,skipna=<span class=\"literal\">False</span>)</span><br><span class=\"line\"><span class=\"comment\">#输出</span></span><br><span class=\"line\">a      NaN</span><br><span class=\"line\">b    <span class=\"number\">1.300</span></span><br><span class=\"line\">c      NaN</span><br><span class=\"line\">d   <span class=\"number\">-0.275</span></span><br><span class=\"line\">dtype: float64</span><br><span class=\"line\"><span class=\"comment\">#idxmax返回间接统计，是达到最大值的索引</span></span><br><span class=\"line\"></span><br><span class=\"line\">df.idxmax()</span><br><span class=\"line\"><span class=\"comment\">#输出</span></span><br><span class=\"line\">one    b</span><br><span class=\"line\">two    d</span><br><span class=\"line\">dtype: object</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#describe返回的是DataFrame的汇总统计</span></span><br><span class=\"line\"><span class=\"comment\">#非数值型的与数值型的统计返回结果不同</span></span><br><span class=\"line\">df.describe()</span><br><span class=\"line\"><span class=\"comment\">#输出</span></span><br><span class=\"line\">one two</span><br><span class=\"line\">count   <span class=\"number\">3.000000</span>    <span class=\"number\">2.000000</span></span><br><span class=\"line\">mean    <span class=\"number\">3.083333</span>    <span class=\"number\">-2.900000</span></span><br><span class=\"line\">std <span class=\"number\">3.493685</span>    <span class=\"number\">2.262742</span></span><br><span class=\"line\">min <span class=\"number\">0.750000</span>    <span class=\"number\">-4.500000</span></span><br><span class=\"line\"><span class=\"number\">25</span>% <span class=\"number\">1.075000</span>    <span class=\"number\">-3.700000</span></span><br><span class=\"line\"><span class=\"number\">50</span>% <span class=\"number\">1.400000</span>    <span class=\"number\">-2.900000</span></span><br><span class=\"line\"><span class=\"number\">75</span>% <span class=\"number\">4.250000</span>    <span class=\"number\">-2.100000</span></span><br><span class=\"line\">max <span class=\"number\">7.100000</span>    <span class=\"number\">-1.300000</span></span><br></pre></td></tr></table></figure>\n<p>DataFrame 也实现了 corr 和 cov 方法来计算一个 DataFrame 的相关系数矩阵和协方差矩阵，同时 DataFrame 也可以与 Series 求解相关的系数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">frame1 = pd.DataFrame(np.random.randn(<span class=\"number\">3</span>,<span class=\"number\">3</span>),index=list(<span class=\"string\">&#x27;abc&#x27;</span>),columns=list(<span class=\"string\">&#x27;abc&#x27;</span>))</span><br><span class=\"line\">frame1.corr</span><br><span class=\"line\"><span class=\"comment\">#输出</span></span><br><span class=\"line\">&lt;bound method DataFrame.corr of           a         b         c</span><br><span class=\"line\">a  <span class=\"number\">1.253773</span>  <span class=\"number\">0.429059</span>  <span class=\"number\">1.535575</span></span><br><span class=\"line\">b <span class=\"number\">-0.113987</span> <span class=\"number\">-2.837396</span> <span class=\"number\">-0.894469</span></span><br><span class=\"line\">c <span class=\"number\">-0.548208</span>  <span class=\"number\">0.834003</span>  <span class=\"number\">0.994863</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">frame1.cov()</span><br><span class=\"line\"><span class=\"comment\">#输出</span></span><br><span class=\"line\">a   b   c</span><br><span class=\"line\">a   <span class=\"number\">0.884409</span>    <span class=\"number\">0.357304</span>    <span class=\"number\">0.579613</span></span><br><span class=\"line\">b   <span class=\"number\">0.357304</span>    <span class=\"number\">4.052147</span>    <span class=\"number\">2.442527</span></span><br><span class=\"line\">c   <span class=\"number\">0.579613</span>    <span class=\"number\">2.442527</span>    <span class=\"number\">1.627843</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#corrwith用于计算每一列与Series的相关系数</span></span><br><span class=\"line\">frame1.corrwith(frame1[<span class=\"string\">&#x27;a&#x27;</span>])</span><br><span class=\"line\"><span class=\"comment\">#输出</span></span><br><span class=\"line\">a    <span class=\"number\">1.000000</span></span><br><span class=\"line\">b    <span class=\"number\">0.188742</span></span><br><span class=\"line\">c    <span class=\"number\">0.483065</span></span><br><span class=\"line\">dtype: float64</span><br></pre></td></tr></table></figure>\n<h2 id=\"处理缺失数据\"><a class=\"markdownIt-Anchor\" href=\"#处理缺失数据\">#</a> 处理缺失数据</h2>\n<p>Pandas 中缺失值相关的方法主要有以下三个：</p>\n<ul>\n<li>isnull 方法用于判断数据是否为空数据</li>\n<li>fillna 方法用于填补缺失数据</li>\n<li>dropna 方法用于舍弃缺失数据</li>\n</ul>\n<p>上面两个方法返回一个新的 Series 或者 DataFrame，对原数据没有影响，如果想在原数据上进行直接修改，使用 inplace 参数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data = pd.DataFrame([[<span class=\"number\">1</span>,<span class=\"number\">6.5</span>,<span class=\"number\">3</span>],[<span class=\"number\">1</span>,np.nan,np.nan],[np.nan,np.nan,np.nan],[np.nan,<span class=\"number\">6.5</span>,<span class=\"number\">3</span>]])</span><br><span class=\"line\">data.dropna()</span><br><span class=\"line\"><span class=\"comment\">#输出</span></span><br><span class=\"line\">    <span class=\"number\">0</span>   <span class=\"number\">1</span>   <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">0</span>   <span class=\"number\">1.0</span> <span class=\"number\">6.5</span> <span class=\"number\">3.0</span></span><br></pre></td></tr></table></figure>\n<p>对 DataFrame 来说，dropna 方法如果发现缺失值，就会进行整个数据行的删除，不过可以指定删除的方式，how=all，是当整个全是 na 的时候才可以进行删除，同时还可以指定删除的轴。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data.dropna(how=<span class=\"string\">&#x27;all&#x27;</span>,axis=<span class=\"number\">1</span>,inplace=<span class=\"literal\">True</span>)</span><br><span class=\"line\">data</span><br><span class=\"line\"><span class=\"comment\">#输出</span></span><br><span class=\"line\"><span class=\"number\">0</span>   <span class=\"number\">1</span>   <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">0</span>   <span class=\"number\">1.0</span> <span class=\"number\">6.5</span> <span class=\"number\">3.0</span></span><br><span class=\"line\"><span class=\"number\">1</span>   <span class=\"number\">1.0</span> NaN NaN</span><br><span class=\"line\"><span class=\"number\">2</span>   NaN NaN NaN</span><br><span class=\"line\"><span class=\"number\">3</span>   NaN <span class=\"number\">6.5</span> <span class=\"number\">3.0</span></span><br></pre></td></tr></table></figure>\n<p>DataFrame 填充缺失值可以统一填充，也可以按列填充，或者指定一种填充方式：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data.fillna(&#123;<span class=\"number\">1</span>:<span class=\"number\">2</span>,<span class=\"number\">2</span>:<span class=\"number\">3</span>&#125;)</span><br><span class=\"line\"><span class=\"comment\">#输出</span></span><br><span class=\"line\"><span class=\"number\">0</span>   <span class=\"number\">1</span>   <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">0</span>   <span class=\"number\">1.0</span> <span class=\"number\">6.5</span> <span class=\"number\">3.0</span></span><br><span class=\"line\"><span class=\"number\">1</span>   <span class=\"number\">1.0</span> <span class=\"number\">2.0</span> <span class=\"number\">3.0</span></span><br><span class=\"line\"><span class=\"number\">2</span>   NaN <span class=\"number\">2.0</span> <span class=\"number\">3.0</span></span><br><span class=\"line\"><span class=\"number\">3</span>   NaN <span class=\"number\">6.5</span> <span class=\"number\">3.0</span></span><br><span class=\"line\"></span><br><span class=\"line\">data.fillna(method=<span class=\"string\">&#x27;ffill&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">#输出</span></span><br><span class=\"line\"><span class=\"number\">0</span>   <span class=\"number\">1</span>   <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">0</span>   <span class=\"number\">1.0</span> <span class=\"number\">6.5</span> <span class=\"number\">3.0</span></span><br><span class=\"line\"><span class=\"number\">1</span>   <span class=\"number\">1.0</span> <span class=\"number\">6.5</span> <span class=\"number\">3.0</span></span><br><span class=\"line\"><span class=\"number\">2</span>   <span class=\"number\">1.0</span> <span class=\"number\">6.5</span> <span class=\"number\">3.0</span></span><br><span class=\"line\"><span class=\"number\">3</span>   <span class=\"number\">1.0</span> <span class=\"number\">6.5</span> <span class=\"number\">3.0</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"数据转换的一个实例\"><a class=\"markdownIt-Anchor\" href=\"#数据转换的一个实例\">#</a> 数据转换的一个实例</h1>\n<p>通过 tushare 接口返回的数据就是一个 DataFrame 格式的数据，我们通过 pandas 里的 DataFrame 来获取特定的几列来绘制 K 线。最基础的 K 线需要的数据格式是横轴一般为时间组成的列表，纵轴为以列表为对象的列表，格式为 [[],[],[]…[] ]。主要是通过 tolist () 函数来将 DataFrame 对象或者 Series 转换成列表格式，从而符合绘制曲线的数据格式要求。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> tushare <span class=\"keyword\">as</span> ts</span><br><span class=\"line\"><span class=\"keyword\">from</span> pandas <span class=\"keyword\">import</span> DataFrame</span><br><span class=\"line\"><span class=\"keyword\">from</span> pyecharts.charts <span class=\"keyword\">import</span> Kline</span><br><span class=\"line\"><span class=\"keyword\">from</span> pyecharts <span class=\"keyword\">import</span> options <span class=\"keyword\">as</span> opts</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 通过get_hist_data()函数直接获取到大盘参数---暂时认为接口返回的数据是json格式</span></span><br><span class=\"line\">data = ts.get_hist_data(<span class=\"string\">&#x27;600519&#x27;</span>,start=<span class=\"string\">&#x27;2020-09-01&#x27;</span>,ktype=<span class=\"string\">&#x27;D&#x27;</span>)</span><br><span class=\"line\">data2 = data.sort_index(ascending=<span class=\"literal\">True</span>)     <span class=\"comment\">#升序</span></span><br><span class=\"line\">print(data2)        <span class=\"comment\"># 打印返回数据</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># df.open 和df[&#x27;open&#x27;]返回值是一样的</span></span><br><span class=\"line\">df = DataFrame(data2,columns=[<span class=\"string\">&#x27;open&#x27;</span>,<span class=\"string\">&#x27;high&#x27;</span>,<span class=\"string\">&#x27;close&#x27;</span>,<span class=\"string\">&#x27;low&#x27;</span>])</span><br><span class=\"line\">print(df)               <span class=\"comment\"># 从data2大的表结构数据中抽出columns中的这几列</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将数据转换成列表-----&gt;K线所需要的数据类型</span></span><br><span class=\"line\">dfList = df.values.tolist()</span><br><span class=\"line\">print(dfList)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 选中指定列df[&#x27;列的名字&#x27;]</span></span><br><span class=\"line\">print(df[<span class=\"string\">&#x27;open&#x27;</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取行索引</span></span><br><span class=\"line\">print(df.index)</span><br><span class=\"line\"><span class=\"comment\"># Index([&#x27;2020-09-01&#x27;, &#x27;2020-09-02&#x27;, &#x27;2020-09-03&#x27;, &#x27;2020-09-04&#x27;, &#x27;2020-09-07&#x27;,</span></span><br><span class=\"line\"><span class=\"comment\">#        &#x27;2020-09-08&#x27;, &#x27;2020-09-09&#x27;, &#x27;2020-09-10&#x27;, &#x27;2020-09-11&#x27;],</span></span><br><span class=\"line\"><span class=\"comment\">#       dtype=&#x27;object&#x27;, name=&#x27;date&#x27;)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将索引---&gt;此处为date转换成列表</span></span><br><span class=\"line\">date = df.index.tolist()</span><br><span class=\"line\">print(df.index.tolist())</span><br><span class=\"line\"><span class=\"comment\"># [&#x27;2020-09-01&#x27;, &#x27;2020-09-02&#x27;, &#x27;2020-09-03&#x27;, &#x27;2020-09-04&#x27;, &#x27;2020-09-07&#x27;, &#x27;2020-09-08&#x27;, &#x27;2020-09-09&#x27;, &#x27;2020-09-10&#x27;, &#x27;2020-09-11&#x27;]</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取列索引</span></span><br><span class=\"line\">print(df.columns)</span><br><span class=\"line\"><span class=\"comment\"># Index([&#x27;open&#x27;, &#x27;high&#x27;, &#x27;close&#x27;, &#x27;low&#x27;], dtype=&#x27;object&#x27;)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 通过行索引索取指定的行数据</span></span><br><span class=\"line\">print(df.loc[<span class=\"string\">&#x27;2020-09-01&#x27;</span>])</span><br><span class=\"line\"><span class=\"comment\"># 将series列数据转换为列表</span></span><br><span class=\"line\">print(df.loc[<span class=\"string\">&#x27;2020-09-01&#x27;</span>].tolist())</span><br><span class=\"line\"><span class=\"comment\"># open     1792.00</span></span><br><span class=\"line\"><span class=\"comment\"># high     1802.00</span></span><br><span class=\"line\"><span class=\"comment\"># close    1801.98</span></span><br><span class=\"line\"><span class=\"comment\"># low      1775.01</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取DataFrame对象的一些统计描述</span></span><br><span class=\"line\">print( df.describe() )     <span class=\"comment\"># 获取返回数据的大致描述</span></span><br><span class=\"line\"><span class=\"comment\">#               open         high        close          low</span></span><br><span class=\"line\"><span class=\"comment\"># count     9.000000     9.000000     9.000000     9.000000</span></span><br><span class=\"line\"><span class=\"comment\"># mean   1751.267778  1766.864444  1746.853333  1724.421111</span></span><br><span class=\"line\"><span class=\"comment\"># std      48.213887    42.352767    43.539719    42.882137</span></span><br><span class=\"line\"><span class=\"comment\"># min    1688.000000  1711.000000  1688.000000  1677.070000</span></span><br><span class=\"line\"><span class=\"comment\"># 25%    1703.740000  1736.000000  1711.400000  1688.000000</span></span><br><span class=\"line\"><span class=\"comment\"># 50%    1760.000000  1776.990000  1733.000000  1703.970000</span></span><br><span class=\"line\"><span class=\"comment\"># 75%    1792.000000  1802.000000  1793.000000  1770.000000</span></span><br><span class=\"line\"><span class=\"comment\"># max    1825.000000  1828.000000  1801.980000  1779.700000</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># .add_yaxis(&quot;kline&quot;,data3) K线需要的数据格式</span></span><br><span class=\"line\">data3 = [</span><br><span class=\"line\">     [<span class=\"number\">2332.08</span>, <span class=\"number\">2273.4</span>, <span class=\"number\">2259.25</span>, <span class=\"number\">2333.54</span>],</span><br><span class=\"line\">     [<span class=\"number\">2274.81</span>, <span class=\"number\">2326.31</span>, <span class=\"number\">2270.1</span>, <span class=\"number\">2328.14</span>],</span><br><span class=\"line\">     [<span class=\"number\">2333.61</span>, <span class=\"number\">2347.18</span>, <span class=\"number\">2321.6</span>, <span class=\"number\">2351.44</span>],</span><br><span class=\"line\">     [<span class=\"number\">2340.44</span>, <span class=\"number\">2324.29</span>, <span class=\"number\">2304.27</span>, <span class=\"number\">2352.02</span>],</span><br><span class=\"line\">     [<span class=\"number\">2326.42</span>, <span class=\"number\">2318.61</span>, <span class=\"number\">2314.59</span>, <span class=\"number\">2333.67</span>],</span><br><span class=\"line\">     [<span class=\"number\">2314.68</span>, <span class=\"number\">2310.59</span>, <span class=\"number\">2296.58</span>, <span class=\"number\">2320.96</span>],</span><br><span class=\"line\">     [<span class=\"number\">2309.16</span>, <span class=\"number\">2286.6</span>, <span class=\"number\">2264.83</span>, <span class=\"number\">2333.29</span>],</span><br><span class=\"line\">     [<span class=\"number\">2282.17</span>, <span class=\"number\">2263.97</span>, <span class=\"number\">2253.25</span>, <span class=\"number\">2286.33</span>],</span><br><span class=\"line\">     [<span class=\"number\">2255.77</span>, <span class=\"number\">2270.28</span>, <span class=\"number\">2253.31</span>, <span class=\"number\">2276.22</span>],</span><br><span class=\"line\"> ]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 绘制K线图所需要的数据-----横轴的date以及纵轴的open,high,low,close四个参数</span></span><br><span class=\"line\"><span class=\"comment\"># 难点：如何将DataFrame格式的表格数据转换成以列表为对象元素的列表 [ [],[],[],[],[] ]</span></span><br><span class=\"line\">kline=(</span><br><span class=\"line\">     Kline()</span><br><span class=\"line\">         .add_xaxis(date)</span><br><span class=\"line\">         .add_yaxis(<span class=\"string\">&quot;kline&quot;</span>,dfList)</span><br><span class=\"line\">         .set_global_opts(</span><br><span class=\"line\">             yaxis_opts=opts.AxisOpts(is_scale=<span class=\"literal\">True</span>),</span><br><span class=\"line\">             xaxis_opts=opts.AxisOpts(is_scale=<span class=\"literal\">True</span>),</span><br><span class=\"line\">             title_opts=opts.TitleOpts(title=<span class=\"string\">&quot;茅台近日-日K线&quot;</span>),</span><br><span class=\"line\">        )</span><br><span class=\"line\">     )</span><br><span class=\"line\">kline.render()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 把json格式的数据，转换成单个key-value的形式，并且把每个dict存入list中</span></span><br><span class=\"line\"><span class=\"comment\"># def parse(self,df):</span></span><br><span class=\"line\"><span class=\"comment\">#     for key,value in df.items():</span></span><br><span class=\"line\"><span class=\"comment\">#         if isinstance(value,dict):</span></span><br><span class=\"line\"><span class=\"comment\">#             self.parse(value)</span></span><br><span class=\"line\"><span class=\"comment\">#         elif isinstance(value,list):</span></span><br><span class=\"line\"><span class=\"comment\">#             for k in range(len(value)):</span></span><br><span class=\"line\"><span class=\"comment\">#                 self.parse(value[k])</span></span><br><span class=\"line\"><span class=\"comment\">#         else:</span></span><br><span class=\"line\"><span class=\"comment\">#             self.L.append(&#123;key:value&#125;)</span></span><br><span class=\"line\"><span class=\"comment\">#     return self.L</span></span><br></pre></td></tr></table></figure>\n<p>结果为：</p>\n<p><img data-src=\"D:/FirstBlog/source/_posts/%E8%AE%A4%E8%AF%86Pandas-DataFrame.assets/image-20200914192636539.png\" alt=\"image-20200914192636539\"></p>\n",
            "tags": [
                "Pandas"
            ]
        },
        {
            "id": "http://example.com/2020/09/13/%E8%AE%A4%E8%AF%86Pandas-DataFrame/",
            "url": "http://example.com/2020/09/13/%E8%AE%A4%E8%AF%86Pandas-DataFrame/",
            "title": "认识Pandas-DataFrame",
            "date_published": "2020-09-13T08:25:21.000Z",
            "content_html": "<h1 id=\"dataframe的创建\"><a class=\"markdownIt-Anchor\" href=\"#dataframe的创建\">#</a> DataFrame 的创建</h1>\n<h2 id=\"dataframe和series简介\"><a class=\"markdownIt-Anchor\" href=\"#dataframe和series简介\">#</a> DataFrame 和 Series 简介</h2>\n<p>DataFrame 是一种表格型的数据结构。DataFrame 既有行索引，也有列索引，它可以看作是由 Series 组成的字典，并且这些 Series 共用一个索引。创建方式有很多种，主要是根据 dict 进行创建，或者是读取 csv 或者 txt 文件。</p>\n<blockquote>\n<p><strong>Series</strong>：简单来说，就是一个竖着的 List，一般创建需要传入一个 List。</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\">s = pd.Series([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,np.nan])</span><br><span class=\"line\">print(s)      <span class=\"comment\"># 竖着的列表，其中np.nan为NaN，还包含默认的索引列</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>numpy 中不存在的值都会被赋值为 NaN</li>\n<li>默认索引列为数字（从 0 开始），也可以自定义索引列，在 Series 函数中添加 index 关键字，同时给一个自定义索引列表</li>\n</ul>\n</blockquote>\n<h2 id=\"根据字典创建\"><a class=\"markdownIt-Anchor\" href=\"#根据字典创建\">#</a> 根据字典创建</h2>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data = &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;name&#x27;</span>:[<span class=\"string\">&#x27;csstar&#x27;</span>,<span class=\"string\">&#x27;jackson&#x27;</span>,<span class=\"string\">&#x27;tom&#x27;</span>,<span class=\"string\">&#x27;jerry&#x27;</span>,<span class=\"string\">&#x27;yummy&#x27;</span>],</span><br><span class=\"line\">    <span class=\"string\">&#x27;year&#x27;</span>:[<span class=\"number\">2000</span>,<span class=\"number\">2001</span>,<span class=\"number\">2008</span>,<span class=\"number\">2010</span>,<span class=\"number\">2020</span>],</span><br><span class=\"line\">    <span class=\"string\">&#x27;sex&#x27;</span>:[<span class=\"string\">&#x27;m&#x27;</span>,<span class=\"string\">&#x27;m&#x27;</span>,<span class=\"string\">&#x27;m&#x27;</span>,<span class=\"string\">&#x27;w&#x27;</span>,<span class=\"string\">&#x27;w&#x27;</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\"># 得到了DataFrame对象，包含默认索引列</span></span><br><span class=\"line\">frame = pd.DataFrame(data)  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># index是行索引--&gt;对应行  columns是列索引--&gt;对应列</span></span><br><span class=\"line\">frame2 = pd.DataFrame(data,index=[<span class=\"string\">&#x27;one&#x27;</span>,<span class=\"string\">&#x27;two&#x27;</span>,<span class=\"string\">&#x27;three&#x27;</span>,<span class=\"string\">&#x27;four&#x27;</span>,<span class=\"string\">&#x27;five&#x27;</span>],columns=[<span class=\"string\">&#x27;name&#x27;</span>,<span class=\"string\">&#x27;sex&#x27;</span>,<span class=\"string\">&#x27;year&#x27;</span>])</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>如果 columns 中出现了没有定义的列，那么该列的数据都为 NaN</li>\n<li>可以用 index，columns，values 来访问 DataFrame 的行索引，列索引以及数据值，数据返回的是一个<strong>二维数组</strong>。</li>\n</ul>\n</blockquote>\n<h2 id=\"读取文件的方式创建\"><a class=\"markdownIt-Anchor\" href=\"#读取文件的方式创建\">#</a> 读取文件的方式创建</h2>\n<p>读取文件生成 DataFrame 最常用的是<strong> read_csv,read_table</strong> 方法</p>\n<p><img data-src=\"D:/FirstBlog/source/_posts/Pandas-DataFrame.assets/image-20200913170309272.png\" alt=\"image-20200913170309272\"></p>\n<p>还有一些其他的 DataFrame 创建方式，比如说可以通过读取 mysql 或者 mongoDB，读取 json 文件等方式来生成 DataFrame 对象。</p>\n<h1 id=\"dataframe轴的概念\"><a class=\"markdownIt-Anchor\" href=\"#dataframe轴的概念\">#</a> DataFrame 轴的概念</h1>\n<p>在 DataFrame 的处理中经常会遇到轴的概念，我们所说的 axis=0 即表示沿着每一列或者行标签 / 索引值向下执行的，axis = 1 即表示沿着每一行或者列标签方向执行对应的方法</p>\n<h1 id=\"dataframe的性质\"><a class=\"markdownIt-Anchor\" href=\"#dataframe的性质\">#</a> DataFrame 的性质</h1>\n<h2 id=\"索引-切片\"><a class=\"markdownIt-Anchor\" href=\"#索引-切片\">#</a> 索引、切片</h2>\n<p>根据列的名字获取一列，返回的是一个 Series</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">frame[<span class=\"string\">&#x27;列索引的名字&#x27;</span>]</span><br></pre></td></tr></table></figure>\n<p>获取多列或者多行</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data = pd.DataFrame(np.arange(<span class=\"number\">16</span>).reshape((<span class=\"number\">4</span>,<span class=\"number\">4</span>)),index = [<span class=\"string\">&#x27;Ohio&#x27;</span>,<span class=\"string\">&#x27;Colorado&#x27;</span>,<span class=\"string\">&#x27;Utah&#x27;</span>,<span class=\"string\">&#x27;New York&#x27;</span>],columns=[<span class=\"string\">&#x27;one&#x27;</span>,<span class=\"string\">&#x27;two&#x27;</span>,<span class=\"string\">&#x27;three&#x27;</span>,<span class=\"string\">&#x27;four&#x27;</span>])</span><br><span class=\"line\">data[[<span class=\"string\">&#x27;two&#x27;</span>,<span class=\"string\">&#x27;three&#x27;</span>]]</span><br><span class=\"line\"><span class=\"comment\">#输出</span></span><br><span class=\"line\">    two three</span><br><span class=\"line\">Ohio    <span class=\"number\">1</span>   <span class=\"number\">2</span></span><br><span class=\"line\">Colorado    <span class=\"number\">5</span>   <span class=\"number\">6</span></span><br><span class=\"line\">Utah    <span class=\"number\">9</span>   <span class=\"number\">10</span></span><br><span class=\"line\">New York    <span class=\"number\">13</span>  <span class=\"number\">14</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#取行</span></span><br><span class=\"line\">data[:<span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"comment\">#输出</span></span><br><span class=\"line\">    one two three   four</span><br><span class=\"line\">Ohio    <span class=\"number\">0</span>   <span class=\"number\">1</span>   <span class=\"number\">2</span>   <span class=\"number\">3</span></span><br><span class=\"line\">Colorado    <span class=\"number\">4</span>   <span class=\"number\">5</span>   <span class=\"number\">6</span>   <span class=\"number\">7</span></span><br></pre></td></tr></table></figure>\n<p>根据逻辑条件来选取</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data[data[<span class=\"string\">&#x27;three&#x27;</span>]&gt;<span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"comment\">#输出</span></span><br><span class=\"line\">    one two three   four</span><br><span class=\"line\">Colorado    <span class=\"number\">4</span>   <span class=\"number\">5</span>   <span class=\"number\">6</span>   <span class=\"number\">7</span></span><br><span class=\"line\">Utah    <span class=\"number\">8</span>   <span class=\"number\">9</span>   <span class=\"number\">10</span>  <span class=\"number\">11</span></span><br><span class=\"line\">New York    <span class=\"number\">12</span>  <span class=\"number\">13</span>  <span class=\"number\">14</span>  <span class=\"number\">15</span></span><br></pre></td></tr></table></figure>\n<p>专门用于索引的方法，如果用标签 —&gt;loc 方法，如果用下标 —&gt;iloc 方法</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#data.ix[&#x27;Colorado&#x27;,[&#x27;two&#x27;,&#x27;three&#x27;]]</span></span><br><span class=\"line\">data.loc[<span class=\"string\">&#x27;Colorado&#x27;</span>,[<span class=\"string\">&#x27;two&#x27;</span>,<span class=\"string\">&#x27;three&#x27;</span>]]</span><br><span class=\"line\"><span class=\"comment\">#输出</span></span><br><span class=\"line\">two      <span class=\"number\">5</span></span><br><span class=\"line\">three    <span class=\"number\">6</span></span><br><span class=\"line\">Name: Colorado, dtype: int64</span><br><span class=\"line\"></span><br><span class=\"line\">data.iloc[<span class=\"number\">0</span>:<span class=\"number\">3</span>,<span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"comment\">#输出</span></span><br><span class=\"line\">Ohio         <span class=\"number\">2</span></span><br><span class=\"line\">Colorado     <span class=\"number\">6</span></span><br><span class=\"line\">Utah        <span class=\"number\">10</span></span><br><span class=\"line\">Name: three, dtype: int64</span><br></pre></td></tr></table></figure>\n<h2 id=\"修改数据\"><a class=\"markdownIt-Anchor\" href=\"#修改数据\">#</a> 修改数据</h2>\n<p>使用标量修改某一列</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">frame[<span class=\"string\">&#x27;debt&#x27;</span>]=<span class=\"number\">16.5</span></span><br><span class=\"line\">frame <span class=\"comment\"># debt列全部数据为16.5</span></span><br></pre></td></tr></table></figure>\n<p>使用一个列表来修改，不过要保证列表的长度与 DataFrame 长度相同：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">frame.debt = np.arange(<span class=\"number\">5</span>)</span><br></pre></td></tr></table></figure>\n<p>使用一个 Series，此时会根据索引来进行精确匹配</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">val=pd.Series([<span class=\"number\">-1.2</span>,<span class=\"number\">-1.5</span>,<span class=\"number\">-1.7</span>],index[<span class=\"string\">&#x27;two&#x27;</span>,<span class=\"string\">&#x27;four&#x27;</span>,<span class=\"string\">&#x27;five&#x27;</span>])</span><br><span class=\"line\">frame[<span class=\"string\">&#x27;debt&#x27;</span>] = val  <span class=\"comment\">#定义一个三个数据的Series来代替指定index行的值，从而实现精确定位并修改</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"重新索引\"><a class=\"markdownIt-Anchor\" href=\"#重新索引\">#</a> 重新索引</h2>\n<p>使用 reinex 方法对 DataFrame 进行重新索引，可以重新索引行或 i 列，或者两者都索引，只穿一个参数的情况下，会重新索引行。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">frame = pd.DataFrame(np.arange(<span class=\"number\">9</span>).reshape((<span class=\"number\">3</span>,<span class=\"number\">3</span>)),index=[<span class=\"number\">1</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>],columns=[<span class=\"string\">&#x27;Ohio&#x27;</span>,<span class=\"string\">&#x27;Texas&#x27;</span>,<span class=\"string\">&#x27;California&#x27;</span>])</span><br><span class=\"line\">frame2 = frame.reindex([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>])</span><br><span class=\"line\">frame2</span><br><span class=\"line\"><span class=\"comment\">#输出</span></span><br><span class=\"line\">    Ohio    Texas   California</span><br><span class=\"line\"><span class=\"number\">1</span>   <span class=\"number\">0.0</span> <span class=\"number\">1.0</span> <span class=\"number\">2.0</span></span><br><span class=\"line\"><span class=\"number\">2</span>   NaN NaN NaN</span><br><span class=\"line\"><span class=\"number\">4</span>   <span class=\"number\">3.0</span> <span class=\"number\">4.0</span> <span class=\"number\">5.0</span></span><br><span class=\"line\"><span class=\"number\">5</span>   <span class=\"number\">6.0</span> <span class=\"number\">7.0</span> <span class=\"number\">8.0</span></span><br><span class=\"line\"></span><br><span class=\"line\">states = [<span class=\"string\">&#x27;Texas&#x27;</span>,<span class=\"string\">&#x27;Utah&#x27;</span>,<span class=\"string\">&#x27;California&#x27;</span>]</span><br><span class=\"line\">frame.reindex(columns=states)</span><br><span class=\"line\"><span class=\"comment\">#输出</span></span><br><span class=\"line\">    Texas   Utah    California</span><br><span class=\"line\"><span class=\"number\">1</span>   <span class=\"number\">1</span>   NaN <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">4</span>   <span class=\"number\">4</span>   NaN <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"number\">5</span>   <span class=\"number\">7</span>   NaN <span class=\"number\">8</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"丢弃指定轴上的值\"><a class=\"markdownIt-Anchor\" href=\"#丢弃指定轴上的值\">#</a> 丢弃指定轴上的值</h2>\n<p>使用 drop 方法丢弃指定轴上的值，不会对 DataFrame 造成影响</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">frame = pd.DataFrame(np.arange(<span class=\"number\">9</span>).reshape((<span class=\"number\">3</span>,<span class=\"number\">3</span>)),index = [<span class=\"string\">&#x27;a&#x27;</span>,<span class=\"string\">&#x27;c&#x27;</span>,<span class=\"string\">&#x27;d&#x27;</span>],columns = [<span class=\"string\">&#x27;Ohio&#x27;</span>,<span class=\"string\">&#x27;Texas&#x27;</span>,<span class=\"string\">&#x27;California&#x27;</span>])</span><br><span class=\"line\">frame.drop(<span class=\"string\">&#x27;a&#x27;</span>) </span><br><span class=\"line\"><span class=\"comment\">#输出</span></span><br><span class=\"line\">Ohio    Texas   California</span><br><span class=\"line\">a   <span class=\"number\">0</span>   <span class=\"number\">1</span>   <span class=\"number\">2</span></span><br><span class=\"line\">c   <span class=\"number\">3</span>   <span class=\"number\">4</span>   <span class=\"number\">5</span></span><br><span class=\"line\">d   <span class=\"number\">6</span>   <span class=\"number\">7</span>   <span class=\"number\">8</span></span><br><span class=\"line\"></span><br><span class=\"line\">frame.drop([<span class=\"string\">&#x27;Ohio&#x27;</span>],axis=<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"comment\">#输出</span></span><br><span class=\"line\">    Texas   California</span><br><span class=\"line\">a   <span class=\"number\">1</span>   <span class=\"number\">2</span></span><br><span class=\"line\">c   <span class=\"number\">4</span>   <span class=\"number\">5</span></span><br><span class=\"line\">d   <span class=\"number\">7</span>   <span class=\"number\">8</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"算术运算\"><a class=\"markdownIt-Anchor\" href=\"#算术运算\">#</a> 算术运算</h2>\n<p>DataFrame 在进行算数运算时会进行补齐，在不重叠的部分补足 NA：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df1 = pd.DataFrame(np.arange(<span class=\"number\">9</span>).reshape((<span class=\"number\">3</span>,<span class=\"number\">3</span>)),columns=list(<span class=\"string\">&#x27;bcd&#x27;</span>),index=[<span class=\"string\">&#x27;Ohio&#x27;</span>,<span class=\"string\">&#x27;Texas&#x27;</span>,<span class=\"string\">&#x27;Colorado&#x27;</span>])</span><br><span class=\"line\">df2 = pd.DataFrame(np.arange(<span class=\"number\">12</span>).reshape((<span class=\"number\">4</span>,<span class=\"number\">3</span>)),columns = list(<span class=\"string\">&#x27;bde&#x27;</span>),index=[<span class=\"string\">&#x27;Utah&#x27;</span>,<span class=\"string\">&#x27;Ohio&#x27;</span>,<span class=\"string\">&#x27;Texas&#x27;</span>,<span class=\"string\">&#x27;Oregon&#x27;</span>])</span><br><span class=\"line\">df1 + df2</span><br><span class=\"line\"><span class=\"comment\">#输出</span></span><br><span class=\"line\">    b   c   d   e</span><br><span class=\"line\">Colorado    NaN NaN NaN NaN</span><br><span class=\"line\">Ohio    <span class=\"number\">3.0</span> NaN <span class=\"number\">6.0</span> NaN</span><br><span class=\"line\">Oregon  NaN NaN NaN NaN</span><br><span class=\"line\">Texas   <span class=\"number\">9.0</span> NaN <span class=\"number\">12.0</span>    NaN</span><br><span class=\"line\">Utah    NaN NaN NaN NaN</span><br></pre></td></tr></table></figure>\n<p>可以使用 fill_value 方法填充 NA 数据，不过两个 df 都为 NA 的数据，该方法不会填充：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df1.add(df2,fill_value=<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"comment\">#输出</span></span><br><span class=\"line\">    b   c   d   e</span><br><span class=\"line\">Colorado    <span class=\"number\">6.0</span> <span class=\"number\">7.0</span> <span class=\"number\">8.0</span> NaN</span><br><span class=\"line\">Ohio    <span class=\"number\">3.0</span> <span class=\"number\">1.0</span> <span class=\"number\">6.0</span> <span class=\"number\">5.0</span></span><br><span class=\"line\">Oregon  <span class=\"number\">9.0</span> NaN <span class=\"number\">10.0</span>    <span class=\"number\">11.0</span></span><br><span class=\"line\">Texas   <span class=\"number\">9.0</span> <span class=\"number\">4.0</span> <span class=\"number\">12.0</span>    <span class=\"number\">8.0</span></span><br><span class=\"line\">Utah    <span class=\"number\">0.0</span> NaN <span class=\"number\">1.0</span> <span class=\"number\">2.0</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"函数应用与映射\"><a class=\"markdownIt-Anchor\" href=\"#函数应用与映射\">#</a> 函数应用与映射</h2>\n<p>numpy 的元素级数组方法，也可以用于操作 Pandas 对象：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">frame = pd.DataFrame(np.random.randn(<span class=\"number\">3</span>,<span class=\"number\">3</span>),columns=list(<span class=\"string\">&#x27;bcd&#x27;</span>),index=[<span class=\"string\">&#x27;Ohio&#x27;</span>,<span class=\"string\">&#x27;Texas&#x27;</span>,<span class=\"string\">&#x27;Colorado&#x27;</span>])</span><br><span class=\"line\">np.abs(frame)</span><br><span class=\"line\"><span class=\"comment\">#输出</span></span><br><span class=\"line\">    b   c   d</span><br><span class=\"line\">Ohio    <span class=\"number\">0.367521</span>    <span class=\"number\">0.232387</span>    <span class=\"number\">0.649330</span></span><br><span class=\"line\">Texas   <span class=\"number\">3.115632</span>    <span class=\"number\">1.415106</span>    <span class=\"number\">2.093794</span></span><br><span class=\"line\">Colorado    <span class=\"number\">0.714983</span>    <span class=\"number\">1.420871</span>    <span class=\"number\">0.557722</span></span><br></pre></td></tr></table></figure>\n<p>另一个常见的操作是，将函数应用到各列或行所形成的一维数组上。DataFrame 的 apply 方法即可实现此功能。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f = <span class=\"keyword\">lambda</span> x:x.max() - x.min()</span><br><span class=\"line\">frame.apply(f)</span><br><span class=\"line\"><span class=\"comment\">#输出</span></span><br><span class=\"line\">b    <span class=\"number\">3.830616</span></span><br><span class=\"line\">c    <span class=\"number\">2.835978</span></span><br><span class=\"line\">d    <span class=\"number\">2.743124</span></span><br><span class=\"line\">dtype: float64</span><br><span class=\"line\"></span><br><span class=\"line\">frame.apply(f,axis=<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"comment\">#输出</span></span><br><span class=\"line\">Ohio        <span class=\"number\">1.016851</span></span><br><span class=\"line\">Texas       <span class=\"number\">4.530739</span></span><br><span class=\"line\">Colorado    <span class=\"number\">2.135855</span></span><br><span class=\"line\">dtype: float64</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f</span>(<span class=\"params\">x</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> pd.Series([x.min(),x.max()],index=[<span class=\"string\">&#x27;min&#x27;</span>,<span class=\"string\">&#x27;max&#x27;</span>])</span><br><span class=\"line\">frame.apply(f)</span><br><span class=\"line\"><span class=\"comment\">#输出</span></span><br><span class=\"line\">    b   c   d</span><br><span class=\"line\">min <span class=\"number\">-0.714983</span>   <span class=\"number\">-1.415106</span>   <span class=\"number\">-0.649330</span></span><br><span class=\"line\">max <span class=\"number\">3.115632</span>    <span class=\"number\">1.420871</span>    <span class=\"number\">2.093794</span></span><br></pre></td></tr></table></figure>\n<p>元素级的 Python 函数也是可以用的，使用 applymap 方法：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">format = <span class=\"keyword\">lambda</span> x:<span class=\"string\">&#x27;%.2f&#x27;</span>%x</span><br><span class=\"line\">frame.applymap(format)</span><br><span class=\"line\"><span class=\"comment\">#输出</span></span><br><span class=\"line\">b   c   d</span><br><span class=\"line\">Ohio    <span class=\"number\">0.37</span>    <span class=\"number\">-0.23</span>   <span class=\"number\">-0.65</span></span><br><span class=\"line\">Texas   <span class=\"number\">3.12</span>    <span class=\"number\">-1.42</span>   <span class=\"number\">2.09</span></span><br><span class=\"line\">Colorado    <span class=\"number\">-0.71</span>   <span class=\"number\">1.42</span>    <span class=\"number\">-0.56</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"排序与排名\"><a class=\"markdownIt-Anchor\" href=\"#排序与排名\">#</a> 排序与排名</h2>\n<p>对于 DataFrame，sort_index 可以根据任意轴的排序，并指定升序降序</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">frame = pd.DataFrame(np.arange(<span class=\"number\">8</span>).reshape((<span class=\"number\">2</span>,<span class=\"number\">4</span>)),index=[<span class=\"string\">&#x27;three&#x27;</span>,<span class=\"string\">&#x27;one&#x27;</span>],columns=[<span class=\"string\">&#x27;d&#x27;</span>,<span class=\"string\">&#x27;a&#x27;</span>,<span class=\"string\">&#x27;b&#x27;</span>,<span class=\"string\">&#x27;c&#x27;</span>])</span><br><span class=\"line\">frame.sort_index()</span><br><span class=\"line\"><span class=\"comment\">#输出</span></span><br><span class=\"line\">    d   a   b   c</span><br><span class=\"line\">one <span class=\"number\">4</span>   <span class=\"number\">5</span>   <span class=\"number\">6</span>   <span class=\"number\">7</span></span><br><span class=\"line\">three   <span class=\"number\">0</span>   <span class=\"number\">1</span>   <span class=\"number\">2</span>   <span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\">frame.sort_index(<span class=\"number\">1</span>,ascending=<span class=\"literal\">False</span>)</span><br><span class=\"line\"><span class=\"comment\">#输出</span></span><br><span class=\"line\">    d   a   b   c</span><br><span class=\"line\">one <span class=\"number\">4</span>   <span class=\"number\">5</span>   <span class=\"number\">6</span>   <span class=\"number\">7</span></span><br><span class=\"line\">three   <span class=\"number\">0</span>   <span class=\"number\">1</span>   <span class=\"number\">2</span>   <span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n<p>DataFrame 也可以按照值进行排序：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#按照任意一列或多列进行排序</span></span><br><span class=\"line\">frame.sort_values(by=[<span class=\"string\">&#x27;a&#x27;</span>,<span class=\"string\">&#x27;b&#x27;</span>])</span><br><span class=\"line\"><span class=\"comment\">#输出</span></span><br><span class=\"line\">    d   a   b   c</span><br><span class=\"line\">three   <span class=\"number\">0</span>   <span class=\"number\">1</span>   <span class=\"number\">2</span>   <span class=\"number\">3</span></span><br><span class=\"line\">one <span class=\"number\">4</span>   <span class=\"number\">5</span>   <span class=\"number\">6</span>   <span class=\"number\">7</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"汇总和计算描述统计\"><a class=\"markdownIt-Anchor\" href=\"#汇总和计算描述统计\">#</a> 汇总和计算描述统计</h2>\n<p>DataFrame 中实现了 sum、mean、max 等方法，我们可以指定进行汇总统计的轴，同时，也可以使用 describe 函数查看基本所有的统计项：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df = pd.DataFrame([[<span class=\"number\">1.4</span>,np.nan],[<span class=\"number\">7.1</span>,<span class=\"number\">-4.5</span>],[np.nan,np.nan],[<span class=\"number\">0.75</span>,<span class=\"number\">-1.3</span>]],index=[<span class=\"string\">&#x27;a&#x27;</span>,<span class=\"string\">&#x27;b&#x27;</span>,<span class=\"string\">&#x27;c&#x27;</span>,<span class=\"string\">&#x27;d&#x27;</span>],columns=[<span class=\"string\">&#x27;one&#x27;</span>,<span class=\"string\">&#x27;two&#x27;</span>])</span><br><span class=\"line\">df.sum(axis=<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"comment\">#输出</span></span><br><span class=\"line\">one    <span class=\"number\">9.25</span></span><br><span class=\"line\">two   <span class=\"number\">-5.80</span></span><br><span class=\"line\">dtype: float64</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#Na会被自动排除，可以使用skipna选项来禁用该功能</span></span><br><span class=\"line\">df.mean(axis=<span class=\"number\">1</span>,skipna=<span class=\"literal\">False</span>)</span><br><span class=\"line\"><span class=\"comment\">#输出</span></span><br><span class=\"line\">a      NaN</span><br><span class=\"line\">b    <span class=\"number\">1.300</span></span><br><span class=\"line\">c      NaN</span><br><span class=\"line\">d   <span class=\"number\">-0.275</span></span><br><span class=\"line\">dtype: float64</span><br><span class=\"line\"><span class=\"comment\">#idxmax返回间接统计，是达到最大值的索引</span></span><br><span class=\"line\"></span><br><span class=\"line\">df.idxmax()</span><br><span class=\"line\"><span class=\"comment\">#输出</span></span><br><span class=\"line\">one    b</span><br><span class=\"line\">two    d</span><br><span class=\"line\">dtype: object</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#describe返回的是DataFrame的汇总统计</span></span><br><span class=\"line\"><span class=\"comment\">#非数值型的与数值型的统计返回结果不同</span></span><br><span class=\"line\">df.describe()</span><br><span class=\"line\"><span class=\"comment\">#输出</span></span><br><span class=\"line\">one two</span><br><span class=\"line\">count   <span class=\"number\">3.000000</span>    <span class=\"number\">2.000000</span></span><br><span class=\"line\">mean    <span class=\"number\">3.083333</span>    <span class=\"number\">-2.900000</span></span><br><span class=\"line\">std <span class=\"number\">3.493685</span>    <span class=\"number\">2.262742</span></span><br><span class=\"line\">min <span class=\"number\">0.750000</span>    <span class=\"number\">-4.500000</span></span><br><span class=\"line\"><span class=\"number\">25</span>% <span class=\"number\">1.075000</span>    <span class=\"number\">-3.700000</span></span><br><span class=\"line\"><span class=\"number\">50</span>% <span class=\"number\">1.400000</span>    <span class=\"number\">-2.900000</span></span><br><span class=\"line\"><span class=\"number\">75</span>% <span class=\"number\">4.250000</span>    <span class=\"number\">-2.100000</span></span><br><span class=\"line\">max <span class=\"number\">7.100000</span>    <span class=\"number\">-1.300000</span></span><br></pre></td></tr></table></figure>\n<p>DataFrame 也实现了 corr 和 cov 方法来计算一个 DataFrame 的相关系数矩阵和协方差矩阵，同时 DataFrame 也可以与 Series 求解相关的系数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">frame1 = pd.DataFrame(np.random.randn(<span class=\"number\">3</span>,<span class=\"number\">3</span>),index=list(<span class=\"string\">&#x27;abc&#x27;</span>),columns=list(<span class=\"string\">&#x27;abc&#x27;</span>))</span><br><span class=\"line\">frame1.corr</span><br><span class=\"line\"><span class=\"comment\">#输出</span></span><br><span class=\"line\">&lt;bound method DataFrame.corr of           a         b         c</span><br><span class=\"line\">a  <span class=\"number\">1.253773</span>  <span class=\"number\">0.429059</span>  <span class=\"number\">1.535575</span></span><br><span class=\"line\">b <span class=\"number\">-0.113987</span> <span class=\"number\">-2.837396</span> <span class=\"number\">-0.894469</span></span><br><span class=\"line\">c <span class=\"number\">-0.548208</span>  <span class=\"number\">0.834003</span>  <span class=\"number\">0.994863</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">frame1.cov()</span><br><span class=\"line\"><span class=\"comment\">#输出</span></span><br><span class=\"line\">a   b   c</span><br><span class=\"line\">a   <span class=\"number\">0.884409</span>    <span class=\"number\">0.357304</span>    <span class=\"number\">0.579613</span></span><br><span class=\"line\">b   <span class=\"number\">0.357304</span>    <span class=\"number\">4.052147</span>    <span class=\"number\">2.442527</span></span><br><span class=\"line\">c   <span class=\"number\">0.579613</span>    <span class=\"number\">2.442527</span>    <span class=\"number\">1.627843</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#corrwith用于计算每一列与Series的相关系数</span></span><br><span class=\"line\">frame1.corrwith(frame1[<span class=\"string\">&#x27;a&#x27;</span>])</span><br><span class=\"line\"><span class=\"comment\">#输出</span></span><br><span class=\"line\">a    <span class=\"number\">1.000000</span></span><br><span class=\"line\">b    <span class=\"number\">0.188742</span></span><br><span class=\"line\">c    <span class=\"number\">0.483065</span></span><br><span class=\"line\">dtype: float64</span><br></pre></td></tr></table></figure>\n<h2 id=\"处理缺失数据\"><a class=\"markdownIt-Anchor\" href=\"#处理缺失数据\">#</a> 处理缺失数据</h2>\n<p>Pandas 中缺失值相关的方法主要有以下三个：</p>\n<ul>\n<li>isnull 方法用于判断数据是否为空数据</li>\n<li>fillna 方法用于填补缺失数据</li>\n<li>dropna 方法用于舍弃缺失数据</li>\n</ul>\n<p>上面两个方法返回一个新的 Series 或者 DataFrame，对原数据没有影响，如果想在原数据上进行直接修改，使用 inplace 参数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data = pd.DataFrame([[<span class=\"number\">1</span>,<span class=\"number\">6.5</span>,<span class=\"number\">3</span>],[<span class=\"number\">1</span>,np.nan,np.nan],[np.nan,np.nan,np.nan],[np.nan,<span class=\"number\">6.5</span>,<span class=\"number\">3</span>]])</span><br><span class=\"line\">data.dropna()</span><br><span class=\"line\"><span class=\"comment\">#输出</span></span><br><span class=\"line\">    <span class=\"number\">0</span>   <span class=\"number\">1</span>   <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">0</span>   <span class=\"number\">1.0</span> <span class=\"number\">6.5</span> <span class=\"number\">3.0</span></span><br></pre></td></tr></table></figure>\n<p>对 DataFrame 来说，dropna 方法如果发现缺失值，就会进行整个数据行的删除，不过可以指定删除的方式，how=all，是当整个全是 na 的时候才可以进行删除，同时还可以指定删除的轴。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data.dropna(how=<span class=\"string\">&#x27;all&#x27;</span>,axis=<span class=\"number\">1</span>,inplace=<span class=\"literal\">True</span>)</span><br><span class=\"line\">data</span><br><span class=\"line\"><span class=\"comment\">#输出</span></span><br><span class=\"line\"><span class=\"number\">0</span>   <span class=\"number\">1</span>   <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">0</span>   <span class=\"number\">1.0</span> <span class=\"number\">6.5</span> <span class=\"number\">3.0</span></span><br><span class=\"line\"><span class=\"number\">1</span>   <span class=\"number\">1.0</span> NaN NaN</span><br><span class=\"line\"><span class=\"number\">2</span>   NaN NaN NaN</span><br><span class=\"line\"><span class=\"number\">3</span>   NaN <span class=\"number\">6.5</span> <span class=\"number\">3.0</span></span><br></pre></td></tr></table></figure>\n<p>DataFrame 填充缺失值可以统一填充，也可以按列填充，或者指定一种填充方式：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data.fillna(&#123;<span class=\"number\">1</span>:<span class=\"number\">2</span>,<span class=\"number\">2</span>:<span class=\"number\">3</span>&#125;)</span><br><span class=\"line\"><span class=\"comment\">#输出</span></span><br><span class=\"line\"><span class=\"number\">0</span>   <span class=\"number\">1</span>   <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">0</span>   <span class=\"number\">1.0</span> <span class=\"number\">6.5</span> <span class=\"number\">3.0</span></span><br><span class=\"line\"><span class=\"number\">1</span>   <span class=\"number\">1.0</span> <span class=\"number\">2.0</span> <span class=\"number\">3.0</span></span><br><span class=\"line\"><span class=\"number\">2</span>   NaN <span class=\"number\">2.0</span> <span class=\"number\">3.0</span></span><br><span class=\"line\"><span class=\"number\">3</span>   NaN <span class=\"number\">6.5</span> <span class=\"number\">3.0</span></span><br><span class=\"line\"></span><br><span class=\"line\">data.fillna(method=<span class=\"string\">&#x27;ffill&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">#输出</span></span><br><span class=\"line\"><span class=\"number\">0</span>   <span class=\"number\">1</span>   <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">0</span>   <span class=\"number\">1.0</span> <span class=\"number\">6.5</span> <span class=\"number\">3.0</span></span><br><span class=\"line\"><span class=\"number\">1</span>   <span class=\"number\">1.0</span> <span class=\"number\">6.5</span> <span class=\"number\">3.0</span></span><br><span class=\"line\"><span class=\"number\">2</span>   <span class=\"number\">1.0</span> <span class=\"number\">6.5</span> <span class=\"number\">3.0</span></span><br><span class=\"line\"><span class=\"number\">3</span>   <span class=\"number\">1.0</span> <span class=\"number\">6.5</span> <span class=\"number\">3.0</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"数据转换的一个实例\"><a class=\"markdownIt-Anchor\" href=\"#数据转换的一个实例\">#</a> 数据转换的一个实例</h1>\n<p>通过 tushare 接口返回的数据就是一个 DataFrame 格式的数据，我们通过 pandas 里的 DataFrame 来获取特定的几列来绘制 K 线。最基础的 K 线需要的数据格式是横轴一般为时间组成的列表，纵轴为以列表为对象的列表，格式为 [[],[],[]…[] ]。主要是通过 tolist () 函数来将 DataFrame 对象或者 Series 转换成列表格式，从而符合绘制曲线的数据格式要求。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> tushare <span class=\"keyword\">as</span> ts</span><br><span class=\"line\"><span class=\"keyword\">from</span> pandas <span class=\"keyword\">import</span> DataFrame</span><br><span class=\"line\"><span class=\"keyword\">from</span> pyecharts.charts <span class=\"keyword\">import</span> Kline</span><br><span class=\"line\"><span class=\"keyword\">from</span> pyecharts <span class=\"keyword\">import</span> options <span class=\"keyword\">as</span> opts</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 通过get_hist_data()函数直接获取到大盘参数---暂时认为接口返回的数据是json格式</span></span><br><span class=\"line\">data = ts.get_hist_data(<span class=\"string\">&#x27;600519&#x27;</span>,start=<span class=\"string\">&#x27;2020-09-01&#x27;</span>,ktype=<span class=\"string\">&#x27;D&#x27;</span>)</span><br><span class=\"line\">data2 = data.sort_index(ascending=<span class=\"literal\">True</span>)     <span class=\"comment\">#升序</span></span><br><span class=\"line\">print(data2)        <span class=\"comment\"># 打印返回数据</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># df.open 和df[&#x27;open&#x27;]返回值是一样的</span></span><br><span class=\"line\">df = DataFrame(data2,columns=[<span class=\"string\">&#x27;open&#x27;</span>,<span class=\"string\">&#x27;high&#x27;</span>,<span class=\"string\">&#x27;close&#x27;</span>,<span class=\"string\">&#x27;low&#x27;</span>])</span><br><span class=\"line\">print(df)               <span class=\"comment\"># 从data2大的表结构数据中抽出columns中的这几列</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将数据转换成列表-----&gt;K线所需要的数据类型</span></span><br><span class=\"line\">dfList = df.values.tolist()</span><br><span class=\"line\">print(dfList)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 选中指定列df[&#x27;列的名字&#x27;]</span></span><br><span class=\"line\">print(df[<span class=\"string\">&#x27;open&#x27;</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取行索引</span></span><br><span class=\"line\">print(df.index)</span><br><span class=\"line\"><span class=\"comment\"># Index([&#x27;2020-09-01&#x27;, &#x27;2020-09-02&#x27;, &#x27;2020-09-03&#x27;, &#x27;2020-09-04&#x27;, &#x27;2020-09-07&#x27;,</span></span><br><span class=\"line\"><span class=\"comment\">#        &#x27;2020-09-08&#x27;, &#x27;2020-09-09&#x27;, &#x27;2020-09-10&#x27;, &#x27;2020-09-11&#x27;],</span></span><br><span class=\"line\"><span class=\"comment\">#       dtype=&#x27;object&#x27;, name=&#x27;date&#x27;)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将索引---&gt;此处为date转换成列表</span></span><br><span class=\"line\">date = df.index.tolist()</span><br><span class=\"line\">print(df.index.tolist())</span><br><span class=\"line\"><span class=\"comment\"># [&#x27;2020-09-01&#x27;, &#x27;2020-09-02&#x27;, &#x27;2020-09-03&#x27;, &#x27;2020-09-04&#x27;, &#x27;2020-09-07&#x27;, &#x27;2020-09-08&#x27;, &#x27;2020-09-09&#x27;, &#x27;2020-09-10&#x27;, &#x27;2020-09-11&#x27;]</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取列索引</span></span><br><span class=\"line\">print(df.columns)</span><br><span class=\"line\"><span class=\"comment\"># Index([&#x27;open&#x27;, &#x27;high&#x27;, &#x27;close&#x27;, &#x27;low&#x27;], dtype=&#x27;object&#x27;)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 通过行索引索取指定的行数据</span></span><br><span class=\"line\">print(df.loc[<span class=\"string\">&#x27;2020-09-01&#x27;</span>])</span><br><span class=\"line\"><span class=\"comment\"># 将series列数据转换为列表</span></span><br><span class=\"line\">print(df.loc[<span class=\"string\">&#x27;2020-09-01&#x27;</span>].tolist())</span><br><span class=\"line\"><span class=\"comment\"># open     1792.00</span></span><br><span class=\"line\"><span class=\"comment\"># high     1802.00</span></span><br><span class=\"line\"><span class=\"comment\"># close    1801.98</span></span><br><span class=\"line\"><span class=\"comment\"># low      1775.01</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获取DataFrame对象的一些统计描述</span></span><br><span class=\"line\">print( df.describe() )     <span class=\"comment\"># 获取返回数据的大致描述</span></span><br><span class=\"line\"><span class=\"comment\">#               open         high        close          low</span></span><br><span class=\"line\"><span class=\"comment\"># count     9.000000     9.000000     9.000000     9.000000</span></span><br><span class=\"line\"><span class=\"comment\"># mean   1751.267778  1766.864444  1746.853333  1724.421111</span></span><br><span class=\"line\"><span class=\"comment\"># std      48.213887    42.352767    43.539719    42.882137</span></span><br><span class=\"line\"><span class=\"comment\"># min    1688.000000  1711.000000  1688.000000  1677.070000</span></span><br><span class=\"line\"><span class=\"comment\"># 25%    1703.740000  1736.000000  1711.400000  1688.000000</span></span><br><span class=\"line\"><span class=\"comment\"># 50%    1760.000000  1776.990000  1733.000000  1703.970000</span></span><br><span class=\"line\"><span class=\"comment\"># 75%    1792.000000  1802.000000  1793.000000  1770.000000</span></span><br><span class=\"line\"><span class=\"comment\"># max    1825.000000  1828.000000  1801.980000  1779.700000</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># .add_yaxis(&quot;kline&quot;,data3) K线需要的数据格式</span></span><br><span class=\"line\">data3 = [</span><br><span class=\"line\">     [<span class=\"number\">2332.08</span>, <span class=\"number\">2273.4</span>, <span class=\"number\">2259.25</span>, <span class=\"number\">2333.54</span>],</span><br><span class=\"line\">     [<span class=\"number\">2274.81</span>, <span class=\"number\">2326.31</span>, <span class=\"number\">2270.1</span>, <span class=\"number\">2328.14</span>],</span><br><span class=\"line\">     [<span class=\"number\">2333.61</span>, <span class=\"number\">2347.18</span>, <span class=\"number\">2321.6</span>, <span class=\"number\">2351.44</span>],</span><br><span class=\"line\">     [<span class=\"number\">2340.44</span>, <span class=\"number\">2324.29</span>, <span class=\"number\">2304.27</span>, <span class=\"number\">2352.02</span>],</span><br><span class=\"line\">     [<span class=\"number\">2326.42</span>, <span class=\"number\">2318.61</span>, <span class=\"number\">2314.59</span>, <span class=\"number\">2333.67</span>],</span><br><span class=\"line\">     [<span class=\"number\">2314.68</span>, <span class=\"number\">2310.59</span>, <span class=\"number\">2296.58</span>, <span class=\"number\">2320.96</span>],</span><br><span class=\"line\">     [<span class=\"number\">2309.16</span>, <span class=\"number\">2286.6</span>, <span class=\"number\">2264.83</span>, <span class=\"number\">2333.29</span>],</span><br><span class=\"line\">     [<span class=\"number\">2282.17</span>, <span class=\"number\">2263.97</span>, <span class=\"number\">2253.25</span>, <span class=\"number\">2286.33</span>],</span><br><span class=\"line\">     [<span class=\"number\">2255.77</span>, <span class=\"number\">2270.28</span>, <span class=\"number\">2253.31</span>, <span class=\"number\">2276.22</span>],</span><br><span class=\"line\"> ]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 绘制K线图所需要的数据-----横轴的date以及纵轴的open,high,low,close四个参数</span></span><br><span class=\"line\"><span class=\"comment\"># 难点：如何将DataFrame格式的表格数据转换成以列表为对象元素的列表 [ [],[],[],[],[] ]</span></span><br><span class=\"line\">kline=(</span><br><span class=\"line\">     Kline()</span><br><span class=\"line\">         .add_xaxis(date)</span><br><span class=\"line\">         .add_yaxis(<span class=\"string\">&quot;kline&quot;</span>,dfList)</span><br><span class=\"line\">         .set_global_opts(</span><br><span class=\"line\">             yaxis_opts=opts.AxisOpts(is_scale=<span class=\"literal\">True</span>),</span><br><span class=\"line\">             xaxis_opts=opts.AxisOpts(is_scale=<span class=\"literal\">True</span>),</span><br><span class=\"line\">             title_opts=opts.TitleOpts(title=<span class=\"string\">&quot;茅台近日-日K线&quot;</span>),</span><br><span class=\"line\">        )</span><br><span class=\"line\">     )</span><br><span class=\"line\">kline.render()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 把json格式的数据，转换成单个key-value的形式，并且把每个dict存入list中</span></span><br><span class=\"line\"><span class=\"comment\"># def parse(self,df):</span></span><br><span class=\"line\"><span class=\"comment\">#     for key,value in df.items():</span></span><br><span class=\"line\"><span class=\"comment\">#         if isinstance(value,dict):</span></span><br><span class=\"line\"><span class=\"comment\">#             self.parse(value)</span></span><br><span class=\"line\"><span class=\"comment\">#         elif isinstance(value,list):</span></span><br><span class=\"line\"><span class=\"comment\">#             for k in range(len(value)):</span></span><br><span class=\"line\"><span class=\"comment\">#                 self.parse(value[k])</span></span><br><span class=\"line\"><span class=\"comment\">#         else:</span></span><br><span class=\"line\"><span class=\"comment\">#             self.L.append(&#123;key:value&#125;)</span></span><br><span class=\"line\"><span class=\"comment\">#     return self.L</span></span><br></pre></td></tr></table></figure>\n<p>结果为：</p>\n<p><img data-src=\"D:/FirstBlog/source/_posts/Pandas-DataFrame.assets/image-20200914192636539.png\" alt=\"image-20200914192636539\"></p>\n",
            "tags": [
                "Pandas"
            ]
        },
        {
            "id": "http://example.com/2020/09/12/Docker%E5%85%A5%E9%97%A8/",
            "url": "http://example.com/2020/09/12/Docker%E5%85%A5%E9%97%A8/",
            "title": "Docker入门",
            "date_published": "2020-09-12T07:59:46.000Z",
            "content_html": "<h1 id=\"docker入门\"><a class=\"markdownIt-Anchor\" href=\"#docker入门\">#</a> Docker 入门</h1>\n<h2 id=\"docker简介\"><a class=\"markdownIt-Anchor\" href=\"#docker简介\">#</a> docker 简介</h2>\n<h3 id=\"三要素\"><a class=\"markdownIt-Anchor\" href=\"#三要素\">#</a> 三要素：</h3>\n<p>仓库，镜像，容器</p>\n<h3 id=\"why\"><a class=\"markdownIt-Anchor\" href=\"#why\">#</a> why：</h3>\n<p>开发代码 ----&gt; 运维工程师不一定能运行</p>\n<p>环境 / 配置不同 -&gt; 导致相同代码不一定能成功运行得到正确结果</p>\n<h3 id=\"简化\"><a class=\"markdownIt-Anchor\" href=\"#简化\">#</a> 简化：</h3>\n<p>将代码 / 依赖 / 配置 / 环境等一系列进行打包形成一个统一的镜像</p>\n<p>这个统一的镜像可以在较为简单的环境下成功运行</p>\n<h3 id=\"比喻\"><a class=\"markdownIt-Anchor\" href=\"#比喻\">#</a> 比喻：</h3>\n<p>一个集装箱代表一个运行环境，相互分离，互不干扰</p>\n<h2 id=\"虚拟机与docker的概念和区别\"><a class=\"markdownIt-Anchor\" href=\"#虚拟机与docker的概念和区别\">#</a> 虚拟机与 docker 的概念和区别</h2>\n<h3 id=\"虚拟机\"><a class=\"markdownIt-Anchor\" href=\"#虚拟机\">#</a> 虚拟机：</h3>\n<p>在一种操作系统里运行另一种操作系统，跟真实系统一模一样</p>\n<h3 id=\"区别\"><a class=\"markdownIt-Anchor\" href=\"#区别\">#</a> 区别：</h3>\n<p>虚拟机运行分钟级，而 docker 则是秒级</p>\n<p>虚拟里占用资源多，包含了硬件，软件一整套操作系统</p>\n<p>docker 轻量级的，且基于宿主机的内核</p>\n<p>Linux 容器不是模拟一个完整的操作系统，按需导入</p>\n<p>docker 可以认为是一种精简版的 linux 环境，更简洁，灵活</p>\n<h2 id=\"资源\"><a class=\"markdownIt-Anchor\" href=\"#资源\">#</a> 资源</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL2RvY2tlci1jbi5jb20=\">docker-cn.com</span>    //docker 中文网<br>\n Docker Hub        //docker 仓库</p>\n<h2 id=\"docker安装\"><a class=\"markdownIt-Anchor\" href=\"#docker安装\">#</a> Docker 安装</h2>\n<p>centos 6.5 或更高的版本</p>\n<blockquote>\n<p>uname -r        cat  /etc/redhat-release    // 查看 centos 版本<br>\n epel-release    //epel 安装 docker 依赖库   tag：6.8<br>\n<span class=\"exturl\" data-url=\"aHR0cDovL2RvY2tlci5pbw==\">docker.io</span>         // 正式的 docker 镜像      tag：6.8</p>\n</blockquote>\n<p>7.0 版本不同，具体参考官方文档</p>\n<h2 id=\"三部分\"><a class=\"markdownIt-Anchor\" href=\"#三部分\">#</a> 三部分</h2>\n<p>client--------&gt;docker bulid / pull / run<br>\ndocker_host---------&gt;Docker  daemon<br>\nrepository-------------&gt; 仓库</p>\n<h3 id=\"理解\"><a class=\"markdownIt-Anchor\" href=\"#理解\">#</a> 理解：</h3>\n<p>镜像 ------ 是只读模板<br>\n容器 ------ 时利用镜像创造的实例，可以看作简易版的 linux<br>\n 仓库 ------ 集中存放镜像文件   分为公开库 / 私有库</p>\n<h2 id=\"阿里云网易云镜像加速\"><a class=\"markdownIt-Anchor\" href=\"#阿里云网易云镜像加速\">#</a> 阿里云 / 网易云镜像加速：</h2>\n<p>注册账号<br>\n获得阿里云加速器链接<br>\n配置文件<br>\n重载配置文件 / 重启 docker<br>\n 检查是否生效  ps -ef | grep docker</p>\n<h3 id=\"docker-run-查找顺序\"><a class=\"markdownIt-Anchor\" href=\"#docker-run-查找顺序\">#</a> docker run 查找顺序</h3>\n<p>本地容器 ------&gt; 本地镜像 --------&gt;hub 共有仓库去 pull 镜像 -----&gt; 本地更具镜像实例一个容器</p>\n<h2 id=\"docker命令\"><a class=\"markdownIt-Anchor\" href=\"#docker命令\">#</a> docker 命令</h2>\n<blockquote>\n<p>systemctl  start  docker     // 启动 docker</p>\n</blockquote>\n<blockquote>\n<p>docker images                  // 本地镜像模板</p>\n<p>-a  所有镜像     -q 所有镜像 id     --digests  摘要</p>\n<p>–no-trunc 完整镜像信息     // 参数</p>\n</blockquote>\n<blockquote>\n<p>docker search &lt;images_name&gt;   // 在 docker hub 共有仓库中搜寻镜像</p>\n<p>-s    星数限定      --no-trunc 完整镜像信息    --automated  只显示该类型镜像</p>\n</blockquote>\n<blockquote>\n<p>docker  pull  &lt;images_name&gt;：tag   // 拉去某个特定版本镜像</p>\n</blockquote>\n<blockquote>\n<p>docker rmi  &lt;images_name&gt;  // 运行时删除不了</p>\n<p>-f   强制删除</p>\n</blockquote>\n<blockquote>\n<p>docker rmi -f  images1:tag  images2:tag  // 删除多个镜像</p>\n</blockquote>\n<blockquote>\n<p>docker rmi -f  $(docker images -qa)    // 删除全部镜像</p>\n</blockquote>\n<img data-src=\"C:\\Users\\Administrator\\AppData\\Roaming\\Typora\\typora-user-images\\image-20200410102315483.png\" alt=\"image-20200410102315483\" style=\"zoom:150%;\">\n<h3 id=\"docker-ps-的参数\"><a class=\"markdownIt-Anchor\" href=\"#docker-ps-的参数\">#</a> docker ps 的参数：</h3>\n<blockquote>\n<p>docker ps -a 可查看后台运行的容器 id，并根据需求删除</p>\n<p>docker inspect 容器 id     // 查看容器内部的细节</p>\n</blockquote>\n<h2 id=\"镜像原理\"><a class=\"markdownIt-Anchor\" href=\"#镜像原理\">#</a> 镜像原理：</h2>\n<p>轻量的，可执行的独立软件包，用来打包软件和软件所需的运行环境</p>\n<p>docker 镜像实际上是一层层文件系统，这种为 UnionFile 层级文件系统</p>\n<p>一个文件的内存大，说明需要的层级文件多，依赖的环境复杂</p>\n<h2 id=\"分层结构\"><a class=\"markdownIt-Anchor\" href=\"#分层结构\">#</a> 分层结构：</h2>\n<p>优点 ------ 共享资源</p>\n<p>镜像层可读，容器层可写</p>\n<blockquote>\n<p>docker commit     // 提交容器副本成为一个新的镜像</p>\n<p>-m “提交信息”    -a 作者    容器 ID  目标镜像名：tag</p>\n</blockquote>\n<h2 id=\"防火墙\"><a class=\"markdownIt-Anchor\" href=\"#防火墙\">#</a> 防火墙：</h2>\n<blockquote>\n<p>systemctl status firewalld.service   // 查看防火墙状态</p>\n</blockquote>\n<blockquote>\n<p>systemctl stop firewalld.service   // 关闭运行的防火墙</p>\n</blockquote>\n<blockquote>\n<p>systemctl disable firewalld.service  // 永久关闭防火墙</p>\n</blockquote>\n<h2 id=\"docker容器数据卷\"><a class=\"markdownIt-Anchor\" href=\"#docker容器数据卷\">#</a> docker 容器数据卷：</h2>\n<p>保证数据的持久化，容器之间共享数据，数据同步</p>\n<h3 id=\"直接命令\"><a class=\"markdownIt-Anchor\" href=\"#直接命令\">#</a> 直接命令：</h3>\n<blockquote>\n<p>docker run -it -v /myDataVolume:/dataVolumeContainer centos</p>\n</blockquote>\n<p>:ro   // 修改权限为只读模式</p>\n<p>映射文件夹下无法新建文件，且无法修改文件，形成单方向同步</p>\n<h2 id=\"dockerfile\"><a class=\"markdownIt-Anchor\" href=\"#dockerfile\">#</a> DockerFile：</h2>\n<p>对镜像源码的描述，编译文件</p>\n<p>提示错误：“docker build” requires exactly 1 argument.</p>\n<p>原因是因为（少了一个 ‘.’ ， ‘.’ 代表当前路径）</p>\n<p>[root@docker mydocker]# docker build -f /mydocker/DockerFile -t cs/centos .</p>\n<p>. 打包当前目录</p>\n<h3 id=\"数据卷容器\"><a class=\"markdownIt-Anchor\" href=\"#数据卷容器\">#</a> 数据卷容器：</h3>\n<p>容器间传递共享</p>\n<p>docker run -it --name dc01 cs/centos  // 父容器</p>\n<p>docker run -it --name dc02 --volumes-from dc01 cs/centos   // 子容器</p>\n<p>删除父容器 1，对 2，3 子容器不影响，干掉父容器 1，对 2，3 之间的数据共享也不影响</p>\n<h3 id=\"dockerfile-镜像构建文件\"><a class=\"markdownIt-Anchor\" href=\"#dockerfile-镜像构建文件\">#</a> DockerFile:  镜像构建文件</h3>\n<p>手动编写符合 file 规范的 dockerfile 文件</p>\n<p>docker build 命令执行，生成镜像</p>\n<p>docker run 执行</p>\n<h3 id=\"dockerfile-2\"><a class=\"markdownIt-Anchor\" href=\"#dockerfile-2\">#</a> dockerfile：</h3>\n<p>1，每条保留字指令都必须大写首字母，且保留字后不为空</p>\n<p>2，指令自上而下，顺序执行，# 表注释</p>\n<p>3，每条指令创建一个新的镜像层，并不断提交给镜像</p>\n<h3 id=\"docker执行dockerfile的大致流程\"><a class=\"markdownIt-Anchor\" href=\"#docker执行dockerfile的大致流程\">#</a> docker 执行 dockerfile 的大致流程：</h3>\n<p>1，docker 从基础镜像运行一个容器</p>\n<p>2，执行一条条指令，对容器进行修改</p>\n<p>3，执行 docker commit 提交新的镜像层，对镜像进行修改</p>\n<p>4，docker 基于新镜像在运行一个容器</p>\n<p>5，在依次类推，直到运行完所有指令</p>\n<h3 id=\"dockerfile保留字\"><a class=\"markdownIt-Anchor\" href=\"#dockerfile保留字\">#</a> dockerfile 保留字：</h3>\n<p>基础镜像</p>\n<p>作者说明</p>\n<p>执行命令</p>\n<p>指定对外暴露的端口</p>\n<p>进入终端的指定工作目录</p>\n<p>构建镜像中设置环境变量</p>\n<p>拷贝并解压缩某个压缩包</p>\n<p>与 add 功能相同，但不能解压缩</p>\n<p>自建容器卷</p>\n<p>指定容器启动时要运行的命令，只有最后一个 CMD 命令生效</p>\n<p>指定容器启动时要运行的命令，但不会覆盖之前的命令</p>\n<p>触发器</p>\n<h2 id=\"cmd和entrypoint区别\"><a class=\"markdownIt-Anchor\" href=\"#cmd和entrypoint区别\">#</a> CMD 和 ENTRYPOINT 区别：</h2>\n<p>CMD  run 命令后加参数覆盖之前的命令</p>\n<p>ENTRYPOINT  run 命令后的参数添加到命令里</p>\n",
            "tags": [
                "Docker"
            ]
        }
    ]
}