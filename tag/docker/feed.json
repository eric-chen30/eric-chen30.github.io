{
    "version": "https://jsonfeed.org/version/1",
    "title": "Hexo • All posts by \"docker\" tag",
    "description": "Work Hard To Be A Better Man",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2020/09/12/Docker%E5%85%A5%E9%97%A8/",
            "url": "http://example.com/2020/09/12/Docker%E5%85%A5%E9%97%A8/",
            "title": "Docker入门",
            "date_published": "2020-09-12T07:59:46.000Z",
            "content_html": "<h1 id=\"docker入门\"><a class=\"markdownIt-Anchor\" href=\"#docker入门\">#</a> Docker 入门</h1>\n<h3 id=\"1docker简介\"><a class=\"markdownIt-Anchor\" href=\"#1docker简介\">#</a> 1，docker 简介</h3>\n<h4 id=\"11三要素\"><a class=\"markdownIt-Anchor\" href=\"#11三要素\">#</a> 1.1，三要素：</h4>\n<p>仓库，镜像，容器</p>\n<h4 id=\"12why\"><a class=\"markdownIt-Anchor\" href=\"#12why\">#</a> 1.2，why：</h4>\n<p>开发代码 ----&gt; 运维工程师不一定能运行</p>\n<p>环境 / 配置不同 -&gt; 导致相同代码不一定能成功运行得到正确结果</p>\n<h4 id=\"13简化\"><a class=\"markdownIt-Anchor\" href=\"#13简化\">#</a> 1.3，简化：</h4>\n<p>将代码 / 依赖 / 配置 / 环境等一系列进行打包形成一个统一的镜像</p>\n<p>这个统一的镜像可以在较为简单的环境下成功运行</p>\n<h4 id=\"14比喻\"><a class=\"markdownIt-Anchor\" href=\"#14比喻\">#</a> 1.4，比喻：</h4>\n<p>一个集装箱代表一个运行环境，相互分离，互不干扰</p>\n<h3 id=\"2虚拟机与docker的概念和区别\"><a class=\"markdownIt-Anchor\" href=\"#2虚拟机与docker的概念和区别\">#</a> 2，虚拟机与 docker 的概念和区别</h3>\n<h4 id=\"21虚拟机\"><a class=\"markdownIt-Anchor\" href=\"#21虚拟机\">#</a> 2.1，虚拟机：</h4>\n<p>在一种操作系统里运行另一种操作系统，跟真实系统一模一样</p>\n<h4 id=\"22区别\"><a class=\"markdownIt-Anchor\" href=\"#22区别\">#</a> 2.2，区别：</h4>\n<p>虚拟机运行分钟级，而 docker 则是秒级</p>\n<p>虚拟里占用资源多，包含了硬件，软件一整套操作系统</p>\n<p>docker 轻量级的，且基于宿主机的内核</p>\n<p>Linux 容器不是模拟一个完整的操作系统，按需导入</p>\n<p>docker 可以认为是一种精简版的 linux 环境，更简洁，灵活</p>\n<h3 id=\"3资源\"><a class=\"markdownIt-Anchor\" href=\"#3资源\">#</a> 3，资源</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL2RvY2tlci1jbi5jb20=\">docker-cn.com</span>    //docker 中文网<br>\n Docker Hub        //docker 仓库</p>\n<h3 id=\"4docker安装\"><a class=\"markdownIt-Anchor\" href=\"#4docker安装\">#</a> 4，Docker 安装</h3>\n<p>centos 6.5 或更高的版本</p>\n<blockquote>\n<p>uname -r        cat  /etc/redhat-release    // 查看 centos 版本<br>\n epel-release    //epel 安装 docker 依赖库   tag：6.8<br>\n<span class=\"exturl\" data-url=\"aHR0cDovL2RvY2tlci5pbw==\">docker.io</span>         // 正式的 docker 镜像      tag：6.8</p>\n</blockquote>\n<p>7.0 版本不同，具体参考官方文档</p>\n<h3 id=\"5三部分\"><a class=\"markdownIt-Anchor\" href=\"#5三部分\">#</a> 5，三部分</h3>\n<p>client--------&gt;docker bulid / pull / run<br>\ndocker_host---------&gt;Docker  daemon<br>\nrepository-------------&gt; 仓库</p>\n<h4 id=\"51理解\"><a class=\"markdownIt-Anchor\" href=\"#51理解\">#</a> 5.1，理解：</h4>\n<p>镜像 ------ 是只读模板<br>\n容器 ------ 时利用镜像创造的实例，可以看作简易版的 linux<br>\n 仓库 ------ 集中存放镜像文件   分为公开库 / 私有库</p>\n<h3 id=\"6阿里云网易云镜像加速\"><a class=\"markdownIt-Anchor\" href=\"#6阿里云网易云镜像加速\">#</a> 6，阿里云 / 网易云镜像加速：</h3>\n<p>注册账号<br>\n获得阿里云加速器链接<br>\n配置文件<br>\n重载配置文件 / 重启 docker<br>\n 检查是否生效  ps -ef | grep docker</p>\n<h3 id=\"7docker-run-查找顺序\"><a class=\"markdownIt-Anchor\" href=\"#7docker-run-查找顺序\">#</a> 7，docker run 查找顺序</h3>\n<p>本地容器 ------&gt; 本地镜像 --------&gt;hub 共有仓库去 pull 镜像 -----&gt; 本地更具镜像实例一个容器</p>\n<h3 id=\"8docker命令\"><a class=\"markdownIt-Anchor\" href=\"#8docker命令\">#</a> 8，docker 命令</h3>\n<blockquote>\n<p>systemctl  start  docker     // 启动 docker</p>\n</blockquote>\n<blockquote>\n<p>docker images                  // 本地镜像模板</p>\n<p>-a  所有镜像     -q 所有镜像 id     --digests  摘要</p>\n<p>–no-trunc 完整镜像信息     // 参数</p>\n</blockquote>\n<blockquote>\n<p>docker search &lt;images_name&gt;   // 在 docker hub 共有仓库中搜寻镜像</p>\n<p>-s    星数限定      --no-trunc 完整镜像信息    --automated  只显示该类型镜像</p>\n</blockquote>\n<blockquote>\n<p>docker  pull  &lt;images_name&gt;：tag   // 拉去某个特定版本镜像</p>\n</blockquote>\n<blockquote>\n<p>docker rmi  &lt;images_name&gt;  // 运行时删除不了</p>\n<p>-f   强制删除</p>\n</blockquote>\n<blockquote>\n<p>docker rmi -f  images1:tag  images2:tag  // 删除多个镜像</p>\n</blockquote>\n<blockquote>\n<p>docker rmi -f  $(docker images -qa)    // 删除全部镜像</p>\n</blockquote>\n<img data-src=\"C:\\Users\\Administrator\\AppData\\Roaming\\Typora\\typora-user-images\\image-20200410102315483.png\" alt=\"image-20200410102315483\" style=\"zoom:150%;\" />\n<h3 id=\"81docker-ps-的参数\"><a class=\"markdownIt-Anchor\" href=\"#81docker-ps-的参数\">#</a> 8.1，docker ps 的参数：</h3>\n<blockquote>\n<p>docker ps -a 可查看后台运行的容器 id，并根据需求删除</p>\n<p>docker inspect 容器 id     // 查看容器内部的细节</p>\n</blockquote>\n<h3 id=\"9镜像原理\"><a class=\"markdownIt-Anchor\" href=\"#9镜像原理\">#</a> 9，镜像原理：</h3>\n<p>轻量的，可执行的独立软件包，用来打包软件和软件所需的运行环境</p>\n<p>docker 镜像实际上是一层层文件系统，这种为 UnionFile 层级文件系统</p>\n<p>一个文件的内存大，说明需要的层级文件多，依赖的环境复杂</p>\n<h3 id=\"10分层结构\"><a class=\"markdownIt-Anchor\" href=\"#10分层结构\">#</a> 10，分层结构：</h3>\n<p>优点 ------ 共享资源</p>\n<p>镜像层可读，容器层可写</p>\n<blockquote>\n<p>docker commit     // 提交容器副本成为一个新的镜像</p>\n<p>-m “提交信息”    -a 作者    容器 ID  目标镜像名：tag</p>\n</blockquote>\n<h3 id=\"11防火墙\"><a class=\"markdownIt-Anchor\" href=\"#11防火墙\">#</a> 11，防火墙：</h3>\n<blockquote>\n<p>systemctl status firewalld.service   // 查看防火墙状态</p>\n</blockquote>\n<blockquote>\n<p>systemctl stop firewalld.service   // 关闭运行的防火墙</p>\n</blockquote>\n<blockquote>\n<p>systemctl disable firewalld.service  // 永久关闭防火墙</p>\n</blockquote>\n<h3 id=\"12docker容器数据卷\"><a class=\"markdownIt-Anchor\" href=\"#12docker容器数据卷\">#</a> 12，docker 容器数据卷：</h3>\n<p>保证数据的持久化，容器之间共享数据，数据同步</p>\n<h3 id=\"13直接命令\"><a class=\"markdownIt-Anchor\" href=\"#13直接命令\">#</a> 13，直接命令：</h3>\n<blockquote>\n<p>docker run -it -v /myDataVolume:/dataVolumeContainer centos</p>\n</blockquote>\n<p>:ro   // 修改权限为只读模式</p>\n<p>映射文件夹下无法新建文件，且无法修改文件，形成单方向同步</p>\n<h3 id=\"14dockerfile\"><a class=\"markdownIt-Anchor\" href=\"#14dockerfile\">#</a> 14，DockerFile：</h3>\n<p>对镜像源码的描述，编译文件</p>\n<p>提示错误：“docker build” requires exactly 1 argument.</p>\n<p>原因是因为（少了一个 ‘.’ ， ‘.’ 代表当前路径）</p>\n<p>[root@docker mydocker]# docker build -f /mydocker/DockerFile -t cs/centos .</p>\n<p>. 打包当前目录</p>\n<h3 id=\"15数据卷容器\"><a class=\"markdownIt-Anchor\" href=\"#15数据卷容器\">#</a> 15，数据卷容器：</h3>\n<p>容器间传递共享</p>\n<p>docker run -it --name dc01 cs/centos  // 父容器</p>\n<p>docker run -it --name dc02 --volumes-from dc01 cs/centos   // 子容器</p>\n<p>删除父容器 1，对 2，3 子容器不影响，干掉父容器 1，对 2，3 之间的数据共享也不影响</p>\n<h3 id=\"16dockerfile-镜像构建文件\"><a class=\"markdownIt-Anchor\" href=\"#16dockerfile-镜像构建文件\">#</a> 16，DockerFile:  镜像构建文件</h3>\n<p>手动编写符合 file 规范的 dockerfile 文件</p>\n<p>docker build 命令执行，生成镜像</p>\n<p>docker run 执行</p>\n<h3 id=\"17dockerfile\"><a class=\"markdownIt-Anchor\" href=\"#17dockerfile\">#</a> 17，dockerfile：</h3>\n<p>1，每条保留字指令都必须大写首字母，且保留字后不为空</p>\n<p>2，指令自上而下，顺序执行，# 表注释</p>\n<p>3，每条指令创建一个新的镜像层，并不断提交给镜像</p>\n<h4 id=\"171docker执行dockerfile的大致流程\"><a class=\"markdownIt-Anchor\" href=\"#171docker执行dockerfile的大致流程\">#</a> 17.1，docker 执行 dockerfile 的大致流程：</h4>\n<p>1，docker 从基础镜像运行一个容器</p>\n<p>2，执行一条条指令，对容器进行修改</p>\n<p>3，执行 docker commit 提交新的镜像层，对镜像进行修改</p>\n<p>4，docker 基于新镜像在运行一个容器</p>\n<p>5，在依次类推，直到运行完所有指令</p>\n<h4 id=\"172dockerfile保留字\"><a class=\"markdownIt-Anchor\" href=\"#172dockerfile保留字\">#</a> 17.2，dockerfile 保留字：</h4>\n<p>基础镜像</p>\n<p>作者说明</p>\n<p>执行命令</p>\n<p>指定对外暴露的端口</p>\n<p>进入终端的指定工作目录</p>\n<p>构建镜像中设置环境变量</p>\n<p>拷贝并解压缩某个压缩包</p>\n<p>与 add 功能相同，但不能解压缩</p>\n<p>自建容器卷</p>\n<p>指定容器启动时要运行的命令，只有最后一个 CMD 命令生效</p>\n<p>指定容器启动时要运行的命令，但不会覆盖之前的命令</p>\n<p>触发器</p>\n<h3 id=\"18cmd和entrypoint区别\"><a class=\"markdownIt-Anchor\" href=\"#18cmd和entrypoint区别\">#</a> 18，CMD 和 ENTRYPOINT 区别：</h3>\n<p>CMD  run 命令后加参数覆盖之前的命令</p>\n<p>ENTRYPOINT  run 命令后的参数添加到命令里</p>\n",
            "tags": [
                "Docker"
            ]
        }
    ]
}