{
    "version": "https://jsonfeed.org/version/1",
    "title": "CsStar • All posts by \"es6\" tag",
    "description": "Work Hard To Be A Better Man",
    "home_page_url": "http://csstar.top",
    "items": [
        {
            "id": "http://csstar.top/2022/03/10/ES6/",
            "url": "http://csstar.top/2022/03/10/ES6/",
            "title": "ES6",
            "date_published": "2022-03-10T14:34:09.000Z",
            "content_html": "<h1 id=\"es6\"><a class=\"markdownIt-Anchor\" href=\"#es6\">#</a> ES6</h1>\n<h2 id=\"const和let\"><a class=\"markdownIt-Anchor\" href=\"#const和let\">#</a> const 和 let</h2>\n<blockquote>\n<p>let 关键字</p>\n</blockquote>\n<ul>\n<li>不允许重复声明</li>\n<li>块级作用域</li>\n<li>不存在变量提升</li>\n<li>不影响作用域链</li>\n</ul>\n<blockquote>\n<p>const 关键字</p>\n</blockquote>\n<ul>\n<li>必须初始化</li>\n<li>不允许重复声明</li>\n<li>不允许修改</li>\n<li>块级作用域</li>\n</ul>\n<blockquote>\n<p>注：对象属性修改和数组元素变化不会发生 const 错误</p>\n<p>应用场景：声明对象类型使用 const ，非对象类型声明选择 let</p>\n</blockquote>\n<h2 id=\"变量的解构赋值\"><a class=\"markdownIt-Anchor\" href=\"#变量的解构赋值\">#</a> 变量的解构赋值</h2>\n<blockquote>\n<p>按照一定模式，从数组和对象中提取值，对变量进行赋值，这就是解构赋值</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 数组的解构赋值</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"string\">&#x27;eric&#x27;</span>,<span class=\"string\">&#x27;chen&#x27;</span>,<span class=\"string\">&#x27;jack&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> [zhang, liu, li] = arr;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 对象的解构赋值</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> lin = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">&#x27;jack&#x27;</span>,</span><br><span class=\"line\">    tags: [<span class=\"string\">&#x27;ball&#x27;</span>,<span class=\"string\">&#x27;bull&#x27;</span>]</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;name, tages&#125; = lin;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 复杂解构</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> wangfei = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">&#x27;王菲&#x27;</span>,</span><br><span class=\"line\">    age: <span class=\"number\">18</span>,</span><br><span class=\"line\">    songs: [<span class=\"string\">&#x27;红豆&#x27;</span>,<span class=\"string\">&#x27;流年&#x27;</span>,<span class=\"string\">&#x27;暧昧&#x27;</span>],</span><br><span class=\"line\">    history: [</span><br><span class=\"line\">        &#123;<span class=\"attr\">name</span>: <span class=\"string\">&#x27;窦唯&#x27;</span>&#125;,</span><br><span class=\"line\">        &#123;<span class=\"attr\">name</span>: <span class=\"string\">&#x27;谢霆锋&#x27;</span>&#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span>&#123;<span class=\"attr\">songs</span>:[one,two,three],<span class=\"attr\">history</span>:[first,second,third]&#125; = weifang;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意： 频繁使用对象方法、数组元素、就可以使用解构赋值形式</p>\n</blockquote>\n<h2 id=\"模板字符串\"><a class=\"markdownIt-Anchor\" href=\"#模板字符串\">#</a> 模板字符串</h2>\n<blockquote>\n<p>增强版的字符串，用反引号来标识字符串</p>\n</blockquote>\n<ul>\n<li>字符串中可以出现换行符</li>\n<li>可以使用 ${xxx} 形式输出变量    (可以进行两个变量的字符串拼接来代替 + 号)</li>\n</ul>\n<h2 id=\"对象的简化写法\"><a class=\"markdownIt-Anchor\" href=\"#对象的简化写法\">#</a> 对象的简化写法</h2>\n<blockquote>\n<p>ES6 允许在大括号里面，直接写变量和函数，作为对象属性和方法</p>\n</blockquote>\n<ul>\n<li>优点是写法简洁、代码量更少</li>\n<li>缺点是代码可读性降低，格式化没那么标准</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> name = <span class=\"string\">&#x27;eric&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> slogon = <span class=\"string\">&#x27;i can do all things&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> improve = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;take it easy&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 属性和方法简写</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> csstar = &#123;</span><br><span class=\"line\">    name,</span><br><span class=\"line\">    slogon,</span><br><span class=\"line\">    improve,</span><br><span class=\"line\">    change() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;just change&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"箭头函数\"><a class=\"markdownIt-Anchor\" href=\"#箭头函数\">#</a> 箭头函数</h2>\n<ul>\n<li>\n<p>this 是静态的，始终指向定义时的对象，call 方法无法改变 this 指向</p>\n</li>\n<li>\n<p>不能作为构造函数实例化对象</p>\n</li>\n<li>\n<p>不能使用 arguments 变量</p>\n</li>\n<li>\n<p>箭头函数的简写</p>\n<ol>\n<li>省略小括号，当形参有且只有一个的时候</li>\n<li>省略花括号，当函数体只有一条语句的时候</li>\n</ol>\n</li>\n<li>\n<p>箭头函数适合与 this 无关的回调，定时器，数组的方法回调</p>\n</li>\n<li>\n<p>箭头函数不适合 this 有关的回调，事件的回调，对象的方法</p>\n</li>\n</ul>\n<h2 id=\"es6允许给函数参数赋值初始值\"><a class=\"markdownIt-Anchor\" href=\"#es6允许给函数参数赋值初始值\">#</a> ES6 允许给函数参数赋值初始值</h2>\n<ul>\n<li>形参初始值  具有默认值的参数，一般位置都要靠后（潜规则）</li>\n<li>与结构赋值结合</li>\n</ul>\n<h2 id=\"es6-rest参数获取函数的实参代替arguments\"><a class=\"markdownIt-Anchor\" href=\"#es6-rest参数获取函数的实参代替arguments\">#</a> ES6 rest 参数，获取函数的实参，代替 arguments</h2>\n<ol>\n<li>ES5 获取实参的方式</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">date</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">arguments</span>);\t\t<span class=\"comment\">// 返回一个对象</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">date(<span class=\"string\">&#x27;jack&#x27;</span>,<span class=\"string\">&#x27;eric&#x27;</span>,<span class=\"string\">&#x27;mike&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>rest 参数</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">date</span>(<span class=\"params\">...args</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(args);\t\t<span class=\"comment\">// 返回一个数组</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">date(<span class=\"string\">&#x27;jack&#x27;</span>,<span class=\"string\">&#x27;eric&#x27;</span>,<span class=\"string\">&#x27;mike&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>rest 参数必须要放到参数最后</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fun</span>(<span class=\"params\">a,b,...args</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(b);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(args);\t\t<span class=\"comment\">// 返回一个数组</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fun(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,);</span><br></pre></td></tr></table></figure>\n<h2 id=\"扩展运算符\"><a class=\"markdownIt-Anchor\" href=\"#扩展运算符\">#</a> 扩展运算符</h2>\n<blockquote>\n<p>将【数组】转换为逗号分隔的【参数序列】</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 声明一个数组</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> boys = [<span class=\"string\">&#x27;jack&#x27;</span>,<span class=\"string\">&#x27;mike&#x27;</span>,<span class=\"string\">&#x27;eric&#x27;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">chunwan</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">chunwan(...boys);\t<span class=\"comment\">// 相当于 chunwan(&#x27;jack&#x27;,&#x27;mike&#x27;,&#x27;eric&#x27;);</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>扩展运算符的运用</p>\n</blockquote>\n<ul>\n<li>数组的合并</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr1 = [<span class=\"string\">&#x27;a&#x27;</span>,<span class=\"string\">&#x27;b&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> arr2 = [<span class=\"string\">&#x27;c&#x27;</span>,<span class=\"string\">&#x27;d&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> combineArr = arr1.concat(arr2);  <span class=\"comment\">// es5</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> combineArr2 = [...arr1, ...arr2];  <span class=\"comment\">// es6</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(conbineArr,combineArr2);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>数组的克隆</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr1 = [<span class=\"string\">&#x27;e&#x27;</span>,<span class=\"string\">&#x27;g&#x27;</span>,<span class=\"string\">&#x27;m&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> arr2 = [...arr1];   <span class=\"comment\">// [&#x27;e&#x27;,&#x27;g&#x27;,&#x27;m&#x27;]</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>将伪数组转换为真正的数组</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> divs = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">&#x27;div&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> divArr = [...divs];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(divArr);   <span class=\"comment\">// arguments</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"symbol-的基本使用\"><a class=\"markdownIt-Anchor\" href=\"#symbol-的基本使用\">#</a> symbol 的基本使用</h2>\n<blockquote>\n<p>symbol 数据类型的特点，是 JavaScript 语言的第七种数据类型</p>\n</blockquote>\n<ul>\n<li>sumbol 的值是唯一的，用来解决命名冲突的问题</li>\n<li>symbol 值不能与其它数据进行运算</li>\n<li>symbol 定义的对象属性不能使用 for… in 循环遍历，Reflect.ownKeys 获取对象键名</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建symbol</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> s = <span class=\"built_in\">Symbol</span>();</span><br><span class=\"line\"><span class=\"keyword\">let</span> s2 = <span class=\"built_in\">Symbol</span>(<span class=\"string\">&#x27;shang&#x27;</span>);\t\t<span class=\"comment\">// 字符串里只是一种标识</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> s3 = <span class=\"built_in\">Symbol</span>(<span class=\"string\">&#x27;shang&#x27;</span>);\t\t<span class=\"comment\">// 这里的Symbol是函数</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s2 == s3);\t\t\t<span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 通过Symbol.for()方式创建</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> s4 = <span class=\"built_in\">Symbol</span>.for(<span class=\"string\">&#x27;shang&#x27;</span>);\t<span class=\"comment\">// 这里的Symbol是对象</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> s5 = <span class=\"built_in\">Symbol</span>.for(<span class=\"string\">&#x27;shang&#x27;</span>);\t<span class=\"comment\">// 通过描述的字符串得出唯一的symbol值</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(s4 = s5);\t\t\t<span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>JavaScript 数据类型 : USONB</p>\n</blockquote>\n<ul>\n<li>u\t\tundefined</li>\n<li>s       string    symbol</li>\n<li>o       object</li>\n<li>n        null      number</li>\n<li>b        boolean</li>\n</ul>\n<blockquote>\n<p>symbol 是独一无二的值，用来给对象添加属性和方法</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 给game对象添加属性和方法</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> game = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 声明一个对象</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> methods = &#123;</span><br><span class=\"line\">    up: <span class=\"built_in\">Symbol</span>(),</span><br><span class=\"line\">    down: <span class=\"built_in\">Symbol</span>()</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">game[methods.up] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;up&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">game[methods.down] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;down&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> youxi = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">&#x27;langrensha,</span></span><br><span class=\"line\"><span class=\"string\">    [Symbol(&#x27;</span>say<span class=\"string\">&#x27;)] : function()&#123;</span></span><br><span class=\"line\"><span class=\"string\">        console.log(&#x27;</span>i can say<span class=\"string\">&#x27;）;</span></span><br><span class=\"line\"><span class=\"string\">    &#125;，</span></span><br><span class=\"line\"><span class=\"string\">    [Symbol(&#x27;</span>zibao<span class=\"string\">&#x27;)]: function() &#123;</span></span><br><span class=\"line\"><span class=\"string\">        console.log(&#x27;</span>i can zibao<span class=\"string\">&#x27;);</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>symbol 内置属性：这些属性对应的值都是用来控制这个对象在特定场景下的一个表现</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>Symbol.hasInstance</th>\n<th>当其他对象使用 instanceof 运算符，判断是否为该对象的实例时，会调用这个方法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Symbol.replace</strong></td>\n<td><strong>当该对象被 str.replace (myObject) 方法调用时，会返回该方法的返回值</strong></td>\n</tr>\n<tr>\n<td><strong>Symbol.split</strong></td>\n<td><strong>当该对象被 str.split (myObject) 方法调用时，会返回该方法的返回值</strong></td>\n</tr>\n<tr>\n<td><strong>Symbol.iterator</strong></td>\n<td><strong>对象进行 for…of 循环时，会调用 Symbol.iterator 方法，返回该对象的默认遍历器</strong></td>\n</tr>\n<tr>\n<td><strong>…</strong></td>\n<td><strong>…</strong></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"迭代器\"><a class=\"markdownIt-Anchor\" href=\"#迭代器\">#</a> 迭代器</h2>\n<blockquote>\n<p>迭代器是一种接口，为各种不同的数据结构提供统一的访问机制，任何数据只要部署了 iterator 接口 (对象里的一个属性)，可完成遍历操作</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> xiyou = [<span class=\"string\">&#x27;tangsheng&#x27;</span>, <span class=\"string\">&#x27;sunyukong&#x27;</span>, <span class=\"string\">&#x27;shasheng&#x27;</span>, <span class=\"string\">&#x27;zhubajie&#x27;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> v <span class=\"keyword\">of</span> xiyou)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(v);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> iterator = xiyou[<span class=\"built_in\">Symbol</span>.iterator]();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next());</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next());</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next());</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 自定义遍历数据</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> banji = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">&#x27;终极一班&#x27;</span>,</span><br><span class=\"line\">    stus: [</span><br><span class=\"line\">        <span class=\"string\">&#x27;xiaoming&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;xiaotian&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;xiaoning&#x27;</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    [<span class=\"built_in\">Symbol</span>.iterator]()&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 声明一个索引变量</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> _this = <span class=\"built_in\">this</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            next: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(index &lt; _this.stus.length)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">const</span> result = &#123;<span class=\"attr\">value</span>: _this.stus[index],<span class=\"attr\">done</span>: <span class=\"literal\">false</span>&#125;;</span><br><span class=\"line\">                    <span class=\"comment\">// 下标自增</span></span><br><span class=\"line\">                    index++;</span><br><span class=\"line\">                    <span class=\"comment\">// 返回结果</span></span><br><span class=\"line\">                    <span class=\"keyword\">return</span> result</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> &#123;<span class=\"attr\">value</span>: <span class=\"literal\">undefined</span>, <span class=\"attr\">done</span>: <span class=\"literal\">true</span>&#125;;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> v <span class=\"keyword\">of</span> banji) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>,log(v);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">banji.stus.forEach();   <span class=\"comment\">// forEach() 是数组的方法，不能用于对象</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"生成器\"><a class=\"markdownIt-Anchor\" href=\"#生成器\">#</a> 生成器</h2>\n<blockquote>\n<p>特殊的函数     异步编程 （比如回调函数）</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> * <span class=\"title\">gen</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">//  console.log(&quot;hello generator&quot;);</span></span><br><span class=\"line\">    <span class=\"comment\">// yield 将代码进行分块</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;111&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">     <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;222&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">     <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;333&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">     <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;444&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> iterator = gen();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 遍历</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> v <span class=\"keyword\">of</span> gen)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(v);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>生成函数的参数</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> * <span class=\"title\">gen</span>(<span class=\"params\">arg</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(arg);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> one = <span class=\"keyword\">yield</span> <span class=\"number\">111</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(one);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> two = <span class=\"keyword\">yield</span> <span class=\"number\">222</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(two);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> three = <span class=\"keyword\">yield</span> <span class=\"number\">333</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(three);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> iterator = gen(<span class=\"string\">&#x27;AAA&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">// next方法可以传入实参  传入的参数将作为上一个yeild语句的返回结果</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next());</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next(<span class=\"string\">&#x27;BBB&#x27;</span>));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next(<span class=\"string\">&#x27;CCC&#x27;</span>));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next(<span class=\"string\">&#x27;DDD&#x27;</span>));</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>生成器函数实例</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 异步编程：文件操作   网络操作（AJAX、request）  数据库操作</span></span><br><span class=\"line\"><span class=\"comment\">// 1s后控制台输出 111   2s后输出222   3s后输出333</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 可以达到效果，但是不具有易读性、且难以调试    称为【回调地狱】</span></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">111</span>);</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">   \t\t <span class=\"built_in\">console</span>.log(<span class=\"number\">222</span>);</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">   \t\t\t <span class=\"built_in\">console</span>.log(<span class=\"number\">333</span>);</span><br><span class=\"line\">\t\t&#125;,<span class=\"number\">3000</span>);</span><br><span class=\"line\">\t&#125;,<span class=\"number\">2000</span>);</span><br><span class=\"line\">&#125;,<span class=\"number\">1000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 生成器函数 解决了 回调地狱</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">one</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"number\">111</span>);</span><br><span class=\"line\">        iterator.next();</span><br><span class=\"line\">    &#125;,<span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">two</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"number\">222</span>);</span><br><span class=\"line\">        iterator.next();</span><br><span class=\"line\">    &#125;,<span class=\"number\">2000</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">three</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"number\">333</span>);</span><br><span class=\"line\">        iterator.next();</span><br><span class=\"line\">    &#125;,<span class=\"number\">3000</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> * <span class=\"title\">gen</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> one();</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> two();</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> three();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 调用生成器函数</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> iterator = gen();</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取数据  用户数据  订单数据  商品数据</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getUsers</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> data = <span class=\"string\">&#x27;用户数据&#x27;</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 调用next方法，并将数据传入</span></span><br><span class=\"line\">        iterator.next(data);</span><br><span class=\"line\">    &#125;,<span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getOrders</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> data = <span class=\"string\">&#x27;订单数据&#x27;</span>;</span><br><span class=\"line\">        iterator.next(data);</span><br><span class=\"line\">    &#125;,<span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getGoods</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> data = <span class=\"string\">&#x27;商品数据&#x27;</span>;</span><br><span class=\"line\">    &#125;,<span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> * <span class=\"title\">gen</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> users = <span class=\"keyword\">yield</span> getUsers();</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(users);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> orders = <span class=\"keyword\">yield</span> getOrders();</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(orders);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> goods = <span class=\"keyword\">yield</span> getGoods();</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(goods);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> iterator = gen();</span><br><span class=\"line\">iterator.next();</span><br></pre></td></tr></table></figure>\n<h2 id=\"promise\"><a class=\"markdownIt-Anchor\" href=\"#promise\">#</a> Promise</h2>\n<blockquote>\n<p>异步编程新的解决方案，语法上是一个构造函数，用来封装异步操作并可以获取其成功或失败的结果</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve,reject</span>) =&gt; </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">let</span> data = <span class=\"string\">&#x27;数据库中的用户数据&#x27;</span>;</span><br><span class=\"line\">    \t\tresolve(data);</span><br><span class=\"line\">    \t\t<span class=\"comment\">// let err = &#x27;数据发生错误&#x27;;</span></span><br><span class=\"line\">            <span class=\"comment\">// reject(err);</span></span><br><span class=\"line\">\t\t&#125;,<span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 调用promise对象的 then 方法</span></span><br><span class=\"line\">p.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(value);</span><br><span class=\"line\">&#125;,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">reason</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(reason);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>读取文件：使用 Promise 封装</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 前提需要引入fs模块</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>)</span>&#123;</span><br><span class=\"line\">   fs.readFile(<span class=\"string\">&quot;路径&quot;</span>, <span class=\"function\">(<span class=\"params\">err,data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span>(err)  reject(err);</span><br><span class=\"line\">       resolve(data);</span><br><span class=\"line\">   &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">p.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(value.toString());</span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">reason</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;读取失败&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>使用 Promise 封装 AJAX 请求</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1. 创建对象</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\"><span class=\"comment\">// 2. 初始化</span></span><br><span class=\"line\">xhr.open(<span class=\"string\">&quot;GET&quot;</span>,<span class=\"string\">&quot;https://api.apiopen.top/...&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 3. 发送</span></span><br><span class=\"line\">xhr.send();</span><br><span class=\"line\"><span class=\"comment\">// 4.绑定事件  处理响应结果</span></span><br><span class=\"line\">xhr.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(xhr.status &gt;= <span class=\"number\">200</span> &amp;&amp; xhr.status &lt; <span class=\"number\">300</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(xhr.response);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.error(xhr.status);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1. 创建对象</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">    <span class=\"comment\">// 2. 初始化</span></span><br><span class=\"line\">    xhr.open(<span class=\"string\">&quot;GET&quot;</span>,<span class=\"string\">&quot;https://api.apiopen.top/...&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 3. 发送</span></span><br><span class=\"line\">    xhr.send();</span><br><span class=\"line\">    <span class=\"comment\">// 4.绑定事件  处理响应结果</span></span><br><span class=\"line\">    xhr.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(xhr.status &gt;= <span class=\"number\">200</span> &amp;&amp; xhr.status &lt; <span class=\"number\">300</span>)&#123;</span><br><span class=\"line\">            resolve(xhr.response);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            reject(xhr.status);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 指定回调</span></span><br><span class=\"line\">p.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(value);</span><br><span class=\"line\">&#125;,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">reason</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(reason);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Promise.prototype.then</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// p 为 Promise对象</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> result = p.then(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(value);</span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"params\">reason</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(reason);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result);   <span class=\"comment\">// then方法返回的也是一个Promise</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>then 方法返回的也是一个 Promise 对象</p>\n</li>\n<li>\n<p>对象的状态由回调函数的执行结果决定</p>\n<ol>\n<li>回调函数返回的结果是 【非 Promise 类型的属性】，状态为成功，返回值为对象成功的值</li>\n<li>如果是 Promise 对象，那么 Promise 对象的状态决定了 then 方法返回的 Promise 对象的状态</li>\n</ol>\n</li>\n<li>\n<p>由于返回的结果都是 Promise 对象，所以通过 then 方法可以链式调用，解决了回调地狱</p>\n</li>\n</ul>\n<blockquote>\n<p>使用 Promise 异步读取多个文件并合并内容</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>)=&gt;</span> &#123;</span><br><span class=\"line\">    fs.readFile(<span class=\"string\">&quot;path1&quot;</span>, <span class=\"function\">(<span class=\"params\">err,data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 理论上这里要进行读取成功/失败的判断，确保成功前提下，这里直接调用resolve</span></span><br><span class=\"line\">        resolve(data);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">p.then(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</span><br><span class=\"line\">    fs.readFile(<span class=\"string\">&quot;path2&quot;</span>, <span class=\"function\">(<span class=\"params\">err,data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        resolve(value, data);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        fs.readFile(<span class=\"string\">&quot;path3&quot;</span>, <span class=\"function\">(<span class=\"params\">err,data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            value.push(data);</span><br><span class=\"line\">            resolve(value);</span><br><span class=\"line\">    \t&#125;);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(value.join(<span class=\"string\">&#x27;\\r\\n&#x27;</span>));</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>catch 方法：用于指定发生错误的回调函数</p>\n</blockquote>\n<ul>\n<li>\n<p>可以看作是 then 方法的一个语法糖，回调函数只用传一个参数</p>\n</li>\n<li>\n<p>then 方法指定的回调函数如果允许抛出错误，也会被 catch 捕捉</p>\n</li>\n<li>\n<p>错误总会被下一个 catch 语句捕获</p>\n</li>\n</ul>\n<h2 id=\"set集合\"><a class=\"markdownIt-Anchor\" href=\"#set集合\">#</a> Set (集合)</h2>\n<blockquote>\n<p>ES6 提供的新的数据结构 Set (集合)。类似于数组，但是成员的值都是唯一的，且实现了 iterator 接口，可以使用扩展运算符和 for…of 进行遍历</p>\n</blockquote>\n<ul>\n<li>属性和方法如下：\n<ol>\n<li>size\t\t返回集合元素个数</li>\n<li>add       向集合中添加新元素，返回当前集合</li>\n<li>delete    删除元素，返回 boolean 值</li>\n<li>has         检查集合中是否包含某个元素，返回 boolean 值</li>\n<li>clear       清空集合，返回 undefined</li>\n</ol>\n</li>\n</ul>\n<blockquote>\n<p>集合实践</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">4</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2 = [<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 去重</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> result = [...new <span class=\"built_in\">Set</span>(arr)];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 交集</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> result1 = [...new <span class=\"built_in\">Set</span>(arr)].filter(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>(arr2).has(item));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result1);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 并集</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> union = [...new <span class=\"built_in\">Set</span>([...arr, ...arr2])];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(union);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 差集</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> diff = [...new <span class=\"built_in\">Set</span>(arr)].filter(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> !(<span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>(arr2).has(item)));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(diff);</span><br></pre></td></tr></table></figure>\n<h2 id=\"map\"><a class=\"markdownIt-Anchor\" href=\"#map\">#</a> Map</h2>\n<blockquote>\n<p>类似于对象，是键值对的集合</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义Map</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> m = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\"><span class=\"comment\">// 设置键值</span></span><br><span class=\"line\">m.set(<span class=\"string\">&#x27;name&#x27;</span>,<span class=\"string\">&#x27;shangguigu&#x27;</span>);</span><br><span class=\"line\">m.set(<span class=\"string\">&#x27;change&#x27;</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;i can change you&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">let</span> key = &#123;</span><br><span class=\"line\">    school : <span class=\"string\">&#x27;atguigu&#x27;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">m.set(key, [<span class=\"string\">&#x27;北京&#x27;</span>,<span class=\"string\">&#x27;上海&#x27;</span>]);</span><br><span class=\"line\"><span class=\"comment\">// 获取键值对个数</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(m.size);</span><br><span class=\"line\"><span class=\"comment\">// 删除</span></span><br><span class=\"line\">m.delete(<span class=\"string\">&#x27;name&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 获取键的值</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(m.get(<span class=\"string\">&#x27;change&#x27;</span>));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(m.get(<span class=\"string\">&#x27;key&#x27;</span>));</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "ES6"
            ]
        }
    ]
}