{
    "version": "https://jsonfeed.org/version/1",
    "title": "CsStar • All posts by \"es7-11\" tag",
    "description": "Work Hard To Be A Better Man",
    "home_page_url": "http://csstar.top",
    "items": [
        {
            "id": "http://csstar.top/2022/03/11/ES7-11/",
            "url": "http://csstar.top/2022/03/11/ES7-11/",
            "title": "ES7-11",
            "date_published": "2022-03-11T06:00:54.000Z",
            "content_html": "<h1 id=\"es7-11\"><a class=\"markdownIt-Anchor\" href=\"#es7-11\">#</a> ES7-11</h1>\n<h2 id=\"es7\"><a class=\"markdownIt-Anchor\" href=\"#es7\">#</a> ES7</h2>\n<ul>\n<li>Array.prototype.includes\t\t方法用来检测数组中是否包含某个元素，返回 boolean 值</li>\n<li>指数操作符  **                       用来实现幂运算，功能与 Math.pow 结果相同</li>\n</ul>\n<h2 id=\"es8\"><a class=\"markdownIt-Anchor\" href=\"#es8\">#</a> ES8</h2>\n<blockquote>\n<p>async 函数</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// return 不是一个 Promise  类型的对象  则函数结果为一个成功的Promise对象</span></span><br><span class=\"line\">    <span class=\"comment\">// throw 抛出错误，则函数结果为一个失败的Promise对象</span></span><br><span class=\"line\">    <span class=\"comment\">// 返回结果是一个 Promise对象 那么返回一个成功的Promise对象</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        resolve(<span class=\"string\">&#x27;sucess&#x27;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// reject(&#x27;error&#x27;);</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> result = fn();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 调用then方法</span></span><br><span class=\"line\">result.then(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;sucess&#x27;</span>);</span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"params\">reason</span> =&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.warn(<span class=\"string\">&#x27;reason&#x27;</span>);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>await 表达式</p>\n</blockquote>\n<ul>\n<li>必须放在 async 函数中</li>\n<li>右侧表达式一般为 promise 对象</li>\n<li>await 返回的是 promise 成功的值</li>\n<li>await 的 promise 如果失败了，会抛出异常，需要通过 try…catch 捕获异常</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>) =&gt;</span>&#123;</span><br><span class=\"line\">    resolve(<span class=\"string\">&#x27;sucess&#x27;</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> result = <span class=\"keyword\">await</span> p;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result);    <span class=\"comment\">// 返回一个成功的Promise对象</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>对象方法扩展</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> school = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">&#x27;eric&#x27;</span>,</span><br><span class=\"line\">    cities: [<span class=\"string\">&#x27;beijing&#x27;</span>,<span class=\"string\">&#x27;shanghai&#x27;</span>,<span class=\"string\">&#x27;guangzhou&#x27;</span>,<span class=\"string\">&#x27;shenzhen&#x27;</span>],</span><br><span class=\"line\">    xueke: [<span class=\"string\">&#x27;math&#x27;</span>,<span class=\"string\">&#x27;java&#x27;</span>,<span class=\"string\">&#x27;front&#x27;</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取对象所有键</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.keys(school));</span><br><span class=\"line\"><span class=\"comment\">// 获取对象所有值</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.values(school));</span><br><span class=\"line\"><span class=\"comment\">// 获取所有的键值</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.entries(school));</span><br><span class=\"line\"><span class=\"comment\">// 创建Map</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> m = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>(<span class=\"built_in\">Object</span>.entries(school));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(m.get(<span class=\"string\">&#x27;cities&#x27;</span>));</span><br><span class=\"line\"><span class=\"comment\">// 对象属性的描述对象</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.getPropertyDescriptors(school));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>,&#123;</span><br><span class=\"line\">    name: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 设置值</span></span><br><span class=\"line\">        value: <span class=\"string\">&#x27;eric&#x27;</span>,</span><br><span class=\"line\">        <span class=\"comment\">// 属性特性</span></span><br><span class=\"line\">        writable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        configurable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        enumerable: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"es9\"><a class=\"markdownIt-Anchor\" href=\"#es9\">#</a> ES9</h2>\n<blockquote>\n<ul>\n<li>Rest 参数与 spread 扩展运算符在 ES6 中只针对数组，在 ES9 中也支持对象</li>\n<li>正则扩展 - 命名捕获分组     （?<name>.*）      提取规则更加方便   结果 groups 是捕获内容</name></li>\n<li>正则扩展 - 反向断言      根据正则表达式做唯一识别</li>\n<li>正则表达式 - dotAll 模式     正则表达式中。匹配除回车外的任何单字符，标记【s】改变这种行为，匹配任意单个字符</li>\n</ul>\n</blockquote>\n<h2 id=\"es10\"><a class=\"markdownIt-Anchor\" href=\"#es10\">#</a> ES10</h2>\n<blockquote>\n<ul>\n<li>Object.fromEnteries                      将二维数组转换为对象</li>\n<li>trimStart 和 trimEnd                       清除左侧右侧空白</li>\n<li>Array.prototype.flat 和 flatMap       将多维数组进行降维    |       先 map 后 flat</li>\n<li>Symbol.prototype.description       获取描述</li>\n</ul>\n</blockquote>\n<h2 id=\"es11\"><a class=\"markdownIt-Anchor\" href=\"#es11\">#</a> ES11</h2>\n<blockquote>\n<ul>\n<li>私有属性      在对象中通过 #变量名来声明     实例化对象不能直接访问，可以在类的内部定义方法访问私有属性</li>\n<li>Promise.allSettled         返回一个在所有给定的 promise 都已经 <code>fulfilled</code>  或 <code>rejected</code>  后的 promise，并带有一个对象数组，每个对象表示对应的 promise 结果</li>\n</ul>\n<ol>\n<li>当有多个彼此不依赖的异步任务成功完成时，或者想知道每个 promise 的结果时，通常使用它</li>\n<li>promise.all（）更适合彼此相互依赖或者在其中任何一个 reject 时立即结束</li>\n</ol>\n<ul>\n<li>String.prototype.matchAll     返回的结果是一个可迭代对象   可以使用 for…of 进行迭代   也可以使用扩展运算符</li>\n<li>可选链操作符</li>\n<li>动态 import           需要使用的时候才导入</li>\n<li>Bigint 类型</li>\n<li>globalThis              绝对全局对象     始终指向全局对象</li>\n</ul>\n</blockquote>\n",
            "tags": [
                "ES7-11"
            ]
        }
    ]
}