{
    "version": "https://jsonfeed.org/version/1",
    "title": "CsStar • All posts by \"前端知识\" tag",
    "description": "Work Hard To Be A Better Man",
    "home_page_url": "http://csstar.top",
    "items": [
        {
            "id": "http://csstar.top/2022/03/16/%E7%BD%91%E7%BB%9C/",
            "url": "http://csstar.top/2022/03/16/%E7%BD%91%E7%BB%9C/",
            "title": "网络",
            "date_published": "2022-03-16T15:11:34.000Z",
            "content_html": "<h2 id=\"tcp-vs-udp\"><a class=\"markdownIt-Anchor\" href=\"#tcp-vs-udp\">#</a> <strong>TCP vs  UDP</strong></h2>\n<ul>\n<li>TCP   面向连接的、可靠的、基于字节流的传输层通信协议</li>\n<li>UDP   提供简单不可靠的非连接传输服务，面向报文</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th><code>TCP</code></th>\n<th><code>UDP</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>面向连接的，可靠性高</td>\n<td>非连接的，可靠性低</td>\n</tr>\n<tr>\n<td>基于三次握手，信息有延时，时效性较差</td>\n<td>时效性好，常用于实时传输</td>\n</tr>\n<tr>\n<td>首部开销 20 字节，如果携带的用户数据较小，则利用率低</td>\n<td>首部开销 8 字节，可以传输更多的用户数据</td>\n</tr>\n<tr>\n<td>端对端的，有序号机制、确认机制、超时重传机制，确保数据可靠交付</td>\n<td>一对一、一对多、多对一、多对多的交互通信</td>\n</tr>\n<tr>\n<td>FTP（应用层协议）基于 TCP</td>\n<td>DNS（应用层协议）基于 UDP</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"xss-跨网站指令码\"><a class=\"markdownIt-Anchor\" href=\"#xss-跨网站指令码\">#</a> XSS: 跨网站指令码</h2>\n<ul>\n<li>反射型</li>\n<li>存储型</li>\n<li>DOM-based 型</li>\n</ul>\n<p>如何攻击：通过修改 HTML 节点或者运行 JS 脚本进行攻击</p>\n<p>如何防御：</p>\n<ul>\n<li>\n<p>最普遍的做法是对输入输出的内容进行转义，对于引号、尖括号、斜杠进行转义。  如果有特定的文本不能进行转义，需要设置黑白名单来进行过滤</p>\n</li>\n<li>\n<p>CSP: 内容安全策略     本质上也是建立白名单，规定浏览器只能够执行特定来源的代码   通过设置  <code>HTTP Header中的Content-Security-Policy 来开启CSP</code></p>\n<ol>\n<li>只允许加载本站资源</li>\n<li>只允许加载 https 协议的图片</li>\n<li>允许加载任何来源框架</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"csrf跨站请求伪造-是一种挟持用户在已经登录的web应用程序上执行非本意操作的攻击方法\"><a class=\"markdownIt-Anchor\" href=\"#csrf跨站请求伪造-是一种挟持用户在已经登录的web应用程序上执行非本意操作的攻击方法\">#</a> CSRF：跨站请求伪造    是一种挟持用户在已经登录的 web 应用程序上执行非本意操作的攻击方法</h2>\n<p>如何防御：</p>\n<ol>\n<li>get 请求不对数据进行修改</li>\n<li>不让第三方网站访问到用户的 Cookie                       对 cookie 设置 Samesite 属性，该属性设置 cookie 不随着跨域请求发送</li>\n<li>阻止第三方网站请求接口                                       验证 Referer 来判断请求是否由第三方网站发起的</li>\n<li>请求时附带验证信息，比如验证码或者 Cookie           服务器下发一个随机的 Token，每次用户发送请求的时候，必须携带这个 Token，然后服务器对其进行检验</li>\n</ol>\n<h2 id=\"密码安全\"><a class=\"markdownIt-Anchor\" href=\"#密码安全\">#</a> 密码安全</h2>\n<blockquote>\n<p>加盐：对于密码存储来说，必然是不能明文存储在数据库中，不然一旦数据库泄漏，会对用户造成巨大的损失。</p>\n<ul>\n<li>加盐就是给原密码添加字符串。加盐后的密码再进行一些列的加密算法处理。</li>\n<li>加盐并不能阻止别人盗取账号，只能确保即使数据库泄漏，也不会暴露用户的真实密码</li>\n<li>通常使用验证码增产时延或者限制尝试次数的方式，并且当输入错误时，不能提示密码输入错误，而是提示账号或者密码输入错误</li>\n</ul>\n</blockquote>\n<h2 id=\"三次握手\"><a class=\"markdownIt-Anchor\" href=\"#三次握手\">#</a> 三次握手</h2>\n<p>客户端：closed——》SYN  Send——》established</p>\n<p>服务端：closed——》Listened——》SYN Receive——》established</p>\n<blockquote>\n<p>为什么需要三次握手</p>\n</blockquote>\n<p>如果 A 向 B 发送了一个连接请求，由于网络延时原因，这个 A 发送的请求长时间没有被 B 接收，就会触发超时重传机制，重新发送的请求被 B 接收到后，两者顺利建立连接并开始传输信息或者数据，然后连接结束，两者处于 closed 状态。但此时，之前由于网络延时而未到达的请求到达了 B，B 以为 A 又要建立新的连接，便应答了请求，从而处于 established 状态，而此时 A 是 closed 状态，那么服务器就会一直等客户端传输数据，会造成资源浪费。</p>\n<h2 id=\"四次挥手\"><a class=\"markdownIt-Anchor\" href=\"#四次挥手\">#</a> 四次挥手</h2>\n<p><strong>断开连接时，两端都需要发送 FIN 和 ACK 信号</strong></p>\n<p>客户端：established——》FIN-WAIT-1——》FIN-WAIT-2——》TIME_WAIT——》closed</p>\n<p>服务端：established——》close-wait——》last-ack——》closed</p>\n<ul>\n<li>如果客户端 A 认为需要发送的数据已经发送完成，向给服务器 B 发送连接释放的请求</li>\n<li>B 收到释放请求后，会告诉应用层要释放 TCP 连接，然后发送 ACK 包，进入 close-wait 状态，表明 A 到 B 的连接已经释放，不再接收 A 发送的数据。但此时 B 仍然可以发送数据给 A</li>\n<li>B 如果此时还有没发送完的数据继续发送，数据发送完毕后，向 A 发送释放连接请求，然后 B 进入 last-ack 状态</li>\n<li>A 收到请求后，向 B 发送确认应答，此时 A 进入 Time-wait 状态。该状态会持续一个最大生命周期，如果该段时间内没有收到来自 B 的重发请求话，就进入 closed 状态，B 接收到 A 发送的确认信号后，进入 closed 状态。</li>\n</ul>\n<blockquote>\n<p>为什么 A 需要等待 2MSL 时间？</p>\n</blockquote>\n<p>为了确保 B 能够收到 A 发送的确认断开的信号，因为如果确认信息由于网络问题一直没有到达，就会导致 B 不能正常关闭。</p>\n<p><strong>拥塞处理</strong></p>\n<ul>\n<li>慢开始、拥塞避免</li>\n<li>快速重传、快速恢复</li>\n</ul>\n<h2 id=\"get请求和post请求\"><a class=\"markdownIt-Anchor\" href=\"#get请求和post请求\">#</a> get 请求和 post 请求</h2>\n<ul>\n<li>get 请求由于 url 长度的限制导致请求参数有长度限制，而 post 请求没有长度限制</li>\n<li>post 请求相对于 get 请求安全些，因为 get 请求参数都展示在 url 上</li>\n<li>post 可以通过 request body 传输更多的数据，而 get 没有这个技术</li>\n<li>post 支持更多的编码类型且不对数据类型限制</li>\n<li>在前端使用接口编写参数的时候，post 对于复杂的请求参数更容易编写</li>\n</ul>\n<h2 id=\"常见状态码\"><a class=\"markdownIt-Anchor\" href=\"#常见状态码\">#</a> 常见状态码</h2>\n<hr>\n<p><strong>2xx  成功</strong></p>\n<ul>\n<li><code>200 ok 表示客户端发送的请求被服务器正常处理</code></li>\n<li>204 no content  表示请求成功，但是响应报文不包含实体的主体部分</li>\n<li>205 reset content  与 204 一样，但是要求请求方重置内容</li>\n<li>206 partial Content   进行范围请求</li>\n</ul>\n<p><strong>3xx 重定向</strong></p>\n<ul>\n<li><code>301 moved  permanently    永久性重定向，表示资源已经被分配到新的url</code></li>\n<li><code>302 found   临时性重定向</code></li>\n<li>303   see other  表示资源存在着另一个 URL，应该使用 get 方法请求资源</li>\n</ul>\n<p><strong>4xx  客户端错误</strong></p>\n<ul>\n<li><code>400 bad request  请求报文存在语法错误</code></li>\n<li><code>401 unauthorized  表示发送的请求需要有HTTP认证的认证信息</code></li>\n<li><code>402  forbidden   请求资源被服务器拒绝</code></li>\n<li><code>404  not found   服务器没有找到请求的资源</code></li>\n</ul>\n<p><strong>5xx  服务器错误</strong></p>\n<ul>\n<li><code>500 internal server error  服务器在执行请求时发生了错误</code></li>\n<li>501 not implemented   服务器不支持当前请求的某个功能</li>\n<li><code>503  service unavailable   服务器此时处于超负载或者正在停机维护，无法处理请求</code></li>\n</ul>\n<h2 id=\"https\"><a class=\"markdownIt-Anchor\" href=\"#https\">#</a> HTTPS</h2>\n<p>HTTPS 还是通过 HTTP 进行信息的传输，但是信息通过 TLS 协议进行了加密。</p>\n<p>TLS 使用了两种加密技术：对称加密和非对称加密。</p>\n<ul>\n<li>\n<p>对称加密指两边具有相同的密钥，两边都知道将密文进行加密解密</p>\n</li>\n<li>\n<p>非对称加密，有公钥和私钥之分，公钥所有人都知道，可以将数据用公钥进行加密，但是数据只能用私钥进行解密，而私钥只有发放公钥的一方知道</p>\n</li>\n<li>\n<p>一般双方确认通信前使用非对称加密方式，一旦双方确认后，为了提高性能，两端使用对称加密的方式进行通信</p>\n</li>\n</ul>\n<blockquote>\n<p>TLS 握手过程</p>\n</blockquote>\n<ol>\n<li>客户端发送一个随机值，需要的协议以及加密方式</li>\n<li>服务端收到这个随机值，自己也产生一个随机值，根据客户端发来的协议和加密方式进行处理，发送自己的证书</li>\n<li>客户端收到这个证书并检验是否有效，通过后会再产生一个随机值，通过服务端证书的公钥加密这个随机值并发送给服务端（如果服务端需要客户端证书，需要携带）</li>\n<li>服务端收到这个加密的随机值使用私钥进行解密，这时候两端都有三个随机值，可以通过这三个随机值通过约定的加密方式生成密钥，后面的通信使用这个密钥进行加密解密</li>\n</ol>\n<blockquote>\n<p>HTTPS 2.0</p>\n</blockquote>\n<p>1.x 中，为了性能考虑，我们常常使用精灵图，将小图内联等方式，主要是因为浏览器限制了同一域名下的请求数量，当页面请求的资源过多时，会造成队头阻塞，一些资源需要等待其它资源请求完毕后才能发起请求。</p>\n<blockquote>\n<p>HTTPS 2.0 改进的地方</p>\n</blockquote>\n<ul>\n<li>二进制传输 ：  文本传输数据 ——》新的编码方式，数据被分割，采用二进制编码方式</li>\n<li>多路复用 ：     两个概念：帧 和 流   帧是最小的数据单位，多个帧组成数据流   多路复用就是在一个 TCP 连接中可以存在多条流，解决了队头阻塞的问题</li>\n<li>Header 压缩 ：  在之前的版本中，使用文本形式传输 headers  且携带 cookie 的情况下，每次都要重复传输大量字节   2.0 中使用了 HPACK 对传输的 header 进行压缩，并在两端维护了索引表，用于记录出现过的 headers，后面传输过程中，就只需要穿记录的 haders 的键名，服务端收到键名后可以找到对应的值</li>\n<li>服务端 PUSH  ：服务端在收到客户端的请求后，主动推送一些其它资源</li>\n</ul>\n<h2 id=\"dns\"><a class=\"markdownIt-Anchor\" href=\"#dns\">#</a> DNS</h2>\n<blockquote>\n<p><strong>将域名解析为 IP 的过程，查询过程主要有：迭代查询和递归查询（比较少用）两种</strong></p>\n</blockquote>\n<p><strong>迭代查询过程</strong>（本地域名服务器向根域名服务器的查询采用迭代查询）</p>\n<ol>\n<li>客户机向本地域名服务器发送 DNS 请求报文（递归查询）</li>\n<li>本地域名服务器收到请求后，查询本地缓存，如果没有记录，以 DNS 客户的身份向根域名服务器发送请求</li>\n<li>根域名服务器收到请求后，判断该域名为.com 域，并将顶级域名服务器 dns.com 的 ip 地址返回给本地域名服务器</li>\n<li>本地域名服务器向顶级域名服务器 dns.com 发送 DNS 请求（迭代查询）</li>\n<li>顶级域名服务器收到请求后，判断该域属于 abc.com 域，因此将对应的授权域名服务器 dns.abc.com 的 IP 地址返回给本地域名服务器</li>\n<li>本地域名服务器向授权域名服务器发送请求</li>\n<li>授权域名服务器收到请求后，将查询结果返回给本地域名服务器</li>\n<li>本地域名服务器将查询结果保存到本地缓存后，同时返回给客户机</li>\n</ol>\n<blockquote>\n<p>总结：客户机 ——》本地域名服务器 ——》根域名服务器 ——》本地域名服务器 ——》顶级域名服务器 ——》本地域名服务器 ——》授权域名服务器 ——》本地域名服务器 ——》主机</p>\n</blockquote>\n<blockquote>\n<p><strong>地址栏输入 URL 到页面加载完成的过程</strong></p>\n</blockquote>\n<ol>\n<li>DNS 查询，返回 IP 地址（DNS 查询 IP 的过程）</li>\n<li>TCP 握手（TCP 握手过程）</li>\n<li>TLS 握手，然后开始正式的数据传输（TLS 握手过程）</li>\n<li>数据进入服务端之前，可能会经过负责负载均衡的服务器（将请求合理的分发到多台服务器上），假设服务端响应一个 HTML 文件</li>\n<li>首先，浏览器会判断状态码，如果是 200 继续解析，如果是 400（客户端请求数据出现错误）或者 500（浏览器处理请求错误）会报错，如果是 300 的话，会进行重定向，这里会有个重定向计时器，避免多次重定向，超多一定的次数也会报错</li>\n<li>浏览器开始解析 HTML 文件，如果是 gzip 格式还需要先进行解压，通过文件的编码方式得知如何去解压这个文件</li>\n<li>文件解码成功后，开始正式的渲染流程。根据 HTML 构造 DOM 树，根据 CSS 构建 CSSOM 树。如果遇到 script 标签，会检查是否包含 <code>async</code>  和 <code>defer</code> ，前者会并行下载执行 JS，后者会先下载文件，然后等 HTML 解析完成后顺序执行，如果上述两种属性都没有，就会阻塞渲染流程，知道 JS 代码加载完毕，引入外部资源需要下载，如果资源比较多，长时间的下载，会阻塞页面的渲染流程，导致页面长时间没有响应。</li>\n<li>初始的 HTML 被完全加载和解析后会触发 DomContentLoaded 事件</li>\n<li>CSSOM 树和 DOM 树构建完成后开始生成 Render 树，同时计算元素的坐标，确定元素的布局</li>\n<li>在 Render 树的过程中，浏览器开始调用 GPU 绘制，将内容展示在屏幕上</li>\n</ol>\n",
            "tags": [
                "前端知识"
            ]
        },
        {
            "id": "http://csstar.top/2022/03/14/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%8E%AF%E5%A2%83/",
            "url": "http://csstar.top/2022/03/14/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%8E%AF%E5%A2%83/",
            "title": "浏览器环境",
            "date_published": "2022-03-14T02:32:24.000Z",
            "content_html": "<h1 id=\"script元素\"><a class=\"markdownIt-Anchor\" href=\"#script元素\">#</a> script 元素</h1>\n<h2 id=\"工作原理\"><a class=\"markdownIt-Anchor\" href=\"#工作原理\">#</a> 工作原理</h2>\n<ol>\n<li>浏览器一边下载 HTML 网页，一边开始解析，而不是等下载完后才可以解析</li>\n<li>解析的过程中，如果发现 script 元素，就会停止解析，渲染引擎将控制权转交给 JavaScript 引擎</li>\n<li>如果 script 元素引用了外部脚本，需要先下载外部脚本，如果没有引入，直接执行 script 元素内代码</li>\n<li>JavaScript 引擎执行完毕后，将控制权还给渲染引擎，然后继续向下解析 HTML 网页</li>\n</ol>\n<blockquote>\n<ul>\n<li>\n<p>为什么需要外部脚本下载完毕后才能渲染页面？  因为外部脚本可以修改 DOM，所以必须将控制权交给它，否则就很难控制</p>\n</li>\n<li>\n<p>加载外部脚本的时候，由于渲染引擎已经停止，如果这个外部文件加载需要很长时间，那么浏览器就会一直等，导致页面长时间没有响应，造成一种假死的状态，这被称为 “阻塞效应”</p>\n</li>\n<li>\n<p>重要的脚本最好放在文件头部，或者直接写入 script 标签，对于不重要的脚本可以放到页面底部，等页面渲染完后才执行，这样能缩短加载时间，避免浏览器首屏加载慢等情况</p>\n</li>\n<li>\n<p>当脚本文件位置不恰当时，还会产生一个问题：当页面 DOM 元素还没生成之前就进行 DOM 操作，代码执行肯定会报错，对于这种情况我们可以使用 DOMContentLoaded 事件的回调函数。DOM 结构生成之后才会触发，也可以使用 script 标签的 onload 属性。</p>\n</li>\n</ul>\n</blockquote>\n<h2 id=\"defer属性\"><a class=\"markdownIt-Anchor\" href=\"#defer属性\">#</a> defer 属性</h2>\n<blockquote>\n<p>解决脚本文件下载阻塞网页渲染的问题，使用 defer 属性，可以延迟脚本的执行，等 DOM 加载生成后，再执行脚本。</p>\n</blockquote>\n<p><strong>运行流程</strong></p>\n<ol>\n<li>浏览器开始解析 HTML 网页</li>\n<li>解析过程中，发现带有 defer 属性的 script 标签</li>\n<li>浏览器继续向下解析 HTML 网页，同时下载 script 标签加载的外部脚本</li>\n<li>浏览器完成解析 HTML 网页，返回去执行已经下载完成的脚本</li>\n</ol>\n<p><strong>注意</strong></p>\n<ol>\n<li>对于内置而不是外部加载的脚本，以及动态生成的 script 标签，defer 属性不起作用</li>\n<li>使用  <code>defer</code>  加载的外部脚本不应该使用 document.write 方法</li>\n</ol>\n<h2 id=\"async属性\"><a class=\"markdownIt-Anchor\" href=\"#async属性\">#</a> async 属性</h2>\n<blockquote>\n<p>使用另一个进程下载脚本，下载时不会阻塞页面渲染，解决 “阻塞效应” 的另一个方法</p>\n</blockquote>\n<ol>\n<li>浏览器开始解析 HTML 网页。</li>\n<li>解析过程中，发现带有 <code>async</code>  属性的 <code>script</code>  标签。</li>\n<li>浏览器继续往下解析 HTML 网页，同时并行下载 `` 标签中的外部脚本。</li>\n<li>脚本下载完成，浏览器暂停解析 HTML 网页，开始执行下载的脚本。</li>\n<li>脚本执行完毕，浏览器恢复解析 HTML 网页。</li>\n</ol>\n<blockquote>\n<p><code>async</code>  属性可以保证脚本下载的同时，浏览器继续渲染，一旦采用这个属性，脚本就无法顺序执行，先下载完的脚本先执行。</p>\n<p>脚本之间没有依赖关系，使用 <code>async</code>  属性，有依赖关系使用 <code>defer</code>  属性，同时存在，后者不起作用</p>\n</blockquote>\n<h2 id=\"脚本动态加载\"><a class=\"markdownIt-Anchor\" href=\"#脚本动态加载\">#</a> 脚本动态加载</h2>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">&#x27;a.js&#x27;</span>,<span class=\"string\">&#x27;b.js&#x27;</span>].forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">src</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> script = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;script&#x27;</span>);</span><br><span class=\"line\">    script.src = src;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.head.appendChild(script);</span><br><span class=\"line\">    src.async = <span class=\"literal\">false</span>;  \t<span class=\"comment\">// 保证脚本执行的顺序，同步执行</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>动态加载 <code>script</code>  标签的好处就是不会阻止页面渲染，也不会造成浏览器假死。</p>\n</blockquote>\n<h2 id=\"加载脚本使用的协议\"><a class=\"markdownIt-Anchor\" href=\"#加载脚本使用的协议\">#</a> 加载脚本使用的协议</h2>\n<ul>\n<li>如果不指定协议，浏览器默认使用  <code>HTTP</code>  协议下载</li>\n<li>如果需要使用  <code>HTTPS</code>  协议下载，需要指明</li>\n</ul>\n<h1 id=\"浏览器\"><a class=\"markdownIt-Anchor\" href=\"#浏览器\">#</a> 浏览器</h1>\n<blockquote>\n<p>核心：渲染引擎 和 JavaScript 解释器</p>\n</blockquote>\n<h2 id=\"渲染引擎\"><a class=\"markdownIt-Anchor\" href=\"#渲染引擎\">#</a> 渲染引擎</h2>\n<blockquote>\n<p>将网页代码渲染为用户可见的页面</p>\n</blockquote>\n<p><strong>不同浏览器的渲染引擎</strong></p>\n<ul>\n<li>Firefox：Gecko 引擎</li>\n<li>Safari：WebKit 引擎</li>\n<li>Chrome：Blink 引擎</li>\n<li>IE: Trident 引擎</li>\n<li>Edge: EdgeHTML 引擎</li>\n</ul>\n<p><strong>四个阶段</strong></p>\n<ul>\n<li>解析代码   HTML 解析器解析 HTML 代码为 DOM   CSS 解析器将 CSS 代码解析为 CSS 样式表</li>\n<li>对象合成    将 DOM 和 CSS 样式表进行结合，生成一个个 render 对象，最后构成 render 树</li>\n<li>布局          确定对象的坐标，计算出渲染树的布局</li>\n<li>绘制          将渲染树绘制到屏幕</li>\n</ul>\n<blockquote>\n<p>注：上面四步不是严格按顺序执行的，而是同步交叉执行</p>\n</blockquote>\n<h2 id=\"重流和重绘\"><a class=\"markdownIt-Anchor\" href=\"#重流和重绘\">#</a> 重流和重绘</h2>\n<blockquote>\n<p>渲染树转换为网页布局的过程为重流，布局显示到页面的过程为重绘。</p>\n<ul>\n<li>页面生成以后，脚本和样式的操作都会导致重流和重绘</li>\n<li>重流和重绘并不一定一起发生，重流一定会导致重绘，重绘不一定导致重流，比如改变元素颜色，进行了重绘，但没有改变布局，所以没有进行重流</li>\n<li>浏览器会进行智能优化，将重流和重绘的范围尽可能限制到较小的局部，最小化代价消耗</li>\n</ul>\n</blockquote>\n<p><strong>优化技巧</strong></p>\n<ul>\n<li>读取 DOM 或者写入 DOM，尽量不要写在一起，不要读一个 DOM 节点，就写入一个，这样会导致多次重流，影响页面渲染速度</li>\n<li>缓存 DOM 信息</li>\n<li>不要一项一项地改变 CSS 样式，使用 class 一次性改变样式</li>\n<li>使用  <code>documentFragment</code>  操作 DOM</li>\n<li>动画使用 <code>absolute</code>  定位或者 <code>fixed</code>  定位，减少对其它元素的影响</li>\n<li>只在必要时才显示隐藏元素</li>\n<li>使用 <code>window.requestAnimationFrame()</code> ，因为它可以推迟到代码下一次重流时执行，而不是立即要求页面重流</li>\n<li>使用 <code>虚拟DOM</code></li>\n</ul>\n<h2 id=\"javascript引擎\"><a class=\"markdownIt-Anchor\" href=\"#javascript引擎\">#</a> JavaScript 引擎</h2>\n<blockquote>\n<p>JavaScript 是一种 <code>解释型语言</code> ，也就是说，它不需要编译，由解释器实时运行。</p>\n</blockquote>\n<ul>\n<li>好处：运行和修改比较方便，刷新页面就可以重新解释</li>\n<li>缺点：每次运行都要调用解释器，系统开销大，运行速度慢于编译型语言</li>\n</ul>\n<p>现在的浏览器都将 JavaScript 进行一定的编译，生成类似于 <code>字节码</code> 的中间代码，以提高运行速度</p>\n<p>早期，浏览器内部对 JavaScript 处理过程如下：</p>\n<ol>\n<li>读取代码，进行词法分析（Lexical analysis），将代码分解成词元（token）。</li>\n<li>对词元进行语法分析（parsing），将代码整理成 “语法树”（syntax tree）。</li>\n<li>使用 “翻译器”（translator），将代码转为字节码（bytecode）。</li>\n<li>使用 “字节码解释器”（bytecode interpreter），将字节码转为机器码。</li>\n</ol>\n<blockquote>\n<p>参考链接：<span class=\"exturl\" data-url=\"aHR0cDovL2phdmFzY3JpcHQucnVhbnlpZmVuZy5jb20vYm9tL2VuZ2luZS5odG1s\">http://javascript.ruanyifeng.com/bom/engine.html</span></p>\n</blockquote>\n",
            "tags": [
                "前端知识"
            ]
        },
        {
            "id": "http://csstar.top/2022/03/13/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E8%AE%B0%E5%BD%951/",
            "url": "http://csstar.top/2022/03/13/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E8%AE%B0%E5%BD%951/",
            "title": "前端知识点汇总（一）",
            "date_published": "2022-03-13T09:41:01.000Z",
            "content_html": "<h1 id=\"前端知识点汇总一\"><a class=\"markdownIt-Anchor\" href=\"#前端知识点汇总一\">#</a> 前端知识点汇总（一）</h1>\n<h2 id=\"vue\"><a class=\"markdownIt-Anchor\" href=\"#vue\">#</a> Vue</h2>\n<blockquote>\n<p>Vue 的优缺点</p>\n</blockquote>\n<ul>\n<li>优点</li>\n</ul>\n<ol>\n<li>渐进式，Vue 全家桶包含了很多组件，可以按需选择，而不是全部使用</li>\n<li>组件化开发，代码可维护性和复用性都大大提高</li>\n<li>虚拟 DOM，相比于传统的浏览器渲染更加高效</li>\n<li>数据双向绑定，响应式数据</li>\n<li>单页面路由（SPA），由于不用频繁切换页面，减小了服务器的压力，同时页面更流畅，增强用户体验</li>\n<li>数据与视图分开，便于前后端分离</li>\n</ol>\n<ul>\n<li>缺点</li>\n</ul>\n<ol>\n<li>单页面不利用 SEO</li>\n<li>首屏加载事件长</li>\n</ol>\n<blockquote>\n<p>MVC 和  MVVM</p>\n</blockquote>\n<p><strong>MVC</strong></p>\n<ul>\n<li>Model： 负责从数据库中取数据</li>\n<li>View：负责视图部分，展示数据</li>\n<li>Controller：用户进行交互</li>\n</ul>\n<p><strong>MVVM</strong></p>\n<ul>\n<li>VM：View-Model  数据双向绑定</li>\n<li>View：数据展示</li>\n<li>Model：取数据的地方</li>\n</ul>\n<blockquote>\n<p>Vue 和 Jquery 的区别</p>\n</blockquote>\n<ul>\n<li>Jquery 直接操作 DOM，而 Vue 不直接操作 DOM，使用虚拟 DOM 对象</li>\n<li>Vue 集成了一些库，大大提高了开发效率</li>\n</ul>\n<blockquote>\n<p>Vue 常用修饰符</p>\n</blockquote>\n<ul>\n<li>.lazy\t\t\t\t\t输入框失去焦点的时候更新 v-model 值</li>\n<li>trim                  v-model 绑定的值会去掉首位空格</li>\n<li>.number           将 v-model 绑定的值转换为数字</li>\n<li>.stop                  阻止事件冒泡</li>\n<li>.capture             事件的捕获</li>\n<li>.once                  事件只触发一次</li>\n<li>.left | .middle | .right      点击鼠标左 | 中 | 右键触发</li>\n<li>.self                       点击事件绑定本身才触发</li>\n</ul>\n<blockquote>\n<p>路由的集中模式</p>\n</blockquote>\n<ul>\n<li>hash 模式：  根据 hash 值的改变进行组件的跳转，而不刷新页面</li>\n<li>history 模式：每进行一次跳转，会记录在 history 中，可以进行页面返回</li>\n<li>abstract 模式： 适用于 Node</li>\n</ul>\n<blockquote>\n<p>Vue 指令</p>\n</blockquote>\n<ul>\n<li>v-show</li>\n<li>v-for</li>\n<li>v-if</li>\n<li>v-else</li>\n<li>v-model</li>\n<li>v-text</li>\n<li>v-html</li>\n<li>v-on</li>\n<li>v-bind</li>\n<li>v-once</li>\n<li>v-cloak</li>\n<li>v-slot</li>\n</ul>\n<blockquote>\n<p>组件之间的传值方式</p>\n</blockquote>\n<ul>\n<li>父组件通过 props 传递给子组件</li>\n<li>子组件通过 $emit 对父组件进行传值</li>\n<li>父与子之间通过 $parent  和  $children 获取实例进行通信</li>\n<li>通过 vuex 进行状态管理</li>\n<li>通过 eventBus 进行跨组件值传递</li>\n<li>$ref 获取实例，进行传值</li>\n<li>路由传参</li>\n<li>localStorage、sessionStorage</li>\n</ul>\n<blockquote>\n<p>v-if 和 v-show 的区别</p>\n</blockquote>\n<ul>\n<li>v-if   通过操作 DOM 来决定元素的显隐，会改变 DOM 树的结构，比较消耗性能，适用于偶尔显隐的情况</li>\n<li>v-show 通过元素的 display 样式来决定显隐，不改变 DOM 树结构，适用于经常显隐的情况</li>\n</ul>\n<blockquote>\n<p>computed 和  watch</p>\n</blockquote>\n<ul>\n<li>computed 依赖多个变量计算出一个变量，且有缓存机制，如果这个变量值不变，可以被复用，不能进行异步操作</li>\n<li>watch 通常监听一个变量的变化，然后做一些事情，可异步操作</li>\n</ul>\n<blockquote>\n<p>Vue 的声明周期</p>\n</blockquote>\n<ul>\n<li>beforeCreate       实例 Vue，没有进行初始化和响应式数据</li>\n<li>created                 已经初始化和响应式数据，可以进行数据访问</li>\n<li>beforeMount         render 调用，虚拟 DOM 生成，没有转换成真实 DOM</li>\n<li>mounted                真实 DOM 挂载完成</li>\n<li>beforeUpdate         数据更新，新的虚拟 DOM 生成</li>\n<li>updated                   新旧虚拟 DOM 进行对比，然后更新</li>\n<li>beforeDestroy         实例销毁前，任然可以访问数据</li>\n<li>destroy                    实例销毁、解绑事件</li>\n<li>activated                  keep-alive  所缓存组件激活时调用</li>\n<li>deactivated               keep-alive 所缓存的组件停止时调用</li>\n<li>errorCaptured           子孙组件的错误捕获，此函数可返回 false 阻止继续向上传播，也就是拦截错误</li>\n</ul>\n<blockquote>\n<p>v-if  和 v-for 的优先级</p>\n</blockquote>\n<p>v-for 的优先级比 v-if 的优先级高，所以尽量不要在一个标签中同时使用，因为每项都 v-for 渲染后再进行显隐判断，做了很多无用功，消耗性能。</p>\n<blockquote>\n<p>vuex  的属性</p>\n</blockquote>\n<ul>\n<li>state                定义初始状态</li>\n<li>getter              从 store 中取数据</li>\n<li>mutation          更新 store 中的状态，只能同步操作</li>\n<li>action                用于提交 mutation，而不能直接更改状态，可异步操作</li>\n<li>module              store 的模块拆分</li>\n</ul>\n<blockquote>\n<p>不需要响应的数据应该怎么处理</p>\n</blockquote>\n<ul>\n<li>将其放在 data 的 return 之外</li>\n<li>通过 Object.freeze 进行数据冻结</li>\n</ul>\n<blockquote>\n<p>watch 有哪些属性</p>\n</blockquote>\n<ul>\n<li>immediate              初次加载时立即执行</li>\n<li>deep                        是否进行深监听</li>\n<li>handler                    监听的回调函数</li>\n</ul>\n<blockquote>\n<p>父子组件生命周期的顺序</p>\n</blockquote>\n<p>父 beforeCreate——》父 created——》父 beforeMount——》子 beforeCreate——》子 created——》子 beforeMount——》子 mounted——》父 mounted</p>\n<blockquote>\n<p>Vue 中为什么对对象劫持，而对于数组进行方法重写</p>\n</blockquote>\n<p>数组的元素一般都是成百上千的，对数组下标进行劫持的话会非常消耗性能。Vue 通过对数组原型上的方法进行一个重写，实现数组的响应式。</p>\n<blockquote>\n<p>Vue 的响应式是如何实现的</p>\n</blockquote>\n<ul>\n<li>观察者模式</li>\n<li>发布订阅模式</li>\n<li>数组没有使用劫持的模式，而是对数组原型上的方法进行一个重写</li>\n<li>劫持 ——》通过 Object.defineProperty 对对象进行递归劫持属性的 get、set</li>\n</ul>\n<blockquote>\n<p>事件流的三个阶段</p>\n</blockquote>\n<ul>\n<li>捕获阶段</li>\n<li>执行目标阶段</li>\n<li>冒泡阶段</li>\n</ul>\n<blockquote>\n<p>事件委托</p>\n</blockquote>\n<p>事件委托是指将子元素的事件绑定给父元素，这样可以减少绑定的次数，同时如果后期新增子元素，也可以共享绑定在父元素上的方法，这个方法可以供子元素共享。事件委托的原理是冒泡，真正触发事件的是子元素，通过 event.target 找到触发事件的对象。</p>\n<ul>\n<li>currentTarget   VS    target\n<ol>\n<li>currentTarget  要求绑定事件的元素一定是触发事件的元素</li>\n<li>target 绑定事件的元素不一定是触发事件的元素</li>\n</ol>\n</li>\n</ul>\n<blockquote>\n<p>为什么不建议使用  index 或者  随机数做 key</p>\n</blockquote>\n<p>使用 index  做 key 的话，如果我们需要在渲染的列表前加一个新的元素，那么该元素就会使整个列表的对应关系和之前的完全不一样，随机数也是如此，比较消耗性能，可以理解为牵一发而动全身。</p>\n<blockquote>\n<p>如果子组件改变 props 里的数据？</p>\n</blockquote>\n<ul>\n<li>如果改变的是基础类型，修改就会报错</li>\n<li>如果改变的是引用类型，那么会同时修改父组件的数据</li>\n</ul>\n<blockquote>\n<p>Vue 的 el 属性和 $mount 优先级</p>\n</blockquote>\n<p>同时存在时，el  &gt;  $mount</p>\n<blockquote>\n<p>获取 data 数据中某一个数据的初始状态</p>\n</blockquote>\n<p>通过  this.$options.data（）.xxxx   获取初始值</p>\n<blockquote>\n<p>计算变量时，methods  和  computed 哪个好</p>\n</blockquote>\n<p>由于 computed 具有缓存机制，对于相同的计算值可以进行复用，更加节省性能</p>\n<blockquote>\n<p>router.push     router.replace   router.go</p>\n</blockquote>\n<ul>\n<li>router.push              跳转，并向 history 中添加记录，可返回上一页面</li>\n<li>router.replace          跳转到指定页面，并且不会保留上一页面记录，无法返回</li>\n<li>router.go                  如果为正数，向后跳转，如果为负数，向前跳转</li>\n</ul>\n<blockquote>\n<p>附参考链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvcnFvWjVLV3FUXzFRQXg5MWJKTWVJZw==\">https://mp.weixin.qq.com/s/rqoZ5KWqT_1QAx91bJMeIg</span></p>\n</blockquote>\n",
            "tags": [
                "前端知识"
            ]
        }
    ]
}