{
    "version": "https://jsonfeed.org/version/1",
    "title": "CsStar • All posts by \"前端知识\" tag",
    "description": "Work Hard To Be A Better Man",
    "home_page_url": "http://csstar.top",
    "items": [
        {
            "id": "http://csstar.top/2022/03/28/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E8%AE%B0%E5%BD%953/",
            "url": "http://csstar.top/2022/03/28/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E8%AE%B0%E5%BD%953/",
            "title": "前端知识记录3",
            "date_published": "2022-03-28T06:17:01.000Z",
            "content_html": "<h1 id=\"前端知识点汇总-三\"><a class=\"markdownIt-Anchor\" href=\"#前端知识点汇总-三\">#</a> 前端知识点汇总 (三)</h1>\n<h2 id=\"replace字符串替换\"><a class=\"markdownIt-Anchor\" href=\"#replace字符串替换\">#</a> replace 字符串替换</h2>\n<ul>\n<li>\n<p>直接使用 replace ()，传入两个字符串，只能替换匹配到的第一个</p>\n</li>\n<li>\n<p>replace ()  +  正则替换</p>\n</li>\n<li>\n<p>split()  +  join()</p>\n</li>\n<li>\n<p>replace() + RegExp</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用replace()只能替换匹配的第一个</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&#x27;1,2,3&#x27;</span></span><br><span class=\"line\">str = str.replace(<span class=\"string\">&#x27;,&#x27;</span>,<span class=\"string\">&#x27; &#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str)   <span class=\"comment\">// 1 2,3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用replace() + 正则替换</span></span><br><span class=\"line\"><span class=\"comment\">// 注意：replace的第一个参数就是正则，如果加了单双引号，就变为字符串，不起作用</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str2 = <span class=\"string\">&#x27;1,2,3&#x27;</span></span><br><span class=\"line\">str2 = str2.replace(<span class=\"regexp\">/,/g</span>, <span class=\"string\">&#x27; &#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str2)   <span class=\"comment\">// 1 2 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// split + join</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str3 = <span class=\"string\">&#x27;1,2,3&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">// str3 = str3.split(&#x27;,&#x27;)  // [ &#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27; ]\\</span></span><br><span class=\"line\">str3 = str3.split(<span class=\"string\">&#x27;,&#x27;</span>).join(<span class=\"string\">&#x27; &#x27;</span>)   <span class=\"comment\">// 1 2 3</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str3)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用replace + RegExp</span></span><br><span class=\"line\"><span class=\"comment\">// RegExp 的两个参数分别为  要替换的字符，匹配模式及</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str4 = <span class=\"string\">&#x27;1,2,3&#x27;</span></span><br><span class=\"line\">str4 = str4.replace(<span class=\"built_in\">RegExp</span>(<span class=\"string\">&quot;,&quot;</span>,<span class=\"string\">&quot;g&quot;</span>), <span class=\"string\">&#x27; &#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str4)  <span class=\"comment\">// 1 2 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// replaceAll  第一个参数必须为正则表达式，第二个参数为替换的新字符串</span></span><br><span class=\"line\"><span class=\"comment\">// 没有用，直接被弃用，完全可以使用replace替换它</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"内存泄漏\"><a class=\"markdownIt-Anchor\" href=\"#内存泄漏\">#</a> 内存泄漏</h2>\n<blockquote>\n<p>** 定义：** 一个应用或程序，由于某些原因导致本应该回收的内存没有被操作系统或空闲内存池回收</p>\n</blockquote>\n<ol>\n<li>JavaScript 是垃圾回收语言之一，通过定期检查事先被分配的内存块是否还可以被其它部分访问到，来确定是否对内存块进行回收处理。简单说就是，如果已经被分配的内存块还需要被引用或被访问到，那么就不进行回收</li>\n<li>导致内存泄漏的主要原因可以归结于 “不必要的引用”</li>\n<li>大多数垃圾回收语言使用 ``Mark-and-Sweep` 算法\n<ul>\n<li>垃圾回收器建立一个根节点的列表</li>\n<li>所有的根节点被检查并且标记为活跃，子节点被递归检查，从根节点可达的节点视为非垃圾节点</li>\n<li>所有没有被标记为活跃的内存块可以被认为是垃圾，被垃圾回收器进行回收</li>\n</ul>\n</li>\n</ol>\n<blockquote>\n<p>常见的 JavaScript 内存泄漏</p>\n</blockquote>\n<ol>\n<li>意外的全局变量</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    bar = <span class=\"string\">&quot;this is an explicit global variable&quot;</span></span><br><span class=\"line\">    <span class=\"comment\">// 相当于 window.bar = &quot;this is an explicit global variable&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 另外一种全局变量被创建的方式是通过this</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo1</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.variable = <span class=\"string\">&quot;this is an explicit global variable&quot;</span></span><br><span class=\"line\">    <span class=\"comment\">// 这个this相当于window对象</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 为了防止这种错误的发生，可以在JavaScript文件的最前面添加`use strict`开启更严格模式，阻止意外全局</span></span><br></pre></td></tr></table></figure>\n<p><strong>对于全局变量，需要谨慎使用。如果必须\t用全局变量来存储大量数据，使用完之后确保对其进行清零或重新赋值，否则会造成大量的内存消耗。此外，对于缓存的大小也需要有所限制</strong></p>\n<ol start=\"2\">\n<li>被遗忘的计时器或者回调</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> someSource = getData()</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"built_in\">setInterval</span>(</span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">var</span> node = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;Node&#x27;</span>);</span><br><span class=\"line\">          <span class=\"keyword\">if</span>(node) &#123;</span><br><span class=\"line\">          <span class=\"comment\">// Do stuff with node and someResource.</span></span><br><span class=\"line\">          node.innerHTML = <span class=\"built_in\">JSON</span>.stringify(someResource));</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;,<span class=\"number\">1000</span>);</span><br></pre></td></tr></table></figure>\n<p><strong>node 对象可能再后面没有引用，需要被移除，但是由于间隔函数仍然是活跃的，因此 node 对象使用玩后不能被即使回收，间隔处理不能回收，则它的相关引用也不能回收，如果引用存储大量数据，那么影响很大</strong></p>\n<ol start=\"3\">\n<li>超出 DOM 引用（储存 DOM 节点到数据结构中）</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> elements = &#123;</span><br><span class=\"line\">    button: <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;button&#x27;</span>),</span><br><span class=\"line\">    image: <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;image&#x27;</span>),</span><br><span class=\"line\">    text: <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;text&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doStuff</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">     image.src = <span class=\"string\">&#x27;http://some.url/image&#x27;</span>;</span><br><span class=\"line\">     button.click();</span><br><span class=\"line\">     <span class=\"built_in\">console</span>.log(text.innerHTML);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">     </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">removeButton</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// The button is a direct child of body.</span></span><br><span class=\"line\">      <span class=\"built_in\">document</span>.body.removeChild(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;button&#x27;</span>));</span><br><span class=\"line\">      <span class=\"comment\">// At this point, we still have a reference to #button in the global </span></span><br><span class=\"line\">      <span class=\"comment\">// elements dictionary. In other words, the button element is still in</span></span><br><span class=\"line\">\t  <span class=\"comment\">// memory and cannot be collected by the GC. </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>当我们需要删除 DOM 节点时，由于全局对象中还存在该对象的引用，因此无法被垃圾系统回收</strong></p>\n<ol start=\"4\">\n<li>闭包（从父级作用域捕获变量的匿名函数）</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 造成内存泄漏的例子</span></span><br><span class=\"line\"><span class=\"built_in\">window</span>.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> el = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;id&#x27;</span>)</span><br><span class=\"line\">    el.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(el.id)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 解决办法：手动清除 </span></span><br><span class=\"line\"><span class=\"built_in\">window</span>.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> el = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;id&#x27;</span>)</span><br><span class=\"line\">    el.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(el.id)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    el = <span class=\"literal\">null</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 尽量避免变量的循环赋值和引用</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"一个元素绑定多个事件\"><a class=\"markdownIt-Anchor\" href=\"#一个元素绑定多个事件\">#</a> 一个元素绑定多个事件</h2>\n<blockquote>\n<p>这个问题涉及到事件处理程序，事件处理程序分为 DOM0、DOM2、DOM3 这三种级别的事件处理程序</p>\n</blockquote>\n<h3 id=\"dom0级事件处理程序\"><a class=\"markdownIt-Anchor\" href=\"#dom0级事件处理程序\">#</a> DOM0 级事件处理程序</h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 第一种是通过 JavaScript代码获取DOM元素，然后将函数赋值给相应的事件属性</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> btn = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;btn&#x27;</span>)</span><br><span class=\"line\">btn.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// do something ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--第二种是直接在html设置对应事件属性的值，值有两种表现形式，一种是执行的函数体，一种是函数名（绝大多数）--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">&quot;alert(&#x27;test&#x27;)&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">&quot;clickFn()&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--然后在script代码中定义该函数并实现--&gt;</span></span><br></pre></td></tr></table></figure>\n<ol>\n<li>\n<p>如果两种事件处理程序同时存在时，在 JavaScript 中定义的事件处理程序会覆盖掉在 html 标签中定义的事件处理程序</p>\n</li>\n<li>\n<p>DOM0 级事件处理程序只支持事件 <code>冒泡阶段</code></p>\n</li>\n<li>\n<p><code>一个事件处理程序只能绑定一个函数</code></p>\n</li>\n</ol>\n<blockquote>\n<p>如果 html 标签中定义了一个函数，同时我们在 js 代码中又通过获取 DOM 对象，绑定了并一个函数，那么 js 中绑定的事件处理程序的优先级高于在 HTML 中定义的事件处理程序</p>\n</blockquote>\n<h3 id=\"dom2级事件处理程序\"><a class=\"markdownIt-Anchor\" href=\"#dom2级事件处理程序\">#</a> DOM2 级事件处理程序</h3>\n<blockquote>\n<p>DOM2 级别的事件处理程序中，当事件发生在节点时，目标元素的事件处理程序就会触发，而且目标元素的每个祖先节点也会按照事件流的顺序触发对应的事件处理程序。</p>\n</blockquote>\n<ul>\n<li>在 IE10 一下的版本中，只支持事件冒泡阶段，在 IE11 中同时支持事件捕获和事件冒泡阶段</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// IE10一下的版本添加/删除事件处理程序，只支持事件冒泡阶段</span></span><br><span class=\"line\">element.attachEvent(<span class=\"string\">&quot;on&quot;</span> + eventName, handler)</span><br><span class=\"line\">element.detachEvent(<span class=\"string\">&quot;on&quot;</span> + eventName, handler)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// IE11以及其他非IE浏览器中，同时支持事件捕获和事件冒泡两个阶段</span></span><br><span class=\"line\"><span class=\"comment\">// 第三个参数为是否支持捕获阶段，默认为false，即默认为冒泡，第三个参数为true时，为捕获</span></span><br><span class=\"line\">addEventListener(eventName,handler,userCapture)</span><br><span class=\"line\">removeEventListener(eventName,handler,userCapture)</span><br></pre></td></tr></table></figure>\n<ol>\n<li><code>DOM2级事件处理程序，支持对同一事件绑定多个处理程序</code> ，但以 IE10 为界限绑定事件的函数不同而已</li>\n<li>删除需要绑定的事件时，不能删除匿名函数，因为添加和删除的必须是同一个函数</li>\n<li>IE 浏览器中，通过 attachEvent 函数为同一个事件添加多个事件处理函数时，会按照添加的相反顺序执行</li>\n<li>在 IE 浏览器中，通过 attachEvent 添加事件处理程序会在全局作用域中运行， <code>this指向全局作用域window</code> 。而在非 IE 浏览器中使用 addEventListener 函数添加事件处理程序在指定的元素内部执行，因此 <code>this执行绑定的元素</code> 。</li>\n</ol>\n<blockquote>\n<p>针对不同浏览器进行一个兼容的封装函数</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> EventUtil = &#123;</span><br><span class=\"line\">    addEventHandler: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">element, type, handler</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(element.addEventListener)&#123;</span><br><span class=\"line\">            element.addEventListener(type, handler)</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(element.attachEvent)&#123;</span><br><span class=\"line\">            element.attachEvent(<span class=\"string\">&quot;on&quot;</span> + type, handler)</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            element[<span class=\"string\">&quot;on&quot;</span> + type] = handler</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    </span><br><span class=\"line\">    removeEventHandler: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">element, type, handler</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(element.addEventListener)&#123;</span><br><span class=\"line\">            element.removeEventListener(type, handler)</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(element.attachEvent)&#123;</span><br><span class=\"line\">            element.detachEvent(<span class=\"string\">&quot;on&quot;</span> + type, handler)</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            element[<span class=\"string\">&quot;on&quot;</span> + type] = <span class=\"literal\">null</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"dom3级事件处理程序\"><a class=\"markdownIt-Anchor\" href=\"#dom3级事件处理程序\">#</a> DOM3 级事件处理程序</h3>\n<blockquote>\n<p>与 DOM2 级事件处理程序最重要的区别在于 DOM3 级事件处理程序允许自定义事件。自定义事件由 createEvent（“Customer”）函数创建，返回的对象有一个 initCustomerEvent () 函数</p>\n</blockquote>\n<p>函数可以接收如下四个参数：</p>\n<ul>\n<li>type           字符串，触发事件的类型</li>\n<li>bubble       是否可以冒泡</li>\n<li>cancelable  表示事件是否可以取消</li>\n<li>detail            任意值，保存 event 对象中的 detail 属性中</li>\n</ul>\n<p>创建完自定义事件后，需要通过 <code>dispatchEvent函数</code> 手动触发，触发自定义事件的元素需要和绑定的自定义事件的元素为同一元素</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.implementation.hasFeature(<span class=\"string\">&#x27;CustomEvents&#x27;</span>,<span class=\"string\">&#x27;3.0&#x27;</span>)   <span class=\"comment\">// 判断浏览器是否支持DOM3级事件处理程序</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> customEvent</span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">document</span>.implementation.hasFeature(<span class=\"string\">&#x27;CustomEvents&#x27;</span>,<span class=\"string\">&#x27;3.0&#x27;</span>)&#123;</span><br><span class=\"line\">     \t<span class=\"keyword\">var</span> detailData = &#123;<span class=\"attr\">name</span>: <span class=\"string\">&#x27;king&#x27;</span>&#125;</span><br><span class=\"line\">    \tcustomEvent = <span class=\"built_in\">document</span>.createEvent(<span class=\"string\">&#x27;customEvent&#x27;</span>)</span><br><span class=\"line\">    \tcustomEvent.initCustomEvent(<span class=\"string\">&#x27;myEvent&#x27;</span>,<span class=\"literal\">true</span>,<span class=\"literal\">false</span>,detailData)</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;)()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 监听自定义事件并获取携带参数</span></span><br><span class=\"line\">div.addEventListener(<span class=\"string\">&#x27;myEvent&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(e.detail)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 触发自定义事件</span></span><br><span class=\"line\">btn.addEventListener(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    div.dispatchEvent(customEvent)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"高度塌陷\"><a class=\"markdownIt-Anchor\" href=\"#高度塌陷\">#</a> 高度塌陷</h2>\n<blockquote>\n<p>父元素不设置高度时，子元素使用了浮动属性，父元素就会发生高度塌陷（高度变为 0）。</p>\n<p>我们也可以这样理解，父元素没有设置高度，那么它的高度就是由子元素内容决定的，而当对子元素使用了浮动后，它脱离了文档流，此时父元素没有内容了，因此产生了高度塌陷。</p>\n</blockquote>\n<p><strong>如何解决高度塌陷的问题呢？</strong></p>\n<ol>\n<li>\n<p>给父元素添加声明 ``overflow：hidden；`，给父元素设置高度</p>\n</li>\n<li>\n<p>在浮动元素的下方添加空 div，并给元素声明 ``clear:both;`</p>\n</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/css&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">\t<span class=\"selector-class\">.box</span>&#123;</span></span><br><span class=\"line\">\t\tmargin: 200px auto;</span><br><span class=\"line\">\t\twidth: 400px;</span><br><span class=\"line\"><span class=\"css\">\t\t<span class=\"selector-tag\">background</span>: <span class=\"selector-id\">#42B983</span>;</span></span><br><span class=\"line\"><span class=\"css\">\t\t<span class=\"selector-tag\">border</span>: 3<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">solid</span> <span class=\"selector-id\">#000000</span>;</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"css\">\t<span class=\"selector-class\">.chl_box</span>&#123;</span></span><br><span class=\"line\">\t\twidth: 200px;</span><br><span class=\"line\">\t\theight: 200px;</span><br><span class=\"line\"><span class=\"css\">\t\t<span class=\"selector-tag\">background</span>: <span class=\"selector-id\">#00FFFF</span>;</span></span><br><span class=\"line\">\t\tfloat: left;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;chl_box&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                <span class=\"comment\">&lt;!-- height: 0;overflow: hidden; 为了解决 IE 浏览器的兼容问题 --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;height: 0;overflow: hidden;clear: both;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>万能清除浮动法</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/css&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">\t<span class=\"selector-class\">.box</span>&#123;</span></span><br><span class=\"line\">\t\tmargin: 200px auto;</span><br><span class=\"line\">\t\twidth: 400px;</span><br><span class=\"line\"><span class=\"css\">\t\t<span class=\"selector-tag\">background</span>: <span class=\"selector-id\">#42B983</span>;</span></span><br><span class=\"line\"><span class=\"css\">\t\t<span class=\"selector-tag\">border</span>: 3<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">solid</span> <span class=\"selector-id\">#000000</span>;</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"css\">\t<span class=\"selector-class\">.chl_box</span>&#123;</span></span><br><span class=\"line\">\t\twidth: 200px;</span><br><span class=\"line\">\t\theight: 200px;</span><br><span class=\"line\"><span class=\"css\">\t\t<span class=\"selector-tag\">background</span>: <span class=\"selector-id\">#00FFFF</span>;</span></span><br><span class=\"line\">\t\tfloat: left;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"css\">\t<span class=\"selector-class\">.box</span><span class=\"selector-pseudo\">::after</span>&#123;</span></span><br><span class=\"line\">\t\tcontent: &quot;&quot;;</span><br><span class=\"line\">\t\tdisplay: block;</span><br><span class=\"line\">        clear: both;</span><br><span class=\"line\"><span class=\"css\">        <span class=\"comment\">/* height: 0;overflow: hidden; 为了解决 IE 浏览器的兼容问题 */</span></span></span><br><span class=\"line\"> \t\theight: 0;</span><br><span class=\"line\">\t\toverflow: hidden;</span><br><span class=\"line\"><span class=\"css\">        <span class=\"comment\">/* visibility:hidden;为了去隐藏content中的内容 */</span></span></span><br><span class=\"line\">\t\tvisibility: hidden;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;chl_box&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>父元素添加浮动 (会产生新的浮动问题)</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/css&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">\t<span class=\"selector-class\">.box</span>&#123;</span></span><br><span class=\"line\">\t\tmargin: 200px auto;</span><br><span class=\"line\">\t\twidth: 400px;</span><br><span class=\"line\"><span class=\"css\">\t\t<span class=\"selector-tag\">background</span>: <span class=\"selector-id\">#42B983</span>;</span></span><br><span class=\"line\"><span class=\"css\">\t\t<span class=\"selector-tag\">border</span>: 3<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">solid</span> <span class=\"selector-id\">#000000</span>;</span></span><br><span class=\"line\">\t\tfloat: left;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"css\">\t<span class=\"selector-class\">.chl_box</span>&#123;</span></span><br><span class=\"line\">\t\twidth: 200px;</span><br><span class=\"line\">\t\theight: 200px;</span><br><span class=\"line\"><span class=\"css\">\t\t<span class=\"selector-tag\">background</span>: <span class=\"selector-id\">#00FFFF</span>;</span></span><br><span class=\"line\">\t\tfloat: left;</span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;chl_box&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>参考链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8xNjIyMDIyODM=\">https://zhuanlan.zhihu.com/p/162202283</span></p>\n</blockquote>\n<h2 id=\"页面分页加载\"><a class=\"markdownIt-Anchor\" href=\"#页面分页加载\">#</a> 页面分页加载</h2>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--scroll-view是视图容器组件，用来显示可滚动的视图区域</span></span><br><span class=\"line\"><span class=\"comment\">\t这里主要实现滚动条到底部进行数据请求刷新  也就是  bindscrolltolower绑定的函数  Loadmore</span></span><br><span class=\"line\"><span class=\"comment\">\t需要注意的是使用这个函数时，需要设置滚动条的高度，这里设置的是&#123;&#123;conHeight&#125;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">\tscroll-top</span></span><br><span class=\"line\"><span class=\"comment\">--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">scroll-view</span> <span class=\"attr\">scroll-y</span>=<span class=\"string\">&quot;true&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;height:&#123;&#123;conHeight&#125;&#125;&quot;</span> <span class=\"attr\">enable-flex</span>=<span class=\"string\">&#x27;true&#x27;</span> <span class=\"attr\">bindscrolltolower</span>=<span class=\"string\">&quot;Lordmore&quot;</span> </span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">scroll-top</span>=<span class=\"string\">&#x27;&#123;&#123;topNum&#125;&#125;&#x27;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">scroll-view</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">//滚动条回到顶部  点击下拉框切换目标就回到顶部</span></span></span><br><span class=\"line\"><span class=\"javascript\">    goTop: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;  <span class=\"comment\">// 一键回到顶部</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">this</span>.setData(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            topNum:<span class=\"number\">0</span>    <span class=\"comment\">// 距离顶部的距离</span></span></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">//解决onReachBottom滚动问题</span></span></span><br><span class=\"line\"><span class=\"javascript\">    Lordmore:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">this</span>.onReachBottom()</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"javascript\">    onReachBottom: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// ...logical code</span></span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"图片懒加载\"><a class=\"markdownIt-Anchor\" href=\"#图片懒加载\">#</a> 图片懒加载</h2>\n<blockquote>\n<p>为了减轻服务器并发请求的压力，优先加载可视区域的内容，其他部分等进入了可视区域再加载，提高用户体验</p>\n</blockquote>\n<h3 id=\"懒加载原理\"><a class=\"markdownIt-Anchor\" href=\"#懒加载原理\">#</a> 懒加载原理</h3>\n<p>一张图片对应一个<img>标签，浏览器是否发起图片加载请求是根据<img>的 src 属性，所以实现懒加载的关键就就是，在图片没有进入可视区域时，不给图片的 src 属性赋值，等图片进入可视区域后再进行属性赋值。</p>\n<h3 id=\"实现思路\"><a class=\"markdownIt-Anchor\" href=\"#实现思路\">#</a> 实现思路</h3>\n<blockquote>\n<p>方式一：innerHeight、scrollTop、offSet 三者之间的关系</p>\n</blockquote>\n<ol>\n<li>加载 loading 图片</li>\n<li>判断哪些图片需要加载，也就是如何判断图片进入了可视区域</li>\n<li>隐形加载图片</li>\n<li>替换真图片</li>\n</ol>\n<blockquote>\n<p>加载 loading 图片</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;imglist&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;lazy&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;存放大小较小的伪图片，等待的图片&quot;</span> <span class=\"attr\">data-src</span>=<span class=\"string\">&quot;真实图片地址&quot;</span> <span class=\"attr\">alt</span>=<span class=\"string\">&quot;pic&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>判断图片进入可视区域</p>\n</blockquote>\n<ul>\n<li>滚动距离：document.body.scrollTop</li>\n<li>浏览器窗口的视口（viewport）高度（以像素为单位）：window.innerHeight</li>\n<li>当前元素距离顶部的距离：HTMLElement.offsetTop</li>\n</ul>\n<p>当 <code>HTMLElement.offsetTop &lt;=  window.innerHeight + document.body.scrollTop</code>  的时候图片进入可视区域，可以对<img>标签的 data-src 属性进行赋值操作。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取所有图片元素</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> images = <span class=\"built_in\">document</span>.getElementByTagName(<span class=\"string\">&#x27;img&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 绑定滚动事件</span></span><br><span class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">&quot;scroll&quot;</span>, <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    ergodic()</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ergodic</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 遍历图片</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i <span class=\"keyword\">of</span> images) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 判断图片是否进入可视区域</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i.offsetTop &lt;= <span class=\"built_in\">window</span>.innerHeight + <span class=\"built_in\">window</span>.scrollY)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 对可视区域的图片进行加载</span></span><br><span class=\"line\">            <span class=\"keyword\">let</span> trueSrc = i.getAttribute(<span class=\"string\">&quot;data-src&quot;</span>)</span><br><span class=\"line\">            i.setAttribute(<span class=\"string\">&quot;src&quot;</span>,trueSrc)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 没发生滚动也需要加载一次</span></span><br><span class=\"line\">ergodic()</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>方式二：getBoundingClientRect ().top 为元素相对于窗口的位置，而 window.innerHeight 为当前窗口的高度</p>\n</blockquote>\n<p>** 原理：** 当元素对于窗口的位置小于当前窗口的高度时，元素位于窗口可视区域内</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">&quot;scroll&quot;</span> (e) =&gt; &#123;</span><br><span class=\"line\">    ergodic()</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ergodic</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i <span class=\"keyword\">of</span> images)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 与上面相比，仅仅是判断的方式不一样</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i.getBoundingClientRect().top &lt; <span class=\"built_in\">window</span>.innerHeight)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> tureSrc = i.getAttribute(<span class=\"string\">&#x27;data-src&#x27;</span>)</span><br><span class=\"line\">            i.setAttribute(<span class=\"string\">&#x27;src&#x27;</span>, tureSrc)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>方式三：Intersection Observer 观察器接口，浏览器原生提供的构造函数</p>\n</blockquote>\n<p>以上两种方式都实现了图片的懒加载效果，但是存在大量的循环和判断，对于图片量大的项目中性能较差，Intersection Observer 方法省掉大量的循环和判断，但是兼容不是太好。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 通过new生成一个该构造函数的实例</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> observer = <span class=\"keyword\">new</span> IntersectionObserver(callback);</span><br><span class=\"line\"><span class=\"comment\">// 实例通过调用observer属性为每一张图片绑定一个观察器</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i <span class=\"keyword\">of</span> images)&#123;</span><br><span class=\"line\">    observer.observe(i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callback</span>(<span class=\"params\">entries</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(entries);  </span><br><span class=\"line\">    <span class=\"comment\">// entries为一个数组，其中有一个 isIntersecting 属性，目标元素在可视区域为ture，否则为false</span></span><br><span class=\"line\">    <span class=\"comment\">// 我们就是利用该属性判断图片是否在可视区域</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(ket i <span class=\"keyword\">of</span> entries)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i.isIntersecting)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> img = i.target;   <span class=\"comment\">// target事件属性返回触发事件的元素</span></span><br><span class=\"line\">            <span class=\"keyword\">let</span> tureSrc = img.getAttribute(<span class=\"string\">&quot;data-src&quot;</span>)</span><br><span class=\"line\">            img.setAttribute(<span class=\"string\">&quot;src&quot;</span>,trueSrc)</span><br><span class=\"line\">            <span class=\"comment\">// 如果图片来回滚动会出现一会可见、一会不可见的状态，都会触发函数，所以对于已加载的图片，停止观察</span></span><br><span class=\"line\">            observer.unobserve(img);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"正则的简单用法\"><a class=\"markdownIt-Anchor\" href=\"#正则的简单用法\">#</a> 正则的简单用法</h2>\n<p>主要作用：</p>\n<ul>\n<li>测试字符串是否是有效的数据</li>\n<li>替换指定的字符串</li>\n<li>输入数据中查找指定的字符串</li>\n</ul>\n<blockquote>\n<p>创建</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> re = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>();</span><br><span class=\"line\">re = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">&quot;a&quot;</span>)   \t\t<span class=\"comment\">// 匹配英文字母a</span></span><br><span class=\"line\">re = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">&quot;a&quot;</span>,<span class=\"string\">&quot;i&quot;</span>)\t<span class=\"comment\">// 不区分大小写匹配英文字母A，a</span></span><br><span class=\"line\"><span class=\"comment\">// RegExp 构造函数第一个参数为正则表达式的文本内容，第二个参数是匹配模式  g全局匹配 i不区分大小写  m多行查找</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> result1 = re.test(str)</span><br><span class=\"line\"><span class=\"keyword\">let</span> result2 = re.exec(str)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>方法和属性</p>\n</blockquote>\n<ol>\n<li>test   匹配正则表达式，返回值为 Boolean 值，检验功能</li>\n<li>exec   用正则表达式模式在字符串中进行查找，并且返回查找结果的数组</li>\n</ol>\n<h2 id=\"html5新特性\"><a class=\"markdownIt-Anchor\" href=\"#html5新特性\">#</a> HTML5 新特性</h2>\n<ul>\n<li>新的语义元素，比如 <header>, <footer>, <article>, and <section>。</section></article></footer></header></li>\n<li>新的表单控件，比如数字、日期、时间、日历和滑块。</li>\n<li>强大的图像支持（借由 <canvas> 和 <svg>）</svg></canvas></li>\n<li>强大的多媒体支持（借由 <video> 和 <audio>）</audio></video></li>\n<li>强大的新 API，比如用本地存储取代 cookie。</li>\n</ul>\n<h2 id=\"css3新特性\"><a class=\"markdownIt-Anchor\" href=\"#css3新特性\">#</a> CSS3 新特性</h2>\n<ol>\n<li><strong>新的选择器</strong></li>\n</ol>\n<ul>\n<li>\n<p><code>E:nth-child(n)</code>  选择器匹配其父元素的第 n 个子元素，不论元素类型，n 可以使数字，关键字，或公式</p>\n</li>\n<li>\n<p><code>E:nth-of-type(n)</code>  选择与之其匹配的父元素的第 N 个子元素</p>\n</li>\n<li>\n<p><code>E:frist-child</code>  相对于父级做参考，“所有” 子元素的第一个子元素，并且 “位置” 要对应</p>\n</li>\n<li>\n<p><code>E:frist-of-type</code>  相对于父级做参考，“特定类型”（E）的第一个子元素</p>\n</li>\n<li>\n<p><code>E:empty</code>  选择没有子元素的每个 E 元素</p>\n</li>\n<li>\n<p><code>E:target</code>  选择当前活动的 E 元素</p>\n</li>\n<li>\n<p><code>::selection</code>  选择被用户选取的元素部分</p>\n</li>\n<li>\n<p>属性选择器</p>\n<p><code>E[abc*=&quot;def&quot;]</code>  选择 adc 属性值中包含子串 &quot;def&quot; 的所有元素</p>\n</li>\n</ul>\n<ol start=\"2\">\n<li><strong>文本</strong></li>\n</ol>\n<ul>\n<li><code>text-shadow:2px 2px 8px #000;</code>  参数 1 为向右的偏移量，参数 2 为向左的偏移量，参数 3 为渐变的像素，参数 4 为渐变的颜色</li>\n<li><code>text-overflow</code> ：规定当文本溢出包含元素时发生的事情 text-overflow:ellipsis (省略)</li>\n<li><code>text-wrap</code> ：规定文本换行的规则</li>\n<li><code>word-break</code>  规定非中日韩文本的换行规则</li>\n<li><code>word-wrap</code> ：对长的不可分割的单词进行分割并换行到下一行</li>\n<li><code>white-space</code> ：规定如何处理元素中的空白 white-space:nowrap 规定段落中的文本不进行换行</li>\n</ul>\n<ol start=\"3\">\n<li><strong>边框</strong></li>\n</ol>\n<ul>\n<li><code>border-raduis</code>  边框的圆角</li>\n<li><code>border-image</code>  边框图片</li>\n</ul>\n<ol start=\"4\">\n<li><strong>背景</strong></li>\n</ol>\n<ul>\n<li><code>rgba</code></li>\n<li><code>backgrounnd-size:cover/contain</code> ，其中 background-size：cover，会使 “最大” 边进行缩放，另一边同比缩放，铺满容器，超出部分会溢出。background-size:contain，会使 “最小” 边进行缩放，另一边同比缩放，不一定铺满容器，会完整显示图片</li>\n</ul>\n<ol start=\"5\">\n<li><strong>渐变</strong></li>\n</ol>\n<ul>\n<li><code>linear-gradient</code></li>\n<li><code>radial-gradient</code></li>\n</ul>\n<ol start=\"6\">\n<li><strong>多列布局</strong></li>\n</ol>\n<ul>\n<li><code>column-count</code></li>\n<li><code>column-width</code></li>\n<li><code>column-gap</code></li>\n<li><code>column-rule</code></li>\n</ul>\n<ol start=\"7\">\n<li><strong>过渡</strong></li>\n</ol>\n<ul>\n<li><code>transition</code></li>\n<li><code>transition-property:width</code>  //property 为定义过渡的 css 属性列表，列表以逗号分隔</li>\n<li><code>transition-duration:2s;</code>  // 过渡持续的时间</li>\n<li><code>transition-timing-function:ease;</code></li>\n<li><code>transition-delay:5s</code>  // 过渡延迟 5s 进行</li>\n</ul>\n<ol start=\"8\">\n<li><strong>动画、旋转</strong></li>\n</ol>\n<ul>\n<li><code>animation</code></li>\n<li><code>transform ：translate（x,y) rotate(deg) scale(x,y)</code></li>\n<li><code>translate</code></li>\n<li><code>scale</code></li>\n<li><code>rotate</code></li>\n<li><code>skew</code> （倾斜）</li>\n</ul>\n<ol start=\"9\">\n<li>\n<p><strong>flex 布局</strong></p>\n</li>\n<li>\n<p><strong>@media 媒体查询</strong></p>\n</li>\n</ol>\n<h2 id=\"对象遍历\"><a class=\"markdownIt-Anchor\" href=\"#对象遍历\">#</a> 对象遍历</h2>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// for...in 循环遍历对象自身和继承的可枚举属性</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj =&#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;0&#x27;</span>: <span class=\"string\">&#x27;a&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;1&#x27;</span>: <span class=\"string\">&#x27;b&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;2&#x27;</span>: <span class=\"string\">&#x27;c&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// obj[i]  key-value</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> obj)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(i,<span class=\"string\">&#x27;:&#x27;</span>,obj[i])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Object.keys()</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj =&#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;0&#x27;</span>: <span class=\"string\">&#x27;a&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;1&#x27;</span>: <span class=\"string\">&#x27;b&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;2&#x27;</span>: <span class=\"string\">&#x27;c&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 遍历对象的所有键，返回一个数组</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> keys = <span class=\"built_in\">Object</span>.keys(obj)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(keys)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 通过forEach 去取出数组中的每一项</span></span><br><span class=\"line\">keys.forEach(<span class=\"function\">(<span class=\"params\">key</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(key,obj[key])</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Object.getOwnPropertyNames(obj)</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj =&#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;0&#x27;</span>: <span class=\"string\">&#x27;a&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;1&#x27;</span>: <span class=\"string\">&#x27;b&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;2&#x27;</span>: <span class=\"string\">&#x27;c&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> keys = <span class=\"built_in\">Object</span>.getOwnPropertyNames(obj)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(keys)</span><br><span class=\"line\"></span><br><span class=\"line\">keys.forEach(<span class=\"function\">(<span class=\"params\">key</span>) =&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(key,obj[key])</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Reflect.ownKeys(obj)遍历</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj =&#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;0&#x27;</span>: <span class=\"string\">&#x27;a&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;1&#x27;</span>: <span class=\"string\">&#x27;b&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;2&#x27;</span>: <span class=\"string\">&#x27;c&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> keys =<span class=\"built_in\">Reflect</span>.ownKeys(obj)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(keys)</span><br><span class=\"line\"></span><br><span class=\"line\">keys.forEach(<span class=\"function\">(<span class=\"params\">key</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(key,obj[key])</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"数组求和\"><a class=\"markdownIt-Anchor\" href=\"#数组求和\">#</a> 数组求和</h2>\n<ol>\n<li>for 循环累加</li>\n<li>使用 reduce () 方法进行求和</li>\n<li>forEach () 进行遍历求和 (对数组中的每一个元素调用一次回调函数)</li>\n<li>eval (执行表达式)</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span>(<span class=\"params\">arr</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">eval</span>(arr.join(<span class=\"string\">&quot;+&quot;</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sum(arr));</span><br></pre></td></tr></table></figure>\n<h2 id=\"数组去重\"><a class=\"markdownIt-Anchor\" href=\"#数组去重\">#</a> 数组去重</h2>\n<ol>\n<li>新建一个空数组，然后遍历原数组通过判断把没有出现在新数组中的元素添加进去</li>\n<li>利用键值对</li>\n<li>使用 reduce () 函数</li>\n<li>借助 ES6 的 Set 数据结构</li>\n<li>借助 ES6 的 Map 数据结构</li>\n</ol>\n<h2 id=\"字符串处理方法\"><a class=\"markdownIt-Anchor\" href=\"#字符串处理方法\">#</a> 字符串处理方法</h2>\n<ul>\n<li><strong>replace</strong>  字符串替换， <code>返回替换后结果</code></li>\n<li><strong>split</strong>     字符串分割，返回一个 <code>字符串数组</code></li>\n<li><strong>substring</strong>   用于提取字符串中介于两个指定下标之间的的字符     <code>返回字串</code></li>\n</ul>\n<ol>\n<li>字符串的内容为 start 到 stop-1 除的所有字符，字符串的长度为 stop - start</li>\n<li>如果 start = stop，则返回空字符串，如果 start &gt; stop  那么方法在提取字符串之前会进行交换</li>\n<li>substring 与 substr 不同， <code>sunstring不接收负的参数</code></li>\n</ol>\n<ul>\n<li><strong>substr</strong></li>\n</ul>\n<ol>\n<li>substr（start, length）用于截取从 start 开始指定长度的字符串</li>\n<li>start 参数可以为负数，-1 指字符串的最后一个字符，-2 表示倒数第二个字符</li>\n<li>第二个参数可选，如果不穿第二个参数，就到字符串结尾</li>\n</ol>\n<blockquote>\n<p>**concat ()** 用于 <code>数组的合并</code></p>\n<p><strong>slice()</strong> <code>不改变原数组</code> ，而是返回一个新的数组对象</p>\n<p>**splice ()** 方法会 <code>改变原数组</code> ，向数组中添加 / 删除项目</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// slice方法返回包含选中元素的新数组，不对原数组产生影响</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.slice(<span class=\"number\">1</span>))  <span class=\"comment\">// [ 2, 3, 4, 5 ]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.slice(<span class=\"number\">2</span>))   <span class=\"comment\">// [ 3, 4, 5 ]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.slice(<span class=\"number\">2</span>,<span class=\"number\">3</span>))  <span class=\"comment\">// [ 3 ]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.slice(<span class=\"number\">2</span>,<span class=\"number\">5</span>))  <span class=\"comment\">// [ 3, 4, 5 ]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr)   <span class=\"comment\">// [ 1, 2, 3, 4, 5 ]</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * splice(index,count,item1,item2...)</span></span><br><span class=\"line\"><span class=\"comment\"> * index：表示从什么位置开始 添加/删除 项目，如果为负数，从末尾开始</span></span><br><span class=\"line\"><span class=\"comment\"> * count：要删除的项目数   如果设置为0 则表示不进行元素删除</span></span><br><span class=\"line\"><span class=\"comment\"> * 后面 item 表示需要添加的元素</span></span><br><span class=\"line\"><span class=\"comment\"> * splice 方法会改变原数组  返回删除的项目</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"comment\">// 从索引为1开始，删除两个元素</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.splice(<span class=\"number\">1</span>,<span class=\"number\">2</span>))   <span class=\"comment\">// [ 2, 3 ]      返回删除的项目 [2,3]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr)               <span class=\"comment\">// [ 1, 4, 5 ] 原数组发生了改变</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 现在就是对[1，4，5]进行操作</span></span><br><span class=\"line\"><span class=\"comment\">// 从索引1开始 删除一个项目  添加3个元素</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.splice(<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">6</span>,<span class=\"number\">6</span>,<span class=\"number\">6</span>))  <span class=\"comment\">// [ 4 ]  返回删除的元素 4</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr)        <span class=\"comment\">// [ 1, 6, 6, 6, 5 ]</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"es7-10常用函数\"><a class=\"markdownIt-Anchor\" href=\"#es7-10常用函数\">#</a> ES7-10 常用函数</h2>\n<ul>\n<li>Arrary.prototype.includes      用于检测数组中是否包含某个元素，返回布尔类型</li>\n<li>Object.values ()                        返回一个给定对象的所有可枚举属性值的数组</li>\n<li>Object.entries ()                       返回一个给定对象自身可遍历属性 [key,value] 的数组</li>\n<li>Object.fromEntries ()               把键值对列表转换为一个对象</li>\n<li>Object.getOwnPropertyDescriptors ()             该方法返回指定对象所有自身属性的描述对象</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> object1 = &#123;</span><br><span class=\"line\">  a: <span class=\"string\">&#x27;somestring&#x27;</span>,</span><br><span class=\"line\">  b: <span class=\"number\">42</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> [key, value] <span class=\"keyword\">of</span> <span class=\"built_in\">Object</span>.entries(object1)) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;key&#125;</span>: <span class=\"subst\">$&#123;value&#125;</span>`</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// expected output:</span></span><br><span class=\"line\"><span class=\"comment\">// &quot;a: somestring&quot;</span></span><br><span class=\"line\"><span class=\"comment\">// &quot;b: 42&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Object.entries()方法返回一个给定对象自身可枚举属性的键值对数组，其排列与使用 for...in 循环遍历该对象时返回的顺序一致（区别在于 for-in 循环还会枚举原型链中的属性）。</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 键值对列表</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> entries = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>([</span><br><span class=\"line\">  [<span class=\"string\">&#x27;foo&#x27;</span>, <span class=\"string\">&#x27;bar&#x27;</span>],</span><br><span class=\"line\">  [<span class=\"string\">&#x27;baz&#x27;</span>, <span class=\"number\">42</span>]</span><br><span class=\"line\">]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = <span class=\"built_in\">Object</span>.fromEntries(entries);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj);</span><br><span class=\"line\"><span class=\"comment\">// expected output: Object &#123; foo: &quot;bar&quot;, baz: 42 &#125;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"数组处理方法\"><a class=\"markdownIt-Anchor\" href=\"#数组处理方法\">#</a> 数组处理方法</h2>\n<ul>\n<li>判断一个变量是数组还是对象</li>\n</ul>\n<blockquote>\n<ol>\n<li>\n<p>使用 <code>typeof</code>  对数组类型进行判断，返回的结果是 ``object`，不是我们期望的结果。typeof 运算符在判断基本类型的时候很有用，但是对于引用类型，没那么有效。</p>\n</li>\n<li>\n<p><code>instanceof</code>  运算符通常用于通过原型链来检查某个变量是否为某个类型数据的实例，使用 instanceof 运算符可以判断一个变量是数组还是对象。</p>\n</li>\n</ol>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a <span class=\"keyword\">instanceof</span> Arrary)\t<span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span>)\t<span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = &#123;<span class=\"attr\">name</span>: <span class=\"string\">&#x27;king&#x27;</span>&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b <span class=\"keyword\">instanceof</span> Arrary)   <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span>)   <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>filter () 函数过滤满足条件的数据  (需要传入一个函数)</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>]</span><br><span class=\"line\">arr.filter(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> <span class=\"keyword\">return</span> x%<span class=\"number\">2</span>)   <span class=\"comment\">// 找出数组中所有奇数的数字</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>reduce () 函数累加器处理数组元素</li>\n</ul>\n<blockquote>\n<ol>\n<li>reduce () 函数最主要的作用是做累加处理，即接收一个函数作为累加器，将数组中的每一个元素从左到右依次执行累加器，返回最终的处理结果。</li>\n<li>语法：arr.reduce (callback, initialValue);</li>\n</ol>\n<ul>\n<li>initialValue 用作 callback 的第一个参数值，如果没有设置，则会使用数组的第一个元素值</li>\n<li>callback 会接收 4 个参数（accumulator，currentValue，currentIndex，array）</li>\n<li>accumulator 表示上一次累加器的返回结果，如果设置了 initialValue，则 accumulator = initialValue，否则为数组的第一个值</li>\n<li>currentValue 表示数组正在处理的值</li>\n<li>currentIndex 表示正在处理的索引   设置了 initialValue，currentIndex 从 0 开始，否则从 1 开始</li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用 reduce 进行数组求和</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> sum = arr.reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">accumulator,currentValue</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> accumulator + currentValue;</span><br><span class=\"line\">&#125;,<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 统计数组中每个元素出现的次数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> countOccurrences = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arr</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr.reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">accumulator,currentValue</span>)</span>&#123;</span><br><span class=\"line\">        accumulator[currentValue] ? accumulator[currentValue]++:accumulator[currentValue] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> accumulator;</span><br><span class=\"line\">    &#125;,&#123;&#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">countOccurrences([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">5</span>,<span class=\"number\">1</span>]);    <span class=\"comment\">// &#123;1:2,2:3,3:1,5:1&#125;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>数组遍历</li>\n</ul>\n<ol>\n<li>原始 <code>for</code>  循环</li>\n<li>基于 <code>forEach()</code>  函数的方法</li>\n<li>基于 <code>map()</code>  函数的方法</li>\n<li>基于 <code>filter()</code>  函数的方法</li>\n<li>基于 <code>some()</code>  函数和 <code>every()</code>  函数的方法</li>\n<li>基于 <code>redece()</code>  函数的方法</li>\n<li>基于 <code>find()</code>  函数的方法</li>\n</ol>\n<h2 id=\"事件流\"><a class=\"markdownIt-Anchor\" href=\"#事件流\">#</a> 事件流</h2>\n<ul>\n<li>捕获阶段          由外向内</li>\n<li>目标阶段          触发事件流的元素</li>\n<li>冒泡阶段          由内向外</li>\n</ul>\n<ol>\n<li>对于由外向内的过程，如果元素绑定了捕获类型事件，则会优先于冒泡类型事件先执行。</li>\n<li>在事件捕获阶段，对于元素绑定了冒泡类型事件，会直接跳过，延迟到冒泡阶段才会执行</li>\n<li>在目标阶段，触发目标 i 元素事件，不管是冒泡类型事件还是捕获类型事件，都会执行</li>\n<li>在事件冒泡阶段，对于捕获类型的事件，直接跳过，不执行</li>\n</ol>\n<h2 id=\"事件委托\"><a class=\"markdownIt-Anchor\" href=\"#事件委托\">#</a> 事件委托</h2>\n<blockquote>\n<p>当许多相同子元素需要绑定相同事件时，单独给每个子元素绑定事件不仅麻烦，而且会造成资源浪费，同时对于新增新元素无法进行有效处理，此时我们可以将这些子元素统一交给父元素来管理。</p>\n<ul>\n<li>事件处理程序过多会导致页面交互时间过长</li>\n<li>时间处理程序过多导致内存占用过多</li>\n</ul>\n<p>事件委托利用 <code>事件冒泡</code> 原理，利用父元素来代表子元素的某一类型事件的处理方式。</p>\n</blockquote>\n<p>主要有以下两种情况：</p>\n<ul>\n<li>对于已有元素的事件绑定</li>\n<li>对于新创建元素的事件绑定</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1.获取父元素</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> parent = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&#x27;ul&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 2.父元素绑定事件</span></span><br><span class=\"line\">parent.addEventListener(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 3.获取事件对象</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> event = EventUtil.getEvent(event);</span><br><span class=\"line\">    <span class=\"comment\">// 4.获取目标元素</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> target = EventUtil.getTarget(event);</span><br><span class=\"line\">    <span class=\"comment\">// 5.判断当前事件流所处的元素</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(target.nodeName.toLowerCase() === <span class=\"string\">&#x27;li&#x27;</span>)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 6.与目标元素相同，做相应的处理</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(target.innerText);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"常见布局方式\"><a class=\"markdownIt-Anchor\" href=\"#常见布局方式\">#</a> 常见布局方式</h2>\n<ol>\n<li>静态布局</li>\n</ol>\n<blockquote>\n<p>最为传统的一种布局方式，网页上所有的元素都是使用 <code>px</code>  为单位进行设定的</p>\n<p>** 布局特点：** 不论屏幕大小，页面宽高始终不变，始终维持最初设计的样式大小来显示，常见于传统 PC 布局</p>\n</blockquote>\n<ol start=\"2\">\n<li>流式布局</li>\n</ol>\n<blockquote>\n<p>** 布局特点：** 当屏幕分辨率大小发生变化时，页面里的元素大小会发生变化，但布局不会发生变化</p>\n<p>** 实现：** 通常使用 % 百分比来定义宽度，高度大都使用 px 来进行固定，常见于 web 前端开发早期</p>\n</blockquote>\n<ol start=\"3\">\n<li>自适应布局</li>\n</ol>\n<blockquote>\n<p>自适应布局就是为不同的屏幕定义不同的布局，就是创建多个静态布局，每个静态布局对应一个屏幕分辨率范围</p>\n<p>** 布局特点：** 当屏幕大小发生变化时，页面里面的元素的位置会变化而大小不会变化</p>\n<p>** 实现：** 使用 @media 媒体查询给不同的尺寸和介质的设备切换不同样式。</p>\n</blockquote>\n<ol start=\"4\">\n<li>响应式布局</li>\n</ol>\n<blockquote>\n<p>响应式设计的目标是确保一个页面在所有终端上（各种尺寸的 PC、手机、平板、智能手表的 Web 浏览器等等）都能显示出令人满意的效果，对 CSS 编写者来说，有多种手法可以去实现，但通常是糅合了流式布局 + 弹性布局，再搭配媒体查询技术使用。</p>\n<p>** 布局特点：** 每个屏幕分辨率下面会有一个布局样式，即元素位置和大小都会改变</p>\n<p>** 实现：** 媒体查询 + 流式布局</p>\n</blockquote>\n<ol start=\"5\">\n<li>弹性布局</li>\n</ol>\n<blockquote>\n<ul>\n<li>rem、em 的区别：</li>\n</ul>\n<p>两者都是为了解决不同网页字体大小展示而产生的</p>\n<p>em 是相对其父元素，在实际应用中相对而言使用没那么方便</p>\n<p>rem 则始终相对于 html 大小，相对于页面根元素而言</p>\n</blockquote>\n",
            "tags": [
                "前端知识"
            ]
        },
        {
            "id": "http://csstar.top/2022/03/16/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E8%AE%B0%E5%BD%952/",
            "url": "http://csstar.top/2022/03/16/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E8%AE%B0%E5%BD%952/",
            "title": "前端知识点汇总(二)",
            "date_published": "2022-03-16T15:21:33.000Z",
            "content_html": "<h1 id=\"前端知识点汇总二\"><a class=\"markdownIt-Anchor\" href=\"#前端知识点汇总二\">#</a> 前端知识点汇总 (二)</h1>\n<h2 id=\"vuex属性\"><a class=\"markdownIt-Anchor\" href=\"#vuex属性\">#</a> <strong>Vuex 属性</strong></h2>\n<ul>\n<li>\n<p>state             state 是存储的单一状态，是存储的基本数据</p>\n</li>\n<li>\n<p>Getters         getters 是 store 的计算属性，对 state 的加工，是派生出来的数据（跟 computed 计算属性一样）</p>\n</li>\n<li>\n<p>Mutations      更改 Vuex 的 store 中状态的唯一方法就是提交 mutaions</p>\n</li>\n<li>\n<p>Actions         Actions 提交的是 mutation，而不是直接变更状态，可包含异步操作</p>\n</li>\n<li>\n<p>Moudle         Module 是 store 分割的模块，每个模块拥有自己的 state、getters、mutations、actions</p>\n</li>\n<li>\n<p>辅助函数       mapState、MapGetters、MapActions、mapMutations 等辅助函数</p>\n</li>\n</ul>\n<h2 id=\"首页白屏问题\"><a class=\"markdownIt-Anchor\" href=\"#首页白屏问题\">#</a> <strong>首页白屏问题</strong></h2>\n<ul>\n<li>路由懒加载</li>\n<li>cdn 加速</li>\n<li>开启 vue 服务渲染模式</li>\n<li>用 webpack 的 externals 属性将不需要打包的库文件分离出去，减少打包后文件的大小</li>\n<li>生产环境中删除掉不必要的 console.log</li>\n<li>vue-cli 开启打包压缩 和 后台配合 gzip 访问</li>\n</ul>\n<h2 id=\"进程和线程\"><a class=\"markdownIt-Anchor\" href=\"#进程和线程\">#</a> <strong>进程和线程</strong></h2>\n<ul>\n<li><strong>进程</strong></li>\n</ul>\n<ol>\n<li>系统进行资源调度和分配的基本单位</li>\n<li>进程是线程的容器</li>\n</ol>\n<ul>\n<li><strong>线程</strong></li>\n</ul>\n<ol>\n<li>操作系统能够运算调度的最小单位</li>\n<li>包含在进程之间，进程运行的单位</li>\n<li>一个进程中可以有许多线程，这些线程共享进程的变量和资源</li>\n<li>线程与线程之间的资源和变量不共享</li>\n</ol>\n<h2 id=\"进程通信\"><a class=\"markdownIt-Anchor\" href=\"#进程通信\">#</a> <strong>进程通信</strong></h2>\n<ul>\n<li>管道</li>\n<li>有名管道</li>\n<li>信号量</li>\n<li>消息队列</li>\n<li>信号</li>\n</ul>\n<h2 id=\"选择器的权重\"><a class=\"markdownIt-Anchor\" href=\"#选择器的权重\">#</a> <strong>选择器的权重</strong></h2>\n<ul>\n<li>通配选择器的权重为 0     <code>*</code></li>\n<li>类型选择器和伪元素选择器的权重为 1     <code>div</code>   <code>:before</code></li>\n<li>类选择器、伪类选择器、属性选择器权重为 10    <code>class</code>    <code>:hover</code>    <code>['attr=#']</code></li>\n<li>id 选择器权重为 100         <code>id</code></li>\n<li>内联样式权重为 1000      <code>&lt;div style=&quot;color: red&quot;&gt;内联样式的权重为1000&lt;/div&gt;</code></li>\n<li>！important 的规则权重为 10000</li>\n</ul>\n<h2 id=\"宏任务和微任务\"><a class=\"markdownIt-Anchor\" href=\"#宏任务和微任务\">#</a> <strong>宏任务和微任务</strong></h2>\n<p><strong>微任务</strong>： process.nextTick ， promise ， Object.observe ， MutationObserver</p>\n<p><strong>宏任务</strong>： script ， setTimeout ， setInterval ， setImmediate ， I/O ， UI rendering</p>\n<blockquote>\n<p>] 误区：并不是微任务快于宏任务，因为宏任务中包含了 script ，浏览器会\t执行一个宏任务，接下来如果有异步代码就先执行微任务。</p>\n</blockquote>\n<p><strong>Event Loop 的顺序</strong></p>\n<ol>\n<li>执行同步代码，这属于宏任务</li>\n<li>执行栈为空，查询是否有微任务需要执行</li>\n<li>执行所有微任务</li>\n<li>必要的话渲染 UI</li>\n<li>然后开始下一轮 Event Loop，执行宏任务中的异步代码</li>\n</ol>\n<h2 id=\"其它\"><a class=\"markdownIt-Anchor\" href=\"#其它\">#</a> <strong>其它</strong></h2>\n<p>Vue2.0 的数据响应是采用数据劫持结合发布者 - 订阅者模式的方式，通过<strong> Object.defineProperty ()</strong> 来劫持各个属性的 setter、getter</p>\n<p>vue3.0 实现数据双向绑定是通过<strong> Proxy</strong></p>\n<p>单页面 ——》资源局部刷新\t\t\t\t内容改变不需加载整个页面，响应速度快；对服务器的压力小写；前后端分离；</p>\n<p>多页面 ——》页面跳转，整页刷新</p>\n<p>路由跳转，无刷新页面，静态跳转</p>\n<p>location.href = ‘url’  来跳转，刷新了页面</p>\n<p><code>computer:</code>  依赖多个值计算计算出一个属性值，并且具有缓存机制，如果没有更新，属性值值可以复用，如果更新，属性值需要重新计算。（同步）</p>\n<p><code>watch:</code>  监听一个值的变化，做多件事情。（异步）</p>\n",
            "tags": [
                "前端知识"
            ]
        },
        {
            "id": "http://csstar.top/2022/03/16/%E7%BD%91%E7%BB%9C/",
            "url": "http://csstar.top/2022/03/16/%E7%BD%91%E7%BB%9C/",
            "title": "网络",
            "date_published": "2022-03-16T15:11:34.000Z",
            "content_html": "<h2 id=\"tcp-vs-udp\"><a class=\"markdownIt-Anchor\" href=\"#tcp-vs-udp\">#</a> <strong>TCP vs  UDP</strong></h2>\n<ul>\n<li>TCP   面向连接的、可靠的、基于字节流的传输层通信协议</li>\n<li>UDP   提供简单不可靠的非连接传输服务，面向报文</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th><code>TCP</code></th>\n<th><code>UDP</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>面向连接的，可靠性高</td>\n<td>非连接的，可靠性低</td>\n</tr>\n<tr>\n<td>基于三次握手，信息有延时，时效性较差</td>\n<td>时效性好，常用于实时传输</td>\n</tr>\n<tr>\n<td>首部开销 20 字节，如果携带的用户数据较小，则利用率低</td>\n<td>首部开销 8 字节，可以传输更多的用户数据</td>\n</tr>\n<tr>\n<td>端对端的，有序号机制、确认机制、超时重传机制，确保数据可靠交付</td>\n<td>一对一、一对多、多对一、多对多的交互通信</td>\n</tr>\n<tr>\n<td>FTP（应用层协议）基于 TCP</td>\n<td>DNS（应用层协议）基于 UDP</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"xss-跨网站指令码\"><a class=\"markdownIt-Anchor\" href=\"#xss-跨网站指令码\">#</a> XSS: 跨网站指令码</h2>\n<ul>\n<li>反射型</li>\n<li>存储型</li>\n<li>DOM-based 型</li>\n</ul>\n<p>如何攻击：通过修改 HTML 节点或者运行 JS 脚本进行攻击</p>\n<p>如何防御：</p>\n<ul>\n<li>\n<p>最普遍的做法是对输入输出的内容进行转义，对于引号、尖括号、斜杠进行转义。  如果有特定的文本不能进行转义，需要设置黑白名单来进行过滤</p>\n</li>\n<li>\n<p>CSP: 内容安全策略     本质上也是建立白名单，规定浏览器只能够执行特定来源的代码   通过设置  <code>HTTP Header中的Content-Security-Policy 来开启CSP</code></p>\n<ol>\n<li>只允许加载本站资源</li>\n<li>只允许加载 https 协议的图片</li>\n<li>允许加载任何来源框架</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"csrf跨站请求伪造-是一种挟持用户在已经登录的web应用程序上执行非本意操作的攻击方法\"><a class=\"markdownIt-Anchor\" href=\"#csrf跨站请求伪造-是一种挟持用户在已经登录的web应用程序上执行非本意操作的攻击方法\">#</a> CSRF：跨站请求伪造    是一种挟持用户在已经登录的 web 应用程序上执行非本意操作的攻击方法</h2>\n<p>如何防御：</p>\n<ol>\n<li>get 请求不对数据进行修改</li>\n<li>不让第三方网站访问到用户的 Cookie                       对 cookie 设置 Samesite 属性，该属性设置 cookie 不随着跨域请求发送</li>\n<li>阻止第三方网站请求接口                                       验证 Referer 来判断请求是否由第三方网站发起的</li>\n<li>请求时附带验证信息，比如验证码或者 Cookie           服务器下发一个随机的 Token，每次用户发送请求的时候，必须携带这个 Token，然后服务器对其进行检验</li>\n</ol>\n<h2 id=\"密码安全\"><a class=\"markdownIt-Anchor\" href=\"#密码安全\">#</a> 密码安全</h2>\n<blockquote>\n<p>加盐：对于密码存储来说，必然是不能明文存储在数据库中，不然一旦数据库泄漏，会对用户造成巨大的损失。</p>\n<ul>\n<li>加盐就是给原密码添加字符串。加盐后的密码再进行一些列的加密算法处理。</li>\n<li>加盐并不能阻止别人盗取账号，只能确保即使数据库泄漏，也不会暴露用户的真实密码</li>\n<li>通常使用验证码增产时延或者限制尝试次数的方式，并且当输入错误时，不能提示密码输入错误，而是提示账号或者密码输入错误</li>\n</ul>\n</blockquote>\n<h2 id=\"三次握手\"><a class=\"markdownIt-Anchor\" href=\"#三次握手\">#</a> 三次握手</h2>\n<p>客户端：closed——》SYN  Send——》established</p>\n<p>服务端：closed——》Listened——》SYN Receive——》established</p>\n<blockquote>\n<p>为什么需要三次握手</p>\n</blockquote>\n<p>如果 A 向 B 发送了一个连接请求，由于网络延时原因，这个 A 发送的请求长时间没有被 B 接收，就会触发超时重传机制，重新发送的请求被 B 接收到后，两者顺利建立连接并开始传输信息或者数据，然后连接结束，两者处于 closed 状态。但此时，之前由于网络延时而未到达的请求到达了 B，B 以为 A 又要建立新的连接，便应答了请求，从而处于 established 状态，而此时 A 是 closed 状态，那么服务器就会一直等客户端传输数据，会造成资源浪费。</p>\n<h2 id=\"四次挥手\"><a class=\"markdownIt-Anchor\" href=\"#四次挥手\">#</a> 四次挥手</h2>\n<p><strong>断开连接时，两端都需要发送 FIN 和 ACK 信号</strong></p>\n<p>客户端：established——》FIN-WAIT-1——》FIN-WAIT-2——》TIME_WAIT——》closed</p>\n<p>服务端：established——》close-wait——》last-ack——》closed</p>\n<ul>\n<li>如果客户端 A 认为需要发送的数据已经发送完成，向给服务器 B 发送连接释放的请求</li>\n<li>B 收到释放请求后，会告诉应用层要释放 TCP 连接，然后发送 ACK 包，进入 close-wait 状态，表明 A 到 B 的连接已经释放，不再接收 A 发送的数据。但此时 B 仍然可以发送数据给 A</li>\n<li>B 如果此时还有没发送完的数据继续发送，数据发送完毕后，向 A 发送释放连接请求，然后 B 进入 last-ack 状态</li>\n<li>A 收到请求后，向 B 发送确认应答，此时 A 进入 Time-wait 状态。该状态会持续一个最大生命周期，如果该段时间内没有收到来自 B 的重发请求话，就进入 closed 状态，B 接收到 A 发送的确认信号后，进入 closed 状态。</li>\n</ul>\n<blockquote>\n<p>为什么 A 需要等待 2MSL 时间？</p>\n</blockquote>\n<p>为了确保 B 能够收到 A 发送的确认断开的信号，因为如果确认信息由于网络问题一直没有到达，就会导致 B 不能正常关闭。</p>\n<p><strong>拥塞处理</strong></p>\n<ul>\n<li>慢开始、拥塞避免</li>\n<li>快速重传、快速恢复</li>\n</ul>\n<h2 id=\"get请求和post请求\"><a class=\"markdownIt-Anchor\" href=\"#get请求和post请求\">#</a> get 请求和 post 请求</h2>\n<ul>\n<li>get 请求由于 url 长度的限制导致请求参数有长度限制，而 post 请求没有长度限制</li>\n<li>post 请求相对于 get 请求安全些，因为 get 请求参数都展示在 url 上</li>\n<li>post 可以通过 request body 传输更多的数据，而 get 没有这个技术</li>\n<li>post 支持更多的编码类型且不对数据类型限制</li>\n<li>在前端使用接口编写参数的时候，post 对于复杂的请求参数更容易编写</li>\n</ul>\n<h2 id=\"常见状态码\"><a class=\"markdownIt-Anchor\" href=\"#常见状态码\">#</a> 常见状态码</h2>\n<hr>\n<p><strong>2xx  成功</strong></p>\n<ul>\n<li><code>200 ok 表示客户端发送的请求被服务器正常处理</code></li>\n<li>204 no content  表示请求成功，但是响应报文不包含实体的主体部分</li>\n<li>205 reset content  与 204 一样，但是要求请求方重置内容</li>\n<li>206 partial Content   进行范围请求</li>\n</ul>\n<p><strong>3xx 重定向</strong></p>\n<ul>\n<li><code>301 moved  permanently    永久性重定向，表示资源已经被分配到新的url</code></li>\n<li><code>302 found   临时性重定向</code></li>\n<li>303   see other  表示资源存在着另一个 URL，应该使用 get 方法请求资源</li>\n</ul>\n<p><strong>4xx  客户端错误</strong></p>\n<ul>\n<li><code>400 bad request  请求报文存在语法错误</code></li>\n<li><code>401 unauthorized  表示发送的请求需要有HTTP认证的认证信息</code></li>\n<li><code>402  forbidden   请求资源被服务器拒绝</code></li>\n<li><code>404  not found   服务器没有找到请求的资源</code></li>\n</ul>\n<p><strong>5xx  服务器错误</strong></p>\n<ul>\n<li><code>500 internal server error  服务器在执行请求时发生了错误</code></li>\n<li>501 not implemented   服务器不支持当前请求的某个功能</li>\n<li><code>503  service unavailable   服务器此时处于超负载或者正在停机维护，无法处理请求</code></li>\n</ul>\n<h2 id=\"https\"><a class=\"markdownIt-Anchor\" href=\"#https\">#</a> HTTPS</h2>\n<p>HTTPS 还是通过 HTTP 进行信息的传输，但是信息通过 TLS 协议进行了加密。</p>\n<p>TLS 使用了两种加密技术：对称加密和非对称加密。</p>\n<ul>\n<li>\n<p>对称加密指两边具有相同的密钥，两边都知道将密文进行加密解密</p>\n</li>\n<li>\n<p>非对称加密，有公钥和私钥之分，公钥所有人都知道，可以将数据用公钥进行加密，但是数据只能用私钥进行解密，而私钥只有发放公钥的一方知道</p>\n</li>\n<li>\n<p>一般双方确认通信前使用非对称加密方式，一旦双方确认后，为了提高性能，两端使用对称加密的方式进行通信</p>\n</li>\n</ul>\n<blockquote>\n<p>TLS 握手过程</p>\n</blockquote>\n<ol>\n<li>客户端发送一个随机值，需要的协议以及加密方式</li>\n<li>服务端收到这个随机值，自己也产生一个随机值，根据客户端发来的协议和加密方式进行处理，发送自己的证书</li>\n<li>客户端收到这个证书并检验是否有效，通过后会再产生一个随机值，通过服务端证书的公钥加密这个随机值并发送给服务端（如果服务端需要客户端证书，需要携带）</li>\n<li>服务端收到这个加密的随机值使用私钥进行解密，这时候两端都有三个随机值，可以通过这三个随机值通过约定的加密方式生成密钥，后面的通信使用这个密钥进行加密解密</li>\n</ol>\n<blockquote>\n<p>HTTPS 2.0</p>\n</blockquote>\n<p>1.x 中，为了性能考虑，我们常常使用精灵图，将小图内联等方式，主要是因为浏览器限制了同一域名下的请求数量，当页面请求的资源过多时，会造成队头阻塞，一些资源需要等待其它资源请求完毕后才能发起请求。</p>\n<blockquote>\n<p>HTTPS 2.0 改进的地方</p>\n</blockquote>\n<ul>\n<li>二进制传输 ：  文本传输数据 ——》新的编码方式，数据被分割，采用二进制编码方式</li>\n<li>多路复用 ：     两个概念：帧 和 流   帧是最小的数据单位，多个帧组成数据流   多路复用就是在一个 TCP 连接中可以存在多条流，解决了队头阻塞的问题</li>\n<li>Header 压缩 ：  在之前的版本中，使用文本形式传输 headers  且携带 cookie 的情况下，每次都要重复传输大量字节   2.0 中使用了 HPACK 对传输的 header 进行压缩，并在两端维护了索引表，用于记录出现过的 headers，后面传输过程中，就只需要穿记录的 haders 的键名，服务端收到键名后可以找到对应的值</li>\n<li>服务端 PUSH  ：服务端在收到客户端的请求后，主动推送一些其它资源</li>\n</ul>\n<h2 id=\"dns\"><a class=\"markdownIt-Anchor\" href=\"#dns\">#</a> DNS</h2>\n<blockquote>\n<p><strong>将域名解析为 IP 的过程，查询过程主要有：迭代查询和递归查询（比较少用）两种</strong></p>\n</blockquote>\n<p><strong>迭代查询过程</strong>（本地域名服务器向根域名服务器的查询采用迭代查询）</p>\n<ol>\n<li>客户机向本地域名服务器发送 DNS 请求报文（递归查询）</li>\n<li>本地域名服务器收到请求后，查询本地缓存，如果没有记录，以 DNS 客户的身份向根域名服务器发送请求</li>\n<li>根域名服务器收到请求后，判断该域名为.com 域，并将顶级域名服务器 dns.com 的 ip 地址返回给本地域名服务器</li>\n<li>本地域名服务器向顶级域名服务器 dns.com 发送 DNS 请求（迭代查询）</li>\n<li>顶级域名服务器收到请求后，判断该域属于 abc.com 域，因此将对应的授权域名服务器 dns.abc.com 的 IP 地址返回给本地域名服务器</li>\n<li>本地域名服务器向授权域名服务器发送请求</li>\n<li>授权域名服务器收到请求后，将查询结果返回给本地域名服务器</li>\n<li>本地域名服务器将查询结果保存到本地缓存后，同时返回给客户机</li>\n</ol>\n<blockquote>\n<p>总结：客户机 ——》本地域名服务器 ——》根域名服务器 ——》本地域名服务器 ——》顶级域名服务器 ——》本地域名服务器 ——》授权域名服务器 ——》本地域名服务器 ——》主机</p>\n</blockquote>\n<blockquote>\n<p><strong>地址栏输入 URL 到页面加载完成的过程</strong></p>\n</blockquote>\n<ol>\n<li>DNS 查询，返回 IP 地址（DNS 查询 IP 的过程）</li>\n<li>TCP 握手（TCP 握手过程）</li>\n<li>TLS 握手，然后开始正式的数据传输（TLS 握手过程）</li>\n<li>数据进入服务端之前，可能会经过负责负载均衡的服务器（将请求合理的分发到多台服务器上），假设服务端响应一个 HTML 文件</li>\n<li>首先，浏览器会判断状态码，如果是 200 继续解析，如果是 400（客户端请求数据出现错误）或者 500（浏览器处理请求错误）会报错，如果是 300 的话，会进行重定向，这里会有个重定向计时器，避免多次重定向，超多一定的次数也会报错</li>\n<li>浏览器开始解析 HTML 文件，如果是 gzip 格式还需要先进行解压，通过文件的编码方式得知如何去解压这个文件</li>\n<li>文件解码成功后，开始正式的渲染流程。根据 HTML 构造 DOM 树，根据 CSS 构建 CSSOM 树。如果遇到 script 标签，会检查是否包含 <code>async</code>  和 <code>defer</code> ，前者会并行下载执行 JS，后者会先下载文件，然后等 HTML 解析完成后顺序执行，如果上述两种属性都没有，就会阻塞渲染流程，知道 JS 代码加载完毕，引入外部资源需要下载，如果资源比较多，长时间的下载，会阻塞页面的渲染流程，导致页面长时间没有响应。</li>\n<li>初始的 HTML 被完全加载和解析后会触发 DomContentLoaded 事件</li>\n<li>CSSOM 树和 DOM 树构建完成后开始生成 Render 树，同时计算元素的坐标，确定元素的布局</li>\n<li>在 Render 树的过程中，浏览器开始调用 GPU 绘制，将内容展示在屏幕上</li>\n</ol>\n",
            "tags": [
                "前端知识"
            ]
        },
        {
            "id": "http://csstar.top/2022/03/14/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%8E%AF%E5%A2%83/",
            "url": "http://csstar.top/2022/03/14/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%8E%AF%E5%A2%83/",
            "title": "浏览器环境",
            "date_published": "2022-03-14T02:32:24.000Z",
            "content_html": "<h1 id=\"script元素\"><a class=\"markdownIt-Anchor\" href=\"#script元素\">#</a> script 元素</h1>\n<h2 id=\"工作原理\"><a class=\"markdownIt-Anchor\" href=\"#工作原理\">#</a> 工作原理</h2>\n<ol>\n<li>浏览器一边下载 HTML 网页，一边开始解析，而不是等下载完后才可以解析</li>\n<li>解析的过程中，如果发现 script 元素，就会停止解析，渲染引擎将控制权转交给 JavaScript 引擎</li>\n<li>如果 script 元素引用了外部脚本，需要先下载外部脚本，如果没有引入，直接执行 script 元素内代码</li>\n<li>JavaScript 引擎执行完毕后，将控制权还给渲染引擎，然后继续向下解析 HTML 网页</li>\n</ol>\n<blockquote>\n<ul>\n<li>\n<p>为什么需要外部脚本下载完毕后才能渲染页面？  因为外部脚本可以修改 DOM，所以必须将控制权交给它，否则就很难控制</p>\n</li>\n<li>\n<p>加载外部脚本的时候，由于渲染引擎已经停止，如果这个外部文件加载需要很长时间，那么浏览器就会一直等，导致页面长时间没有响应，造成一种假死的状态，这被称为 “阻塞效应”</p>\n</li>\n<li>\n<p>重要的脚本最好放在文件头部，或者直接写入 script 标签，对于不重要的脚本可以放到页面底部，等页面渲染完后才执行，这样能缩短加载时间，避免浏览器首屏加载慢等情况</p>\n</li>\n<li>\n<p>当脚本文件位置不恰当时，还会产生一个问题：当页面 DOM 元素还没生成之前就进行 DOM 操作，代码执行肯定会报错，对于这种情况我们可以使用 DOMContentLoaded 事件的回调函数。DOM 结构生成之后才会触发，也可以使用 script 标签的 onload 属性。</p>\n</li>\n</ul>\n</blockquote>\n<h2 id=\"defer属性\"><a class=\"markdownIt-Anchor\" href=\"#defer属性\">#</a> defer 属性</h2>\n<blockquote>\n<p>解决脚本文件下载阻塞网页渲染的问题，使用 defer 属性，可以延迟脚本的执行，等 DOM 加载生成后，再执行脚本。</p>\n</blockquote>\n<p><strong>运行流程</strong></p>\n<ol>\n<li>浏览器开始解析 HTML 网页</li>\n<li>解析过程中，发现带有 defer 属性的 script 标签</li>\n<li>浏览器继续向下解析 HTML 网页，同时下载 script 标签加载的外部脚本</li>\n<li>浏览器完成解析 HTML 网页，返回去执行已经下载完成的脚本</li>\n</ol>\n<p><strong>注意</strong></p>\n<ol>\n<li>对于内置而不是外部加载的脚本，以及动态生成的 script 标签，defer 属性不起作用</li>\n<li>使用  <code>defer</code>  加载的外部脚本不应该使用 document.write 方法</li>\n</ol>\n<h2 id=\"async属性\"><a class=\"markdownIt-Anchor\" href=\"#async属性\">#</a> async 属性</h2>\n<blockquote>\n<p>使用另一个进程下载脚本，下载时不会阻塞页面渲染，解决 “阻塞效应” 的另一个方法</p>\n</blockquote>\n<ol>\n<li>浏览器开始解析 HTML 网页。</li>\n<li>解析过程中，发现带有 <code>async</code>  属性的 <code>script</code>  标签。</li>\n<li>浏览器继续往下解析 HTML 网页，同时并行下载 `` 标签中的外部脚本。</li>\n<li>脚本下载完成，浏览器暂停解析 HTML 网页，开始执行下载的脚本。</li>\n<li>脚本执行完毕，浏览器恢复解析 HTML 网页。</li>\n</ol>\n<blockquote>\n<p><code>async</code>  属性可以保证脚本下载的同时，浏览器继续渲染，一旦采用这个属性，脚本就无法顺序执行，先下载完的脚本先执行。</p>\n<p>脚本之间没有依赖关系，使用 <code>async</code>  属性，有依赖关系使用 <code>defer</code>  属性，同时存在，后者不起作用</p>\n</blockquote>\n<h2 id=\"脚本动态加载\"><a class=\"markdownIt-Anchor\" href=\"#脚本动态加载\">#</a> 脚本动态加载</h2>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"string\">&#x27;a.js&#x27;</span>,<span class=\"string\">&#x27;b.js&#x27;</span>].forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">src</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> script = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;script&#x27;</span>);</span><br><span class=\"line\">    script.src = src;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.head.appendChild(script);</span><br><span class=\"line\">    src.async = <span class=\"literal\">false</span>;  \t<span class=\"comment\">// 保证脚本执行的顺序，同步执行</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>动态加载 <code>script</code>  标签的好处就是不会阻止页面渲染，也不会造成浏览器假死。</p>\n</blockquote>\n<h2 id=\"加载脚本使用的协议\"><a class=\"markdownIt-Anchor\" href=\"#加载脚本使用的协议\">#</a> 加载脚本使用的协议</h2>\n<ul>\n<li>如果不指定协议，浏览器默认使用  <code>HTTP</code>  协议下载</li>\n<li>如果需要使用  <code>HTTPS</code>  协议下载，需要指明</li>\n</ul>\n<h1 id=\"浏览器\"><a class=\"markdownIt-Anchor\" href=\"#浏览器\">#</a> 浏览器</h1>\n<blockquote>\n<p>核心：渲染引擎 和 JavaScript 解释器</p>\n</blockquote>\n<h2 id=\"渲染引擎\"><a class=\"markdownIt-Anchor\" href=\"#渲染引擎\">#</a> 渲染引擎</h2>\n<blockquote>\n<p>将网页代码渲染为用户可见的页面</p>\n</blockquote>\n<p><strong>不同浏览器的渲染引擎</strong></p>\n<ul>\n<li>Firefox：Gecko 引擎</li>\n<li>Safari：WebKit 引擎</li>\n<li>Chrome：Blink 引擎</li>\n<li>IE: Trident 引擎</li>\n<li>Edge: EdgeHTML 引擎</li>\n</ul>\n<p><strong>四个阶段</strong></p>\n<ul>\n<li>解析代码   HTML 解析器解析 HTML 代码为 DOM   CSS 解析器将 CSS 代码解析为 CSS 样式表</li>\n<li>对象合成    将 DOM 和 CSS 样式表进行结合，生成一个个 render 对象，最后构成 render 树</li>\n<li>布局          确定对象的坐标，计算出渲染树的布局</li>\n<li>绘制          将渲染树绘制到屏幕</li>\n</ul>\n<blockquote>\n<p>注：上面四步不是严格按顺序执行的，而是同步交叉执行</p>\n</blockquote>\n<h2 id=\"重流和重绘\"><a class=\"markdownIt-Anchor\" href=\"#重流和重绘\">#</a> 重流和重绘</h2>\n<blockquote>\n<p>渲染树转换为网页布局的过程为重流，布局显示到页面的过程为重绘。</p>\n<ul>\n<li>页面生成以后，脚本和样式的操作都会导致重流和重绘</li>\n<li>重流和重绘并不一定一起发生，重流一定会导致重绘，重绘不一定导致重流，比如改变元素颜色，进行了重绘，但没有改变布局，所以没有进行重流</li>\n<li>浏览器会进行智能优化，将重流和重绘的范围尽可能限制到较小的局部，最小化代价消耗</li>\n</ul>\n</blockquote>\n<p><strong>优化技巧</strong></p>\n<ul>\n<li>读取 DOM 或者写入 DOM，尽量不要写在一起，不要读一个 DOM 节点，就写入一个，这样会导致多次重流，影响页面渲染速度</li>\n<li>缓存 DOM 信息</li>\n<li>不要一项一项地改变 CSS 样式，使用 class 一次性改变样式</li>\n<li>使用  <code>documentFragment</code>  操作 DOM</li>\n<li>动画使用 <code>absolute</code>  定位或者 <code>fixed</code>  定位，减少对其它元素的影响</li>\n<li>只在必要时才显示隐藏元素</li>\n<li>使用 <code>window.requestAnimationFrame()</code> ，因为它可以推迟到代码下一次重流时执行，而不是立即要求页面重流</li>\n<li>使用 <code>虚拟DOM</code></li>\n</ul>\n<h2 id=\"javascript引擎\"><a class=\"markdownIt-Anchor\" href=\"#javascript引擎\">#</a> JavaScript 引擎</h2>\n<blockquote>\n<p>JavaScript 是一种 <code>解释型语言</code> ，也就是说，它不需要编译，由解释器实时运行。</p>\n</blockquote>\n<ul>\n<li>好处：运行和修改比较方便，刷新页面就可以重新解释</li>\n<li>缺点：每次运行都要调用解释器，系统开销大，运行速度慢于编译型语言</li>\n</ul>\n<p>现在的浏览器都将 JavaScript 进行一定的编译，生成类似于 <code>字节码</code> 的中间代码，以提高运行速度</p>\n<p>早期，浏览器内部对 JavaScript 处理过程如下：</p>\n<ol>\n<li>读取代码，进行词法分析（Lexical analysis），将代码分解成词元（token）。</li>\n<li>对词元进行语法分析（parsing），将代码整理成 “语法树”（syntax tree）。</li>\n<li>使用 “翻译器”（translator），将代码转为字节码（bytecode）。</li>\n<li>使用 “字节码解释器”（bytecode interpreter），将字节码转为机器码。</li>\n</ol>\n<blockquote>\n<p>参考链接：<span class=\"exturl\" data-url=\"aHR0cDovL2phdmFzY3JpcHQucnVhbnlpZmVuZy5jb20vYm9tL2VuZ2luZS5odG1s\">http://javascript.ruanyifeng.com/bom/engine.html</span></p>\n</blockquote>\n",
            "tags": [
                "前端知识"
            ]
        },
        {
            "id": "http://csstar.top/2022/03/13/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E8%AE%B0%E5%BD%951/",
            "url": "http://csstar.top/2022/03/13/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E8%AE%B0%E5%BD%951/",
            "title": "前端知识点汇总（一）",
            "date_published": "2022-03-13T09:41:01.000Z",
            "content_html": "<h1 id=\"前端知识点汇总一\"><a class=\"markdownIt-Anchor\" href=\"#前端知识点汇总一\">#</a> 前端知识点汇总（一）</h1>\n<h2 id=\"vue\"><a class=\"markdownIt-Anchor\" href=\"#vue\">#</a> Vue</h2>\n<blockquote>\n<p>Vue 的优缺点</p>\n</blockquote>\n<ul>\n<li>优点</li>\n</ul>\n<ol>\n<li>渐进式，Vue 全家桶包含了很多组件，可以按需选择，而不是全部使用</li>\n<li>组件化开发，代码可维护性和复用性都大大提高</li>\n<li>虚拟 DOM，相比于传统的浏览器渲染更加高效</li>\n<li>数据双向绑定，响应式数据</li>\n<li>单页面路由（SPA），由于不用频繁切换页面，减小了服务器的压力，同时页面更流畅，增强用户体验</li>\n<li>数据与视图分开，便于前后端分离</li>\n</ol>\n<ul>\n<li>缺点</li>\n</ul>\n<ol>\n<li>单页面不利用 SEO</li>\n<li>首屏加载事件长</li>\n</ol>\n<blockquote>\n<p>MVC 和  MVVM</p>\n</blockquote>\n<p><strong>MVC</strong></p>\n<ul>\n<li>Model： 负责从数据库中取数据</li>\n<li>View：负责视图部分，展示数据</li>\n<li>Controller：用户进行交互</li>\n</ul>\n<p><strong>MVVM</strong></p>\n<ul>\n<li>VM：View-Model  数据双向绑定</li>\n<li>View：数据展示</li>\n<li>Model：取数据的地方</li>\n</ul>\n<blockquote>\n<p>Vue 和 Jquery 的区别</p>\n</blockquote>\n<ul>\n<li>Jquery 直接操作 DOM，而 Vue 不直接操作 DOM，使用虚拟 DOM 对象</li>\n<li>Vue 集成了一些库，大大提高了开发效率</li>\n</ul>\n<blockquote>\n<p>Vue 常用修饰符</p>\n</blockquote>\n<ul>\n<li>.lazy\t\t\t\t\t输入框失去焦点的时候更新 v-model 值</li>\n<li>trim                  v-model 绑定的值会去掉首位空格</li>\n<li>.number           将 v-model 绑定的值转换为数字</li>\n<li>.stop                  阻止事件冒泡</li>\n<li>.capture             事件的捕获</li>\n<li>.once                  事件只触发一次</li>\n<li>.left | .middle | .right      点击鼠标左 | 中 | 右键触发</li>\n<li>.self                       点击事件绑定本身才触发</li>\n</ul>\n<blockquote>\n<p>路由的集中模式</p>\n</blockquote>\n<ul>\n<li>hash 模式：  根据 hash 值的改变进行组件的跳转，而不刷新页面</li>\n<li>history 模式：每进行一次跳转，会记录在 history 中，可以进行页面返回</li>\n<li>abstract 模式： 适用于 Node</li>\n</ul>\n<blockquote>\n<p>Vue 指令</p>\n</blockquote>\n<ul>\n<li>v-show</li>\n<li>v-for</li>\n<li>v-if</li>\n<li>v-else</li>\n<li>v-model</li>\n<li>v-text</li>\n<li>v-html</li>\n<li>v-on</li>\n<li>v-bind</li>\n<li>v-once</li>\n<li>v-cloak</li>\n<li>v-slot</li>\n</ul>\n<blockquote>\n<p>组件之间的传值方式</p>\n</blockquote>\n<ul>\n<li>父组件通过 props 传递给子组件</li>\n<li>子组件通过 $emit 对父组件进行传值</li>\n<li>父与子之间通过 $parent  和  $children 获取实例进行通信</li>\n<li>通过 vuex 进行状态管理</li>\n<li>通过 eventBus 进行跨组件值传递</li>\n<li>$ref 获取实例，进行传值</li>\n<li>路由传参</li>\n<li>localStorage、sessionStorage</li>\n</ul>\n<blockquote>\n<p>v-if 和 v-show 的区别</p>\n</blockquote>\n<ul>\n<li>v-if   通过操作 DOM 来决定元素的显隐，会改变 DOM 树的结构，比较消耗性能，适用于偶尔显隐的情况</li>\n<li>v-show 通过元素的 display 样式来决定显隐，不改变 DOM 树结构，适用于经常显隐的情况</li>\n</ul>\n<blockquote>\n<p>computed 和  watch</p>\n</blockquote>\n<ul>\n<li>computed 依赖多个变量计算出一个变量，且有缓存机制，如果这个变量值不变，可以被复用，不能进行异步操作</li>\n<li>watch 通常监听一个变量的变化，然后做一些事情，可异步操作</li>\n</ul>\n<blockquote>\n<p>Vue 的声明周期</p>\n</blockquote>\n<ul>\n<li>beforeCreate       实例 Vue，没有进行初始化和响应式数据</li>\n<li>created                 已经初始化和响应式数据，可以进行数据访问</li>\n<li>beforeMount         render 调用，虚拟 DOM 生成，没有转换成真实 DOM</li>\n<li>mounted                真实 DOM 挂载完成</li>\n<li>beforeUpdate         数据更新，新的虚拟 DOM 生成</li>\n<li>updated                   新旧虚拟 DOM 进行对比，然后更新</li>\n<li>beforeDestroy         实例销毁前，任然可以访问数据</li>\n<li>destroy                    实例销毁、解绑事件</li>\n<li>activated                  keep-alive  所缓存组件激活时调用</li>\n<li>deactivated               keep-alive 所缓存的组件停止时调用</li>\n<li>errorCaptured           子孙组件的错误捕获，此函数可返回 false 阻止继续向上传播，也就是拦截错误</li>\n</ul>\n<blockquote>\n<p>v-if  和 v-for 的优先级</p>\n</blockquote>\n<p>v-for 的优先级比 v-if 的优先级高，所以尽量不要在一个标签中同时使用，因为每项都 v-for 渲染后再进行显隐判断，做了很多无用功，消耗性能。</p>\n<blockquote>\n<p>vuex  的属性</p>\n</blockquote>\n<ul>\n<li>state                定义初始状态</li>\n<li>getter              从 store 中取数据</li>\n<li>mutation          更新 store 中的状态，只能同步操作</li>\n<li>action                用于提交 mutation，而不能直接更改状态，可异步操作</li>\n<li>module              store 的模块拆分</li>\n</ul>\n<blockquote>\n<p>不需要响应的数据应该怎么处理</p>\n</blockquote>\n<ul>\n<li>将其放在 data 的 return 之外</li>\n<li>通过 Object.freeze 进行数据冻结</li>\n</ul>\n<blockquote>\n<p>watch 有哪些属性</p>\n</blockquote>\n<ul>\n<li>immediate              初次加载时立即执行</li>\n<li>deep                        是否进行深监听</li>\n<li>handler                    监听的回调函数</li>\n</ul>\n<blockquote>\n<p>父子组件生命周期的顺序</p>\n</blockquote>\n<p>父 beforeCreate——》父 created——》父 beforeMount——》子 beforeCreate——》子 created——》子 beforeMount——》子 mounted——》父 mounted</p>\n<blockquote>\n<p>Vue 中为什么对对象劫持，而对于数组进行方法重写</p>\n</blockquote>\n<p>数组的元素一般都是成百上千的，对数组下标进行劫持的话会非常消耗性能。Vue 通过对数组原型上的方法进行一个重写，实现数组的响应式。</p>\n<blockquote>\n<p>Vue 的响应式是如何实现的</p>\n</blockquote>\n<ul>\n<li>观察者模式</li>\n<li>发布订阅模式</li>\n<li>数组没有使用劫持的模式，而是对数组原型上的方法进行一个重写</li>\n<li>劫持 ——》通过 Object.defineProperty 对对象进行递归劫持属性的 get、set</li>\n</ul>\n<blockquote>\n<p>事件流的三个阶段</p>\n</blockquote>\n<ul>\n<li>捕获阶段</li>\n<li>执行目标阶段</li>\n<li>冒泡阶段</li>\n</ul>\n<blockquote>\n<p>事件委托</p>\n</blockquote>\n<p>事件委托是指将子元素的事件绑定给父元素，这样可以减少绑定的次数，同时如果后期新增子元素，也可以共享绑定在父元素上的方法，这个方法可以供子元素共享。事件委托的原理是冒泡，真正触发事件的是子元素，通过 event.target 找到触发事件的对象。</p>\n<ul>\n<li>currentTarget   VS    target\n<ol>\n<li>currentTarget  要求绑定事件的元素一定是触发事件的元素</li>\n<li>target 绑定事件的元素不一定是触发事件的元素</li>\n</ol>\n</li>\n</ul>\n<blockquote>\n<p>为什么不建议使用  index 或者  随机数做 key</p>\n</blockquote>\n<p>使用 index  做 key 的话，如果我们需要在渲染的列表前加一个新的元素，那么该元素就会使整个列表的对应关系和之前的完全不一样，随机数也是如此，比较消耗性能，可以理解为牵一发而动全身。</p>\n<blockquote>\n<p>如果子组件改变 props 里的数据？</p>\n</blockquote>\n<ul>\n<li>如果改变的是基础类型，修改就会报错</li>\n<li>如果改变的是引用类型，那么会同时修改父组件的数据</li>\n</ul>\n<blockquote>\n<p>Vue 的 el 属性和 $mount 优先级</p>\n</blockquote>\n<p>同时存在时，el  &gt;  $mount</p>\n<blockquote>\n<p>获取 data 数据中某一个数据的初始状态</p>\n</blockquote>\n<p>通过  this.$options.data（）.xxxx   获取初始值</p>\n<blockquote>\n<p>计算变量时，methods  和  computed 哪个好</p>\n</blockquote>\n<p>由于 computed 具有缓存机制，对于相同的计算值可以进行复用，更加节省性能</p>\n<blockquote>\n<p>router.push     router.replace   router.go</p>\n</blockquote>\n<ul>\n<li>router.push              跳转，并向 history 中添加记录，可返回上一页面</li>\n<li>router.replace          跳转到指定页面，并且不会保留上一页面记录，无法返回</li>\n<li>router.go                  如果为正数，向后跳转，如果为负数，向前跳转</li>\n</ul>\n<blockquote>\n<p>附参考链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvcnFvWjVLV3FUXzFRQXg5MWJKTWVJZw==\">https://mp.weixin.qq.com/s/rqoZ5KWqT_1QAx91bJMeIg</span></p>\n</blockquote>\n",
            "tags": [
                "前端知识"
            ]
        }
    ]
}