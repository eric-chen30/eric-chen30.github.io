<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>CsStar • Posts by &#34;前端知识&#34; tag</title>
        <link>http://csstar.top</link>
        <description>Work Hard To Be A Better Man</description>
        <language>zh-CN</language>
        <pubDate>Mon, 28 Mar 2022 14:17:01 +0800</pubDate>
        <lastBuildDate>Mon, 28 Mar 2022 14:17:01 +0800</lastBuildDate>
        <category>Docker</category>
        <category>ES7-11</category>
        <category>Pandas</category>
        <category>快捷操作</category>
        <category>前端学习网站</category>
        <category>前端知识</category>
        <category>计算机网络</category>
        <category>DOM</category>
        <category>计算机组成原理</category>
        <category>设计模式</category>
        <category>浏览器</category>
        <category>ES6</category>
        <item>
            <guid isPermalink="true">http://csstar.top/2022/03/28/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E8%AE%B0%E5%BD%953/</guid>
            <title>前端知识汇总（三）</title>
            <link>http://csstar.top/2022/03/28/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E8%AE%B0%E5%BD%953/</link>
            <category>前端知识</category>
            <pubDate>Mon, 28 Mar 2022 14:17:01 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;前端知识点汇总-三&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#前端知识点汇总-三&#34;&gt;#&lt;/a&gt; 前端知识点汇总 (三)&lt;/h1&gt;
&lt;h2 id=&#34;replace字符串替换&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#replace字符串替换&#34;&gt;#&lt;/a&gt; replace 字符串替换&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;直接使用 replace ()，传入两个字符串，只能替换匹配到的第一个&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;replace ()  +  正则替换&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;split()  +  join()&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;replace() + RegExp&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 使用replace()只能替换匹配的第一个&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; str = &lt;span class=&#34;string&#34;&gt;&amp;#x27;1,2,3&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;str = str.replace(&lt;span class=&#34;string&#34;&gt;&amp;#x27;,&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;#x27; &amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;console&lt;/span&gt;.log(str)   &lt;span class=&#34;comment&#34;&gt;// 1 2,3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 使用replace() + 正则替换&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 注意：replace的第一个参数就是正则，如果加了单双引号，就变为字符串，不起作用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; str2 = &lt;span class=&#34;string&#34;&gt;&amp;#x27;1,2,3&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;str2 = str2.replace(&lt;span class=&#34;regexp&#34;&gt;/,/g&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27; &amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;console&lt;/span&gt;.log(str2)   &lt;span class=&#34;comment&#34;&gt;// 1 2 3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// split + join&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; str3 = &lt;span class=&#34;string&#34;&gt;&amp;#x27;1,2,3&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// str3 = str3.split(&amp;#x27;,&amp;#x27;)  // [ &amp;#x27;1&amp;#x27;, &amp;#x27;2&amp;#x27;, &amp;#x27;3&amp;#x27; ]\&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;str3 = str3.split(&lt;span class=&#34;string&#34;&gt;&amp;#x27;,&amp;#x27;&lt;/span&gt;).join(&lt;span class=&#34;string&#34;&gt;&amp;#x27; &amp;#x27;&lt;/span&gt;)   &lt;span class=&#34;comment&#34;&gt;// 1 2 3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;console&lt;/span&gt;.log(str3)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 使用replace + RegExp&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// RegExp 的两个参数分别为  要替换的字符，匹配模式及&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; str4 = &lt;span class=&#34;string&#34;&gt;&amp;#x27;1,2,3&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;str4 = str4.replace(&lt;span class=&#34;built_in&#34;&gt;RegExp&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;,&amp;quot;&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;quot;g&amp;quot;&lt;/span&gt;), &lt;span class=&#34;string&#34;&gt;&amp;#x27; &amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;console&lt;/span&gt;.log(str4)  &lt;span class=&#34;comment&#34;&gt;// 1 2 3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// replaceAll  第一个参数必须为正则表达式，第二个参数为替换的新字符串&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 没有用，直接被弃用，完全可以使用replace替换它&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;内存泄漏&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#内存泄漏&#34;&gt;#&lt;/a&gt; 内存泄漏&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;定义：一个应用或程序，由于某些原因导致本应该回收的内存没有被操作系统或空闲内存池回收&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;JavaScript 是垃圾回收语言之一，通过定期检查事先被分配的内存块是否还可以被其它部分访问到，来确定是否对内存块进行回收处理。简单说就是，如果已经被分配的内存块还需要被引用或被访问到，那么就不进行回收&lt;/li&gt;
&lt;li&gt;导致内存泄漏的主要原因可以归结于 “不必要的引用”&lt;/li&gt;
&lt;li&gt;大多数垃圾回收语言使用 ``Mark-and-Sweep` 算法
&lt;ul&gt;
&lt;li&gt;垃圾回收器建立一个根节点的列表&lt;/li&gt;
&lt;li&gt;所有的根节点被检查并且标记为活跃，子节点被递归检查，从根节点可达的节点视为非垃圾节点&lt;/li&gt;
&lt;li&gt;所有没有被标记为活跃的内存块可以被认为是垃圾，被垃圾回收器进行回收&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;常见的 JavaScript 内存泄漏&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;意外的全局变量&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;foo&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    bar = &lt;span class=&#34;string&#34;&gt;&amp;quot;this is an explicit global variable&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 相当于 window.bar = &amp;quot;this is an explicit global variable&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 另外一种全局变量被创建的方式是通过this&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;foo1&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.variable = &lt;span class=&#34;string&#34;&gt;&amp;quot;this is an explicit global variable&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 这个this相当于window对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 为了防止这种错误的发生，可以在JavaScript文件的最前面添加`use strict`开启更严格模式，阻止意外全局&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;对于全局变量，需要谨慎使用。如果必须	用全局变量来存储大量数据，使用完之后确保对其进行清零或重新赋值，否则会造成大量的内存消耗。此外，对于缓存的大小也需要有所限制&lt;/strong&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;被遗忘的计时器或者回调&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; someSource = getData()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;built_in&#34;&gt;setInterval&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; node = &lt;span class=&#34;built_in&#34;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&#34;string&#34;&gt;&amp;#x27;Node&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(node) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          &lt;span class=&#34;comment&#34;&gt;// Do stuff with node and someResource.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          node.innerHTML = &lt;span class=&#34;built_in&#34;&gt;JSON&lt;/span&gt;.stringify(someResource));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;          &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &amp;#125;,&lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;node 对象可能再后面没有引用，需要被移除，但是由于间隔函数仍然是活跃的，因此 node 对象使用玩后不能被即使回收，间隔处理不能回收，则它的相关引用也不能回收，如果引用存储大量数据，那么影响很大&lt;/strong&gt;&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;超出 DOM 引用（储存 DOM 节点到数据结构中）&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; elements = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    button: &lt;span class=&#34;built_in&#34;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&#34;string&#34;&gt;&amp;#x27;button&amp;#x27;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    image: &lt;span class=&#34;built_in&#34;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&#34;string&#34;&gt;&amp;#x27;image&amp;#x27;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    text: &lt;span class=&#34;built_in&#34;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&#34;string&#34;&gt;&amp;#x27;text&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;doStuff&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     image.src = &lt;span class=&#34;string&#34;&gt;&amp;#x27;http://some.url/image&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     button.click();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;built_in&#34;&gt;console&lt;/span&gt;.log(text.innerHTML);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;removeButton&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;comment&#34;&gt;// The button is a direct child of body.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;built_in&#34;&gt;document&lt;/span&gt;.body.removeChild(&lt;span class=&#34;built_in&#34;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&#34;string&#34;&gt;&amp;#x27;button&amp;#x27;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;comment&#34;&gt;// At this point, we still have a reference to #button in the global &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;comment&#34;&gt;// elements dictionary. In other words, the button element is still in&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	  &lt;span class=&#34;comment&#34;&gt;// memory and cannot be collected by the GC. &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;当我们需要删除 DOM 节点时，由于全局对象中还存在该对象的引用，因此无法被垃圾系统回收&lt;/strong&gt;&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;闭包（从父级作用域捕获变量的匿名函数）&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 造成内存泄漏的例子&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;window&lt;/span&gt;.onload = &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; el = &lt;span class=&#34;built_in&#34;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&#34;string&#34;&gt;&amp;#x27;id&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    el.onclick = &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;console&lt;/span&gt;.log(el.id)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 解决办法：手动清除 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;window&lt;/span&gt;.onload = &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; el = &lt;span class=&#34;built_in&#34;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&#34;string&#34;&gt;&amp;#x27;id&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    el.onclick = &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;console&lt;/span&gt;.log(el.id)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    el = &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 尽量避免变量的循环赋值和引用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;一个元素绑定多个事件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一个元素绑定多个事件&#34;&gt;#&lt;/a&gt; 一个元素绑定多个事件&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;这个问题涉及到事件处理程序，事件处理程序分为 DOM0、DOM2、DOM3 这三种级别的事件处理程序&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;dom0级事件处理程序&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#dom0级事件处理程序&#34;&gt;#&lt;/a&gt; DOM0 级事件处理程序&lt;/h3&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 第一种是通过 JavaScript代码获取DOM元素，然后将函数赋值给相应的事件属性&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; btn = &lt;span class=&#34;built_in&#34;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&#34;string&#34;&gt;&amp;#x27;btn&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;btn.onclick = &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// do something ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;&amp;lt;!--第二种是直接在html设置对应事件属性的值，值有两种表现形式，一种是执行的函数体，一种是函数名（绝大多数）--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;button&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;onclick&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;alert(&amp;#x27;test&amp;#x27;)&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;button&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;onclick&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;clickFn()&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;&amp;lt;!--然后在script代码中定义该函数并实现--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;如果两种事件处理程序同时存在时，在 JavaScript 中定义的事件处理程序会覆盖掉在 html 标签中定义的事件处理程序&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DOM0 级事件处理程序只支持事件 &lt;code&gt;冒泡阶段&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;一个事件处理程序只能绑定一个函数&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;如果 html 标签中定义了一个函数，同时我们在 js 代码中又通过获取 DOM 对象，绑定了并一个函数，那么 js 中绑定的事件处理程序的优先级高于在 HTML 中定义的事件处理程序&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;dom2级事件处理程序&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#dom2级事件处理程序&#34;&gt;#&lt;/a&gt; DOM2 级事件处理程序&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;DOM2 级别的事件处理程序中，当事件发生在节点时，目标元素的事件处理程序就会触发，而且目标元素的每个祖先节点也会按照事件流的顺序触发对应的事件处理程序。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;在 IE10 一下的版本中，只支持事件冒泡阶段，在 IE11 中同时支持事件捕获和事件冒泡阶段&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// IE10一下的版本添加/删除事件处理程序，只支持事件冒泡阶段&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;element.attachEvent(&lt;span class=&#34;string&#34;&gt;&amp;quot;on&amp;quot;&lt;/span&gt; + eventName, handler)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;element.detachEvent(&lt;span class=&#34;string&#34;&gt;&amp;quot;on&amp;quot;&lt;/span&gt; + eventName, handler)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// IE11以及其他非IE浏览器中，同时支持事件捕获和事件冒泡两个阶段&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 第三个参数为是否支持捕获阶段，默认为false，即默认为冒泡，第三个参数为true时，为捕获&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;addEventListener(eventName,handler,userCapture)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;removeEventListener(eventName,handler,userCapture)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;DOM2级事件处理程序，支持对同一事件绑定多个处理程序&lt;/code&gt; ，但以 IE10 为界限绑定事件的函数不同而已&lt;/li&gt;
&lt;li&gt;删除需要绑定的事件时，不能删除匿名函数，因为添加和删除的必须是同一个函数&lt;/li&gt;
&lt;li&gt;IE 浏览器中，通过 attachEvent 函数为同一个事件添加多个事件处理函数时，会按照添加的相反顺序执行&lt;/li&gt;
&lt;li&gt;在 IE 浏览器中，通过 attachEvent 添加事件处理程序会在全局作用域中运行， &lt;code&gt;this指向全局作用域window&lt;/code&gt; 。而在非 IE 浏览器中使用 addEventListener 函数添加事件处理程序在指定的元素内部执行，因此 &lt;code&gt;this执行绑定的元素&lt;/code&gt; 。&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;针对不同浏览器进行一个兼容的封装函数&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; EventUtil = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    addEventHandler: &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;element, type, handler&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(element.addEventListener)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            element.addEventListener(type, handler)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(element.attachEvent)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            element.attachEvent(&lt;span class=&#34;string&#34;&gt;&amp;quot;on&amp;quot;&lt;/span&gt; + type, handler)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            element[&lt;span class=&#34;string&#34;&gt;&amp;quot;on&amp;quot;&lt;/span&gt; + type] = handler&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    removeEventHandler: &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;element, type, handler&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(element.addEventListener)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            element.removeEventListener(type, handler)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(element.attachEvent)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            element.detachEvent(&lt;span class=&#34;string&#34;&gt;&amp;quot;on&amp;quot;&lt;/span&gt; + type, handler)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            element[&lt;span class=&#34;string&#34;&gt;&amp;quot;on&amp;quot;&lt;/span&gt; + type] = &lt;span class=&#34;literal&#34;&gt;null&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;dom3级事件处理程序&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#dom3级事件处理程序&#34;&gt;#&lt;/a&gt; DOM3 级事件处理程序&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;与 DOM2 级事件处理程序最重要的区别在于 DOM3 级事件处理程序允许自定义事件。自定义事件由 createEvent（“Customer”）函数创建，返回的对象有一个 initCustomerEvent () 函数&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;函数可以接收如下四个参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;type           字符串，触发事件的类型&lt;/li&gt;
&lt;li&gt;bubble       是否可以冒泡&lt;/li&gt;
&lt;li&gt;cancelable  表示事件是否可以取消&lt;/li&gt;
&lt;li&gt;detail            任意值，保存 event 对象中的 detail 属性中&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;创建完自定义事件后，需要通过 &lt;code&gt;dispatchEvent函数&lt;/code&gt; 手动触发，触发自定义事件的元素需要和绑定的自定义事件的元素为同一元素&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;document&lt;/span&gt;.implementation.hasFeature(&lt;span class=&#34;string&#34;&gt;&amp;#x27;CustomEvents&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;#x27;3.0&amp;#x27;&lt;/span&gt;)   &lt;span class=&#34;comment&#34;&gt;// 判断浏览器是否支持DOM3级事件处理程序&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; customEvent&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;(&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;document&lt;/span&gt;.implementation.hasFeature(&lt;span class=&#34;string&#34;&gt;&amp;#x27;CustomEvents&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;#x27;3.0&amp;#x27;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     	&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; detailData = &amp;#123;&lt;span class=&#34;attr&#34;&gt;name&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;king&amp;#x27;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    	customEvent = &lt;span class=&#34;built_in&#34;&gt;document&lt;/span&gt;.createEvent(&lt;span class=&#34;string&#34;&gt;&amp;#x27;customEvent&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    	customEvent.initCustomEvent(&lt;span class=&#34;string&#34;&gt;&amp;#x27;myEvent&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;,&lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;,detailData)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;)()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 监听自定义事件并获取携带参数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;div.addEventListener(&lt;span class=&#34;string&#34;&gt;&amp;#x27;myEvent&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;e&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;console&lt;/span&gt;.log(e.detail)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 触发自定义事件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;btn.addEventListener(&lt;span class=&#34;string&#34;&gt;&amp;#x27;click&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    div.dispatchEvent(customEvent)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;高度塌陷&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#高度塌陷&#34;&gt;#&lt;/a&gt; 高度塌陷&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;父元素不设置高度时，子元素使用了浮动属性，父元素就会发生高度塌陷（高度变为 0）。&lt;/p&gt;
&lt;p&gt;我们也可以这样理解，父元素没有设置高度，那么它的高度就是由子元素内容决定的，而当对子元素使用了浮动后，它脱离了文档流，此时父元素没有内容了，因此产生了高度塌陷。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;如何解决高度塌陷的问题呢？&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;给父元素添加声明 ``overflow：hidden；`，给父元素设置高度&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在浮动元素的下方添加空 div，并给元素声明 ``clear:both;`&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;style&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;text/css&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;css&#34;&gt;	&lt;span class=&#34;selector-class&#34;&gt;.box&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		margin: 200px auto;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		width: 400px;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;css&#34;&gt;		&lt;span class=&#34;selector-tag&#34;&gt;background&lt;/span&gt;: &lt;span class=&#34;selector-id&#34;&gt;#42B983&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;css&#34;&gt;		&lt;span class=&#34;selector-tag&#34;&gt;border&lt;/span&gt;: 3&lt;span class=&#34;selector-tag&#34;&gt;px&lt;/span&gt; &lt;span class=&#34;selector-tag&#34;&gt;solid&lt;/span&gt; &lt;span class=&#34;selector-id&#34;&gt;#000000&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;css&#34;&gt;	&lt;span class=&#34;selector-class&#34;&gt;.chl_box&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		width: 200px;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		height: 200px;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;css&#34;&gt;		&lt;span class=&#34;selector-tag&#34;&gt;background&lt;/span&gt;: &lt;span class=&#34;selector-id&#34;&gt;#00FFFF&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		float: left;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;style&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;box&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;chl_box&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;comment&#34;&gt;&amp;lt;!-- height: 0;overflow: hidden; 为了解决 IE 浏览器的兼容问题 --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;style&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;height: 0;overflow: hidden;clear: both;&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;万能清除浮动法&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;style&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;text/css&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;css&#34;&gt;	&lt;span class=&#34;selector-class&#34;&gt;.box&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		margin: 200px auto;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		width: 400px;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;css&#34;&gt;		&lt;span class=&#34;selector-tag&#34;&gt;background&lt;/span&gt;: &lt;span class=&#34;selector-id&#34;&gt;#42B983&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;css&#34;&gt;		&lt;span class=&#34;selector-tag&#34;&gt;border&lt;/span&gt;: 3&lt;span class=&#34;selector-tag&#34;&gt;px&lt;/span&gt; &lt;span class=&#34;selector-tag&#34;&gt;solid&lt;/span&gt; &lt;span class=&#34;selector-id&#34;&gt;#000000&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;css&#34;&gt;	&lt;span class=&#34;selector-class&#34;&gt;.chl_box&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		width: 200px;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		height: 200px;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;css&#34;&gt;		&lt;span class=&#34;selector-tag&#34;&gt;background&lt;/span&gt;: &lt;span class=&#34;selector-id&#34;&gt;#00FFFF&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		float: left;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;css&#34;&gt;	&lt;span class=&#34;selector-class&#34;&gt;.box&lt;/span&gt;&lt;span class=&#34;selector-pseudo&#34;&gt;::after&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		content: &amp;quot;&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		display: block;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        clear: both;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;css&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;/* height: 0;overflow: hidden; 为了解决 IE 浏览器的兼容问题 */&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; 		height: 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		overflow: hidden;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;css&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;/* visibility:hidden;为了去隐藏content中的内容 */&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		visibility: hidden;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;style&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;box&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;chl_box&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;父元素添加浮动 (会产生新的浮动问题)&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;style&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;text/css&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;css&#34;&gt;	&lt;span class=&#34;selector-class&#34;&gt;.box&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		margin: 200px auto;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		width: 400px;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;css&#34;&gt;		&lt;span class=&#34;selector-tag&#34;&gt;background&lt;/span&gt;: &lt;span class=&#34;selector-id&#34;&gt;#42B983&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;css&#34;&gt;		&lt;span class=&#34;selector-tag&#34;&gt;border&lt;/span&gt;: 3&lt;span class=&#34;selector-tag&#34;&gt;px&lt;/span&gt; &lt;span class=&#34;selector-tag&#34;&gt;solid&lt;/span&gt; &lt;span class=&#34;selector-id&#34;&gt;#000000&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		float: left;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;css&#34;&gt;	&lt;span class=&#34;selector-class&#34;&gt;.chl_box&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		width: 200px;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		height: 200px;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;css&#34;&gt;		&lt;span class=&#34;selector-tag&#34;&gt;background&lt;/span&gt;: &lt;span class=&#34;selector-id&#34;&gt;#00FFFF&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		float: left;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;	&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;style&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;box&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;chl_box&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;参考链接：&lt;a class=&#34;link&#34; href=&#34;https://zhuanlan.zhihu.com/p/162202283&#34;&gt;https://zhuanlan.zhihu.com/p/162202283&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;页面分页加载&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#页面分页加载&#34;&gt;#&lt;/a&gt; 页面分页加载&lt;/h2&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;&amp;lt;!--scroll-view是视图容器组件，用来显示可滚动的视图区域&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;	这里主要实现滚动条到底部进行数据请求刷新  也就是  bindscrolltolower绑定的函数  Loadmore&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;	需要注意的是使用这个函数时，需要设置滚动条的高度，这里设置的是&amp;#123;&amp;#123;conHeight&amp;#125;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;	scroll-top&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;scroll-view&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;scroll-y&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;true&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;style&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;height:&amp;#123;&amp;#123;conHeight&amp;#125;&amp;#125;&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;enable-flex&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;#x27;true&amp;#x27;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;bindscrolltolower&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;Lordmore&amp;quot;&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&lt;span class=&#34;attr&#34;&gt;scroll-top&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;#123;&amp;#123;topNum&amp;#125;&amp;#125;&amp;#x27;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;scroll-view&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;javascript&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//滚动条回到顶部  点击下拉框切换目标就回到顶部&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;javascript&#34;&gt;    goTop: &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;params&#34;&gt;e&lt;/span&gt;) &lt;/span&gt;&amp;#123;  &lt;span class=&#34;comment&#34;&gt;// 一键回到顶部&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;javascript&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.setData(&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;javascript&#34;&gt;            topNum:&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;    &lt;span class=&#34;comment&#34;&gt;// 距离顶部的距离&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;javascript&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;//解决onReachBottom滚动问题&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;javascript&#34;&gt;    Lordmore:&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;javascript&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;this&lt;/span&gt;.onReachBottom()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;javascript&#34;&gt;    onReachBottom: &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;javascript&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// ...logical code&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;图片懒加载&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#图片懒加载&#34;&gt;#&lt;/a&gt; 图片懒加载&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;为了减轻服务器并发请求的压力，优先加载可视区域的内容，其他部分等进入了可视区域再加载，提高用户体验&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;懒加载原理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#懒加载原理&#34;&gt;#&lt;/a&gt; 懒加载原理&lt;/h3&gt;
&lt;p&gt;一张图片对应一个&lt;img&gt;标签，浏览器是否发起图片加载请求是根据&lt;img&gt;的 src 属性，所以实现懒加载的关键就就是，在图片没有进入可视区域时，不给图片的 src 属性赋值，等图片进入可视区域后再进行属性赋值。&lt;/p&gt;
&lt;h3 id=&#34;实现思路&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#实现思路&#34;&gt;#&lt;/a&gt; 实现思路&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;方式一：innerHeight、scrollTop、offSet 三者之间的关系&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;加载 loading 图片&lt;/li&gt;
&lt;li&gt;判断哪些图片需要加载，也就是如何判断图片进入了可视区域&lt;/li&gt;
&lt;li&gt;隐形加载图片&lt;/li&gt;
&lt;li&gt;替换真图片&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;加载 loading 图片&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;imglist&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;img&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;lazy&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;src&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;存放大小较小的伪图片，等待的图片&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;data-src&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;真实图片地址&amp;quot;&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;alt&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;pic&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;判断图片进入可视区域&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;滚动距离：document.body.scrollTop&lt;/li&gt;
&lt;li&gt;浏览器窗口的视口（viewport）高度（以像素为单位）：window.innerHeight&lt;/li&gt;
&lt;li&gt;当前元素距离顶部的距离：HTMLElement.offsetTop&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当 &lt;code&gt;HTMLElement.offsetTop &amp;lt;=  window.innerHeight + document.body.scrollTop&lt;/code&gt;  的时候图片进入可视区域，可以对&lt;img&gt;标签的 data-src 属性进行赋值操作。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 获取所有图片元素&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; images = &lt;span class=&#34;built_in&#34;&gt;document&lt;/span&gt;.getElementByTagName(&lt;span class=&#34;string&#34;&gt;&amp;#x27;img&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 绑定滚动事件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;window&lt;/span&gt;.addEventListener(&lt;span class=&#34;string&#34;&gt;&amp;quot;scroll&amp;quot;&lt;/span&gt;, &lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;e&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ergodic()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;ergodic&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 遍历图片&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; i &lt;span class=&#34;keyword&#34;&gt;of&lt;/span&gt; images) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 判断图片是否进入可视区域&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(i.offsetTop &amp;lt;= &lt;span class=&#34;built_in&#34;&gt;window&lt;/span&gt;.innerHeight + &lt;span class=&#34;built_in&#34;&gt;window&lt;/span&gt;.scrollY)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;// 对可视区域的图片进行加载&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; trueSrc = i.getAttribute(&lt;span class=&#34;string&#34;&gt;&amp;quot;data-src&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            i.setAttribute(&lt;span class=&#34;string&#34;&gt;&amp;quot;src&amp;quot;&lt;/span&gt;,trueSrc)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 没发生滚动也需要加载一次&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ergodic()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;方式二：getBoundingClientRect ().top 为元素相对于窗口的位置，而 window.innerHeight 为当前窗口的高度&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;原理：当元素对于窗口的位置小于当前窗口的高度时，元素位于窗口可视区域内&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;window&lt;/span&gt;.addEventListener(&lt;span class=&#34;string&#34;&gt;&amp;quot;scroll&amp;quot;&lt;/span&gt; (e) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ergodic()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;ergodic&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; i &lt;span class=&#34;keyword&#34;&gt;of&lt;/span&gt; images)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 与上面相比，仅仅是判断的方式不一样&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(i.getBoundingClientRect().top &amp;lt; &lt;span class=&#34;built_in&#34;&gt;window&lt;/span&gt;.innerHeight)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; tureSrc = i.getAttribute(&lt;span class=&#34;string&#34;&gt;&amp;#x27;data-src&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            i.setAttribute(&lt;span class=&#34;string&#34;&gt;&amp;#x27;src&amp;#x27;&lt;/span&gt;, tureSrc)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;方式三：Intersection Observer 观察器接口，浏览器原生提供的构造函数&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;以上两种方式都实现了图片的懒加载效果，但是存在大量的循环和判断，对于图片量大的项目中性能较差，Intersection Observer 方法省掉大量的循环和判断，但是兼容不是太好。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 通过new生成一个该构造函数的实例&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; observer = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; IntersectionObserver(callback);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 实例通过调用observer属性为每一张图片绑定一个观察器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; i &lt;span class=&#34;keyword&#34;&gt;of&lt;/span&gt; images)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    observer.observe(i);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;callback&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;entries&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;console&lt;/span&gt;.log(entries);  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// entries为一个数组，其中有一个 isIntersecting 属性，目标元素在可视区域为ture，否则为false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 我们就是利用该属性判断图片是否在可视区域&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(ket i &lt;span class=&#34;keyword&#34;&gt;of&lt;/span&gt; entries)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(i.isIntersecting)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; img = i.target;   &lt;span class=&#34;comment&#34;&gt;// target事件属性返回触发事件的元素&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; tureSrc = img.getAttribute(&lt;span class=&#34;string&#34;&gt;&amp;quot;data-src&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            img.setAttribute(&lt;span class=&#34;string&#34;&gt;&amp;quot;src&amp;quot;&lt;/span&gt;,trueSrc)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;// 如果图片来回滚动会出现一会可见、一会不可见的状态，都会触发函数，所以对于已加载的图片，停止观察&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            observer.unobserve(img);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;正则的简单用法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#正则的简单用法&#34;&gt;#&lt;/a&gt; 正则的简单用法&lt;/h2&gt;
&lt;p&gt;主要作用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;测试字符串是否是有效的数据&lt;/li&gt;
&lt;li&gt;替换指定的字符串&lt;/li&gt;
&lt;li&gt;输入数据中查找指定的字符串&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;创建&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; re = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;RegExp&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;re = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;RegExp&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;)   		&lt;span class=&#34;comment&#34;&gt;// 匹配英文字母a&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;re = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;RegExp&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;quot;i&amp;quot;&lt;/span&gt;)	&lt;span class=&#34;comment&#34;&gt;// 不区分大小写匹配英文字母A，a&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// RegExp 构造函数第一个参数为正则表达式的文本内容，第二个参数是匹配模式  g全局匹配 i不区分大小写  m多行查找&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; result1 = re.test(str)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; result2 = re.exec(str)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;方法和属性&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;test   匹配正则表达式，返回值为 Boolean 值，检验功能&lt;/li&gt;
&lt;li&gt;exec   用正则表达式模式在字符串中进行查找，并且返回查找结果的数组&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;css3新特性&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#css3新特性&#34;&gt;#&lt;/a&gt; CSS3 新特性&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;新的选择器&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;E:nth-child(n)&lt;/code&gt;  选择器匹配其父元素的第 n 个子元素，不论元素类型，n 可以使数字，关键字，或公式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;E:nth-of-type(n)&lt;/code&gt;  选择与之其匹配的父元素的第 N 个子元素&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;E:frist-child&lt;/code&gt;  相对于父级做参考，“所有” 子元素的第一个子元素，并且 “位置” 要对应&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;E:frist-of-type&lt;/code&gt;  相对于父级做参考，“特定类型”（E）的第一个子元素&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;E:empty&lt;/code&gt;  选择没有子元素的每个 E 元素&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;E:target&lt;/code&gt;  选择当前活动的 E 元素&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;::selection&lt;/code&gt;  选择被用户选取的元素部分&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;属性选择器&lt;/p&gt;
&lt;p&gt;&lt;code&gt;E[abc*=&amp;quot;def&amp;quot;]&lt;/code&gt;  选择 adc 属性值中包含子串 &amp;quot;def&amp;quot; 的所有元素&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;strong&gt;文本&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;text-shadow:2px 2px 8px #000;&lt;/code&gt;  参数 1 为向右的偏移量，参数 2 为向左的偏移量，参数 3 为渐变的像素，参数 4 为渐变的颜色&lt;/li&gt;
&lt;li&gt;&lt;code&gt;text-overflow&lt;/code&gt; ：规定当文本溢出包含元素时发生的事情 text-overflow:ellipsis (省略)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;text-wrap&lt;/code&gt; ：规定文本换行的规则&lt;/li&gt;
&lt;li&gt;&lt;code&gt;word-break&lt;/code&gt;  规定非中日韩文本的换行规则&lt;/li&gt;
&lt;li&gt;&lt;code&gt;word-wrap&lt;/code&gt; ：对长的不可分割的单词进行分割并换行到下一行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;white-space&lt;/code&gt; ：规定如何处理元素中的空白 white-space:nowrap 规定段落中的文本不进行换行&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;&lt;strong&gt;边框&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;border-raduis&lt;/code&gt;  边框的圆角&lt;/li&gt;
&lt;li&gt;&lt;code&gt;border-image&lt;/code&gt;  边框图片&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;&lt;strong&gt;背景&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;rgba&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;backgrounnd-size:cover/contain&lt;/code&gt; ，其中 background-size：cover，会使 “最大” 边进行缩放，另一边同比缩放，铺满容器，超出部分会溢出。background-size:contain，会使 “最小” 边进行缩放，另一边同比缩放，不一定铺满容器，会完整显示图片&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;&lt;strong&gt;渐变&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;linear-gradient&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;radial-gradient&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;&lt;strong&gt;多列布局&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;column-count&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;column-width&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;column-gap&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;column-rule&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;7&#34;&gt;
&lt;li&gt;&lt;strong&gt;过渡&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;transition&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;transition-property:width&lt;/code&gt;  //property 为定义过渡的 css 属性列表，列表以逗号分隔&lt;/li&gt;
&lt;li&gt;&lt;code&gt;transition-duration:2s;&lt;/code&gt;  // 过渡持续的时间&lt;/li&gt;
&lt;li&gt;&lt;code&gt;transition-timing-function:ease;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;transition-delay:5s&lt;/code&gt;  // 过渡延迟 5s 进行&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;8&#34;&gt;
&lt;li&gt;&lt;strong&gt;动画、旋转&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;animation&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;transform ：translate（x,y) rotate(deg) scale(x,y)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;translate&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;scale&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rotate&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;skew&lt;/code&gt; （倾斜）&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;9&#34;&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;flex 布局&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;@media 媒体查询&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;对象遍历&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#对象遍历&#34;&gt;#&lt;/a&gt; 对象遍历&lt;/h2&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// for...in 循环遍历对象自身和继承的可枚举属性&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; obj =&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;#x27;0&amp;#x27;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;a&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;#x27;1&amp;#x27;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;b&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;#x27;2&amp;#x27;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;c&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// obj[i]  key-value&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; i &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; obj)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;console&lt;/span&gt;.log(i,&lt;span class=&#34;string&#34;&gt;&amp;#x27;:&amp;#x27;&lt;/span&gt;,obj[i])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// Object.keys()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; obj =&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;#x27;0&amp;#x27;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;a&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;#x27;1&amp;#x27;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;b&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;#x27;2&amp;#x27;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;c&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 遍历对象的所有键，返回一个数组&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; keys = &lt;span class=&#34;built_in&#34;&gt;Object&lt;/span&gt;.keys(obj)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;console&lt;/span&gt;.log(keys)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 通过forEach 去取出数组中的每一项&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;keys.forEach(&lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;key&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;console&lt;/span&gt;.log(key,obj[key])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// Object.getOwnPropertyNames(obj)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; obj =&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;#x27;0&amp;#x27;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;a&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;#x27;1&amp;#x27;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;b&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;#x27;2&amp;#x27;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;c&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; keys = &lt;span class=&#34;built_in&#34;&gt;Object&lt;/span&gt;.getOwnPropertyNames(obj)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;console&lt;/span&gt;.log(keys)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;keys.forEach(&lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;key&lt;/span&gt;) =&amp;gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;console&lt;/span&gt;.log(key,obj[key])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// Reflect.ownKeys(obj)遍历&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; obj =&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;#x27;0&amp;#x27;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;a&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;#x27;1&amp;#x27;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;b&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;#x27;2&amp;#x27;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;c&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; keys =&lt;span class=&#34;built_in&#34;&gt;Reflect&lt;/span&gt;.ownKeys(obj)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;console&lt;/span&gt;.log(keys)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;keys.forEach(&lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;key&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;console&lt;/span&gt;.log(key,obj[key])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;数组求和&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#数组求和&#34;&gt;#&lt;/a&gt; 数组求和&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;for 循环累加&lt;/li&gt;
&lt;li&gt;使用 reduce () 方法进行求和&lt;/li&gt;
&lt;li&gt;forEach () 进行遍历求和 (对数组中的每一个元素调用一次回调函数)&lt;/li&gt;
&lt;li&gt;eval (执行表达式)&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; arr = [&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;sum&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;arr&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;eval&lt;/span&gt;(arr.join(&lt;span class=&#34;string&#34;&gt;&amp;quot;+&amp;quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;console&lt;/span&gt;.log(sum(arr));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;数组去重&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#数组去重&#34;&gt;#&lt;/a&gt; 数组去重&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;新建一个空数组，然后遍历原数组通过判断把没有出现在新数组中的元素添加进去&lt;/li&gt;
&lt;li&gt;利用键值对&lt;/li&gt;
&lt;li&gt;使用 reduce () 函数&lt;/li&gt;
&lt;li&gt;借助 ES6 的 Set 数据结构&lt;/li&gt;
&lt;li&gt;借助 ES6 的 Map 数据结构&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;字符串处理方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#字符串处理方法&#34;&gt;#&lt;/a&gt; 字符串处理方法&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;replace&lt;/strong&gt;  字符串替换， &lt;code&gt;返回替换后结果&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;split&lt;/strong&gt;     字符串分割，返回一个 &lt;code&gt;字符串数组&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;substring&lt;/strong&gt;   用于提取字符串中介于两个指定下标之间的的字符     &lt;code&gt;返回字串&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;字符串的内容为 start 到 stop-1 除的所有字符，字符串的长度为 stop - start&lt;/li&gt;
&lt;li&gt;如果 start = stop，则返回空字符串，如果 start &amp;gt; stop  那么方法在提取字符串之前会进行交换&lt;/li&gt;
&lt;li&gt;substring 与 substr 不同， &lt;code&gt;sunstring不接收负的参数&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;substr&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;substr（start, length）用于截取从 start 开始指定长度的字符串&lt;/li&gt;
&lt;li&gt;start 参数可以为负数，-1 指字符串的最后一个字符，-2 表示倒数第二个字符&lt;/li&gt;
&lt;li&gt;第二个参数可选，如果不穿第二个参数，就到字符串结尾&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;**concat ()** 用于 &lt;code&gt;数组的合并&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;slice()&lt;/strong&gt; &lt;code&gt;不改变原数组&lt;/code&gt; ，而是返回一个新的数组对象&lt;/p&gt;
&lt;p&gt;**splice ()** 方法会 &lt;code&gt;改变原数组&lt;/code&gt; ，向数组中添加 / 删除项目&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// slice方法返回包含选中元素的新数组，不对原数组产生影响&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; arr = [&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;console&lt;/span&gt;.log(arr.slice(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;))  &lt;span class=&#34;comment&#34;&gt;// [ 2, 3, 4, 5 ]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;console&lt;/span&gt;.log(arr.slice(&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;))   &lt;span class=&#34;comment&#34;&gt;// [ 3, 4, 5 ]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;console&lt;/span&gt;.log(arr.slice(&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;))  &lt;span class=&#34;comment&#34;&gt;// [ 3 ]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;console&lt;/span&gt;.log(arr.slice(&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;))  &lt;span class=&#34;comment&#34;&gt;// [ 3, 4, 5 ]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;console&lt;/span&gt;.log(arr)   &lt;span class=&#34;comment&#34;&gt;// [ 1, 2, 3, 4, 5 ]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * splice(index,count,item1,item2...)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * index：表示从什么位置开始 添加/删除 项目，如果为负数，从末尾开始&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * count：要删除的项目数   如果设置为0 则表示不进行元素删除&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * 后面 item 表示需要添加的元素&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * splice 方法会改变原数组  返回删除的项目&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;let&lt;/span&gt; arr = [&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 从索引为1开始，删除两个元素&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;console&lt;/span&gt;.log(arr.splice(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;))   &lt;span class=&#34;comment&#34;&gt;// [ 2, 3 ]      返回删除的项目 [2,3]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;console&lt;/span&gt;.log(arr)               &lt;span class=&#34;comment&#34;&gt;// [ 1, 4, 5 ] 原数组发生了改变&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 现在就是对[1，4，5]进行操作&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 从索引1开始 删除一个项目  添加3个元素&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;console&lt;/span&gt;.log(arr.splice(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;))  &lt;span class=&#34;comment&#34;&gt;// [ 4 ]  返回删除的元素 4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;console&lt;/span&gt;.log(arr)        &lt;span class=&#34;comment&#34;&gt;// [ 1, 6, 6, 6, 5 ]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;es7-10常用函数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#es7-10常用函数&#34;&gt;#&lt;/a&gt; ES7-10 常用函数&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Arrary.prototype.includes      用于检测数组中是否包含某个元素，返回布尔类型&lt;/li&gt;
&lt;li&gt;Object.values ()                        返回一个给定对象的所有可枚举属性值的数组&lt;/li&gt;
&lt;li&gt;Object.entries ()                       返回一个给定对象自身可遍历属性 [key,value] 的数组&lt;/li&gt;
&lt;li&gt;Object.fromEntries ()               把键值对列表转换为一个对象&lt;/li&gt;
&lt;li&gt;Object.getOwnPropertyDescriptors ()             该方法返回指定对象所有自身属性的描述对象&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; object1 = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  a: &lt;span class=&#34;string&#34;&gt;&amp;#x27;somestring&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  b: &lt;span class=&#34;number&#34;&gt;42&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; [key, value] &lt;span class=&#34;keyword&#34;&gt;of&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;Object&lt;/span&gt;.entries(object1)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;built_in&#34;&gt;console&lt;/span&gt;.log(&lt;span class=&#34;string&#34;&gt;`&lt;span class=&#34;subst&#34;&gt;$&amp;#123;key&amp;#125;&lt;/span&gt;: &lt;span class=&#34;subst&#34;&gt;$&amp;#123;value&amp;#125;&lt;/span&gt;`&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// expected output:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// &amp;quot;a: somestring&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// &amp;quot;b: 42&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//Object.entries()方法返回一个给定对象自身可枚举属性的键值对数组，其排列与使用 for...in 循环遍历该对象时返回的顺序一致（区别在于 for-in 循环还会枚举原型链中的属性）。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 键值对列表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; entries = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;Map&lt;/span&gt;([&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  [&lt;span class=&#34;string&#34;&gt;&amp;#x27;foo&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;bar&amp;#x27;&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  [&lt;span class=&#34;string&#34;&gt;&amp;#x27;baz&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;42&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; obj = &lt;span class=&#34;built_in&#34;&gt;Object&lt;/span&gt;.fromEntries(entries);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;console&lt;/span&gt;.log(obj);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// expected output: Object &amp;#123; foo: &amp;quot;bar&amp;quot;, baz: 42 &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;数组处理方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#数组处理方法&#34;&gt;#&lt;/a&gt; 数组处理方法&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;判断一个变量是数组还是对象&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;使用 &lt;code&gt;typeof&lt;/code&gt;  对数组类型进行判断，返回的结果是 ``object`，不是我们期望的结果。typeof 运算符在判断基本类型的时候很有用，但是对于引用类型，没那么有效。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;instanceof&lt;/code&gt;  运算符通常用于通过原型链来检查某个变量是否为某个类型数据的实例，使用 instanceof 运算符可以判断一个变量是数组还是对象。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; a = [&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;console&lt;/span&gt;.log(a &lt;span class=&#34;keyword&#34;&gt;instanceof&lt;/span&gt; Arrary)	&lt;span class=&#34;comment&#34;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;console&lt;/span&gt;.log(a &lt;span class=&#34;keyword&#34;&gt;instanceof&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;Object&lt;/span&gt;)	&lt;span class=&#34;comment&#34;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; b = &amp;#123;&lt;span class=&#34;attr&#34;&gt;name&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;#x27;king&amp;#x27;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;console&lt;/span&gt;.log(b &lt;span class=&#34;keyword&#34;&gt;instanceof&lt;/span&gt; Arrary)   &lt;span class=&#34;comment&#34;&gt;// false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;console&lt;/span&gt;.log(b &lt;span class=&#34;keyword&#34;&gt;instanceof&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;Object&lt;/span&gt;)   &lt;span class=&#34;comment&#34;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;filter () 函数过滤满足条件的数据  (需要传入一个函数)&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; arr = [&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;arr.filter(&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;x&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; x%&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;)   &lt;span class=&#34;comment&#34;&gt;// 找出数组中所有奇数的数字&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;reduce () 函数累加器处理数组元素&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;reduce () 函数最主要的作用是做累加处理，即接收一个函数作为累加器，将数组中的每一个元素从左到右依次执行累加器，返回最终的处理结果。&lt;/li&gt;
&lt;li&gt;语法：arr.reduce (callback, initialValue);&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;initialValue 用作 callback 的第一个参数值，如果没有设置，则会使用数组的第一个元素值&lt;/li&gt;
&lt;li&gt;callback 会接收 4 个参数（accumulator，currentValue，currentIndex，array）&lt;/li&gt;
&lt;li&gt;accumulator 表示上一次累加器的返回结果，如果设置了 initialValue，则 accumulator = initialValue，否则为数组的第一个值&lt;/li&gt;
&lt;li&gt;currentValue 表示数组正在处理的值&lt;/li&gt;
&lt;li&gt;currentIndex 表示正在处理的索引   设置了 initialValue，currentIndex 从 0 开始，否则从 1 开始&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 使用 reduce 进行数组求和&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; arr = [&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; sum = arr.reduce(&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;accumulator,currentValue&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; accumulator + currentValue;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 统计数组中每个元素出现的次数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; countOccurrences = &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;arr&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; arr.reduce(&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;accumulator,currentValue&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        accumulator[currentValue] ? accumulator[currentValue]++:accumulator[currentValue] = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; accumulator;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;,&amp;#123;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;countOccurrences([&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]);    &lt;span class=&#34;comment&#34;&gt;// &amp;#123;1:2,2:3,3:1,5:1&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;数组遍历&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;原始 &lt;code&gt;for&lt;/code&gt;  循环&lt;/li&gt;
&lt;li&gt;基于 &lt;code&gt;forEach()&lt;/code&gt;  函数的方法&lt;/li&gt;
&lt;li&gt;基于 &lt;code&gt;map()&lt;/code&gt;  函数的方法&lt;/li&gt;
&lt;li&gt;基于 &lt;code&gt;filter()&lt;/code&gt;  函数的方法&lt;/li&gt;
&lt;li&gt;基于 &lt;code&gt;some()&lt;/code&gt;  函数和 &lt;code&gt;every()&lt;/code&gt;  函数的方法&lt;/li&gt;
&lt;li&gt;基于 &lt;code&gt;redece()&lt;/code&gt;  函数的方法&lt;/li&gt;
&lt;li&gt;基于 &lt;code&gt;find()&lt;/code&gt;  函数的方法&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;事件流&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#事件流&#34;&gt;#&lt;/a&gt; 事件流&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;捕获阶段          由外向内&lt;/li&gt;
&lt;li&gt;目标阶段          触发事件流的元素&lt;/li&gt;
&lt;li&gt;冒泡阶段          由内向外&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;对于由外向内的过程，如果元素绑定了捕获类型事件，则会优先于冒泡类型事件先执行。&lt;/li&gt;
&lt;li&gt;在事件捕获阶段，对于元素绑定了冒泡类型事件，会直接跳过，延迟到冒泡阶段才会执行&lt;/li&gt;
&lt;li&gt;在目标阶段，触发目标 i 元素事件，不管是冒泡类型事件还是捕获类型事件，都会执行&lt;/li&gt;
&lt;li&gt;在事件冒泡阶段，对于捕获类型的事件，直接跳过，不执行&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;事件委托&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#事件委托&#34;&gt;#&lt;/a&gt; 事件委托&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;当许多相同子元素需要绑定相同事件时，单独给每个子元素绑定事件不仅麻烦，而且会造成资源浪费，同时对于新增新元素无法进行有效处理，此时我们可以将这些子元素统一交给父元素来管理。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;事件处理程序过多会导致页面交互时间过长&lt;/li&gt;
&lt;li&gt;时间处理程序过多导致内存占用过多&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;事件委托利用 &lt;code&gt;事件冒泡&lt;/code&gt; 原理，利用父元素来代表子元素的某一类型事件的处理方式。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;主要有以下两种情况：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于已有元素的事件绑定&lt;/li&gt;
&lt;li&gt;对于新创建元素的事件绑定&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 1.获取父元素&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; parent = &lt;span class=&#34;built_in&#34;&gt;document&lt;/span&gt;.querySelector(&lt;span class=&#34;string&#34;&gt;&amp;#x27;ul&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// 2.父元素绑定事件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;parent.addEventListener(&lt;span class=&#34;string&#34;&gt;&amp;#x27;click&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;event&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 3.获取事件对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; event = EventUtil.getEvent(event);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 4.获取目标元素&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; target = EventUtil.getTarget(event);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;// 5.判断当前事件流所处的元素&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(target.nodeName.toLowerCase() === &lt;span class=&#34;string&#34;&gt;&amp;#x27;li&amp;#x27;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;// 6.与目标元素相同，做相应的处理&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;console&lt;/span&gt;.log(target.innerText);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;常见布局方式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#常见布局方式&#34;&gt;#&lt;/a&gt; 常见布局方式&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;静态布局&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;最为传统的一种布局方式，网页上所有的元素都是使用 &lt;code&gt;px&lt;/code&gt;  为单位进行设定的&lt;/p&gt;
&lt;p&gt;布局特点：不论屏幕大小，页面宽高始终不变，始终维持最初设计的样式大小来显示，常见于传统 PC 布局&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;流式布局&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;布局特点：当屏幕分辨率大小发生变化时，页面里的元素大小会发生变化，但布局不会发生变化&lt;/p&gt;
&lt;p&gt;实现：通常使用 % 百分比来定义宽度，高度大都使用 px 来进行固定，常见于 web 前端开发早期&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;自适应布局&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;自适应布局就是为不同的屏幕定义不同的布局，就是创建多个静态布局，每个静态布局对应一个屏幕分辨率范围&lt;/p&gt;
&lt;p&gt;布局特点：当屏幕大小发生变化时，页面里面的元素的位置会变化而大小不会变化&lt;/p&gt;
&lt;p&gt;实现：使用 @media 媒体查询给不同的尺寸和介质的设备切换不同样式。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;响应式布局&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;响应式设计的目标是确保一个页面在所有终端上（各种尺寸的 PC、手机、平板、智能手表的 Web 浏览器等等）都能显示出令人满意的效果，对 CSS 编写者来说，有多种手法可以去实现，但通常是糅合了流式布局 + 弹性布局，再搭配媒体查询技术使用。&lt;/p&gt;
&lt;p&gt;布局特点：每个屏幕分辨率下面会有一个布局样式，即元素位置和大小都会改变&lt;/p&gt;
&lt;p&gt;实现：媒体查询 + 流式布局&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;弹性布局&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;rem、em 的区别：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;两者都是为了解决不同网页字体大小展示而产生的&lt;/p&gt;
&lt;p&gt;em 是相对其父元素，在实际应用中相对而言使用没那么方便&lt;/p&gt;
&lt;p&gt;rem 则始终相对于 html 大小，相对于页面根元素而言&lt;/p&gt;
&lt;/blockquote&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://csstar.top/2022/03/16/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E8%AE%B0%E5%BD%952/</guid>
            <title>前端知识点汇总(二)</title>
            <link>http://csstar.top/2022/03/16/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E8%AE%B0%E5%BD%952/</link>
            <category>前端知识</category>
            <pubDate>Wed, 16 Mar 2022 23:21:33 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;前端知识点汇总二&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#前端知识点汇总二&#34;&gt;#&lt;/a&gt; 前端知识点汇总 (二)&lt;/h1&gt;
&lt;h2 id=&#34;vuex属性&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#vuex属性&#34;&gt;#&lt;/a&gt; &lt;strong&gt;Vuex 属性&lt;/strong&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;state             state 是存储的单一状态，是存储的基本数据&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Getters         getters 是 store 的计算属性，对 state 的加工，是派生出来的数据（跟 computed 计算属性一样）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Mutations      更改 Vuex 的 store 中状态的唯一方法就是提交 mutaions&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Actions         Actions 提交的是 mutation，而不是直接变更状态，可包含异步操作&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Moudle         Module 是 store 分割的模块，每个模块拥有自己的 state、getters、mutations、actions&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;辅助函数       mapState、MapGetters、MapActions、mapMutations 等辅助函数&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;首页白屏问题&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#首页白屏问题&#34;&gt;#&lt;/a&gt; &lt;strong&gt;首页白屏问题&lt;/strong&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;路由懒加载&lt;/li&gt;
&lt;li&gt;cdn 加速&lt;/li&gt;
&lt;li&gt;开启 vue 服务渲染模式&lt;/li&gt;
&lt;li&gt;用 webpack 的 externals 属性将不需要打包的库文件分离出去，减少打包后文件的大小&lt;/li&gt;
&lt;li&gt;生产环境中删除掉不必要的 console.log&lt;/li&gt;
&lt;li&gt;vue-cli 开启打包压缩 和 后台配合 gzip 访问&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;进程和线程&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#进程和线程&#34;&gt;#&lt;/a&gt; &lt;strong&gt;进程和线程&lt;/strong&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;进程&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;系统进行资源调度和分配的基本单位&lt;/li&gt;
&lt;li&gt;进程是线程的容器&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;线程&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;操作系统能够运算调度的最小单位&lt;/li&gt;
&lt;li&gt;包含在进程之间，进程运行的单位&lt;/li&gt;
&lt;li&gt;一个进程中可以有许多线程，这些线程共享进程的变量和资源&lt;/li&gt;
&lt;li&gt;线程与线程之间的资源和变量不共享&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;进程通信&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#进程通信&#34;&gt;#&lt;/a&gt; &lt;strong&gt;进程通信&lt;/strong&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;管道&lt;/li&gt;
&lt;li&gt;有名管道&lt;/li&gt;
&lt;li&gt;信号量&lt;/li&gt;
&lt;li&gt;消息队列&lt;/li&gt;
&lt;li&gt;信号&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;选择器的权重&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#选择器的权重&#34;&gt;#&lt;/a&gt; &lt;strong&gt;选择器的权重&lt;/strong&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;通配选择器的权重为 0     &lt;code&gt;*&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;类型选择器和伪元素选择器的权重为 1     &lt;code&gt;div&lt;/code&gt;   &lt;code&gt;:before&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;类选择器、伪类选择器、属性选择器权重为 10    &lt;code&gt;class&lt;/code&gt;    &lt;code&gt;:hover&lt;/code&gt;    &lt;code&gt;[&#39;attr=#&#39;]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;id 选择器权重为 100         &lt;code&gt;id&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;内联样式权重为 1000      &lt;code&gt;&amp;lt;div style=&amp;quot;color: red&amp;quot;&amp;gt;内联样式的权重为1000&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;！important 的规则权重为 10000&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;宏任务和微任务&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#宏任务和微任务&#34;&gt;#&lt;/a&gt; &lt;strong&gt;宏任务和微任务&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;微任务&lt;/strong&gt;： process.nextTick ， promise ， Object.observe ， MutationObserver&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;宏任务&lt;/strong&gt;： script ， setTimeout ， setInterval ， setImmediate ， I/O ， UI rendering&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;] 误区：并不是微任务快于宏任务，因为宏任务中包含了 script ，浏览器会	执行一个宏任务，接下来如果有异步代码就先执行微任务。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Event Loop 的顺序&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;执行同步代码，这属于宏任务&lt;/li&gt;
&lt;li&gt;执行栈为空，查询是否有微任务需要执行&lt;/li&gt;
&lt;li&gt;执行所有微任务&lt;/li&gt;
&lt;li&gt;必要的话渲染 UI&lt;/li&gt;
&lt;li&gt;然后开始下一轮 Event Loop，执行宏任务中的异步代码&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;其它&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#其它&#34;&gt;#&lt;/a&gt; &lt;strong&gt;其它&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Vue2.0 的数据响应是采用数据劫持结合发布者 - 订阅者模式的方式，通过&lt;strong&gt; Object.defineProperty ()&lt;/strong&gt; 来劫持各个属性的 setter、getter&lt;/p&gt;
&lt;p&gt;vue3.0 实现数据双向绑定是通过&lt;strong&gt; Proxy&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;单页面 ——》资源局部刷新				内容改变不需加载整个页面，响应速度快；对服务器的压力小写；前后端分离；&lt;/p&gt;
&lt;p&gt;多页面 ——》页面跳转，整页刷新&lt;/p&gt;
&lt;p&gt;路由跳转，无刷新页面，静态跳转&lt;/p&gt;
&lt;p&gt;location.href = ‘url’  来跳转，刷新了页面&lt;/p&gt;
&lt;p&gt;&lt;code&gt;computer:&lt;/code&gt;  依赖多个值计算计算出一个属性值，并且具有缓存机制，如果没有更新，属性值值可以复用，如果更新，属性值需要重新计算。（同步）&lt;/p&gt;
&lt;p&gt;&lt;code&gt;watch:&lt;/code&gt;  监听一个值的变化，做多件事情。（异步）&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://csstar.top/2022/03/14/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%8E%AF%E5%A2%83/</guid>
            <title>浏览器环境</title>
            <link>http://csstar.top/2022/03/14/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%8E%AF%E5%A2%83/</link>
            <category>前端知识</category>
            <pubDate>Mon, 14 Mar 2022 10:32:24 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;script元素&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#script元素&#34;&gt;#&lt;/a&gt; script 元素&lt;/h1&gt;
&lt;h2 id=&#34;工作原理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#工作原理&#34;&gt;#&lt;/a&gt; 工作原理&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;浏览器一边下载 HTML 网页，一边开始解析，而不是等下载完后才可以解析&lt;/li&gt;
&lt;li&gt;解析的过程中，如果发现 script 元素，就会停止解析，渲染引擎将控制权转交给 JavaScript 引擎&lt;/li&gt;
&lt;li&gt;如果 script 元素引用了外部脚本，需要先下载外部脚本，如果没有引入，直接执行 script 元素内代码&lt;/li&gt;
&lt;li&gt;JavaScript 引擎执行完毕后，将控制权还给渲染引擎，然后继续向下解析 HTML 网页&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;为什么需要外部脚本下载完毕后才能渲染页面？  因为外部脚本可以修改 DOM，所以必须将控制权交给它，否则就很难控制&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;加载外部脚本的时候，由于渲染引擎已经停止，如果这个外部文件加载需要很长时间，那么浏览器就会一直等，导致页面长时间没有响应，造成一种假死的状态，这被称为 “阻塞效应”&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;重要的脚本最好放在文件头部，或者直接写入 script 标签，对于不重要的脚本可以放到页面底部，等页面渲染完后才执行，这样能缩短加载时间，避免浏览器首屏加载慢等情况&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当脚本文件位置不恰当时，还会产生一个问题：当页面 DOM 元素还没生成之前就进行 DOM 操作，代码执行肯定会报错，对于这种情况我们可以使用 DOMContentLoaded 事件的回调函数。DOM 结构生成之后才会触发，也可以使用 script 标签的 onload 属性。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;defer属性&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#defer属性&#34;&gt;#&lt;/a&gt; defer 属性&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;解决脚本文件下载阻塞网页渲染的问题，使用 defer 属性，可以延迟脚本的执行，等 DOM 加载生成后，再执行脚本。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;运行流程&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;浏览器开始解析 HTML 网页&lt;/li&gt;
&lt;li&gt;解析过程中，发现带有 defer 属性的 script 标签&lt;/li&gt;
&lt;li&gt;浏览器继续向下解析 HTML 网页，同时下载 script 标签加载的外部脚本&lt;/li&gt;
&lt;li&gt;浏览器完成解析 HTML 网页，返回去执行已经下载完成的脚本&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;对于内置而不是外部加载的脚本，以及动态生成的 script 标签，defer 属性不起作用&lt;/li&gt;
&lt;li&gt;使用  &lt;code&gt;defer&lt;/code&gt;  加载的外部脚本不应该使用 document.write 方法&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;async属性&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#async属性&#34;&gt;#&lt;/a&gt; async 属性&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;使用另一个进程下载脚本，下载时不会阻塞页面渲染，解决 “阻塞效应” 的另一个方法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;浏览器开始解析 HTML 网页。&lt;/li&gt;
&lt;li&gt;解析过程中，发现带有 &lt;code&gt;async&lt;/code&gt;  属性的 &lt;code&gt;script&lt;/code&gt;  标签。&lt;/li&gt;
&lt;li&gt;浏览器继续往下解析 HTML 网页，同时并行下载 `` 标签中的外部脚本。&lt;/li&gt;
&lt;li&gt;脚本下载完成，浏览器暂停解析 HTML 网页，开始执行下载的脚本。&lt;/li&gt;
&lt;li&gt;脚本执行完毕，浏览器恢复解析 HTML 网页。&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;async&lt;/code&gt;  属性可以保证脚本下载的同时，浏览器继续渲染，一旦采用这个属性，脚本就无法顺序执行，先下载完的脚本先执行。&lt;/p&gt;
&lt;p&gt;脚本之间没有依赖关系，使用 &lt;code&gt;async&lt;/code&gt;  属性，有依赖关系使用 &lt;code&gt;defer&lt;/code&gt;  属性，同时存在，后者不起作用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;脚本动态加载&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#脚本动态加载&#34;&gt;#&lt;/a&gt; 脚本动态加载&lt;/h2&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;[&lt;span class=&#34;string&#34;&gt;&amp;#x27;a.js&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;#x27;b.js&amp;#x27;&lt;/span&gt;].forEach(&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;function&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;src&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;var&lt;/span&gt; script = &lt;span class=&#34;built_in&#34;&gt;document&lt;/span&gt;.createElement(&lt;span class=&#34;string&#34;&gt;&amp;#x27;script&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    script.src = src;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;document&lt;/span&gt;.head.appendChild(script);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    src.async = &lt;span class=&#34;literal&#34;&gt;false&lt;/span&gt;;  	&lt;span class=&#34;comment&#34;&gt;// 保证脚本执行的顺序，同步执行&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;动态加载 &lt;code&gt;script&lt;/code&gt;  标签的好处就是不会阻止页面渲染，也不会造成浏览器假死。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;加载脚本使用的协议&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#加载脚本使用的协议&#34;&gt;#&lt;/a&gt; 加载脚本使用的协议&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;如果不指定协议，浏览器默认使用  &lt;code&gt;HTTP&lt;/code&gt;  协议下载&lt;/li&gt;
&lt;li&gt;如果需要使用  &lt;code&gt;HTTPS&lt;/code&gt;  协议下载，需要指明&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;浏览器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#浏览器&#34;&gt;#&lt;/a&gt; 浏览器&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;核心：渲染引擎 和 JavaScript 解释器&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;渲染引擎&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#渲染引擎&#34;&gt;#&lt;/a&gt; 渲染引擎&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;将网页代码渲染为用户可见的页面&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;不同浏览器的渲染引擎&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Firefox：Gecko 引擎&lt;/li&gt;
&lt;li&gt;Safari：WebKit 引擎&lt;/li&gt;
&lt;li&gt;Chrome：Blink 引擎&lt;/li&gt;
&lt;li&gt;IE: Trident 引擎&lt;/li&gt;
&lt;li&gt;Edge: EdgeHTML 引擎&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;四个阶段&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;解析代码   HTML 解析器解析 HTML 代码为 DOM   CSS 解析器将 CSS 代码解析为 CSS 样式表&lt;/li&gt;
&lt;li&gt;对象合成    将 DOM 和 CSS 样式表进行结合，生成一个个 render 对象，最后构成 render 树&lt;/li&gt;
&lt;li&gt;布局          确定对象的坐标，计算出渲染树的布局&lt;/li&gt;
&lt;li&gt;绘制          将渲染树绘制到屏幕&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;注：上面四步不是严格按顺序执行的，而是同步交叉执行&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;重流和重绘&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#重流和重绘&#34;&gt;#&lt;/a&gt; 重流和重绘&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;渲染树转换为网页布局的过程为重流，布局显示到页面的过程为重绘。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;页面生成以后，脚本和样式的操作都会导致重流和重绘&lt;/li&gt;
&lt;li&gt;重流和重绘并不一定一起发生，重流一定会导致重绘，重绘不一定导致重流，比如改变元素颜色，进行了重绘，但没有改变布局，所以没有进行重流&lt;/li&gt;
&lt;li&gt;浏览器会进行智能优化，将重流和重绘的范围尽可能限制到较小的局部，最小化代价消耗&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;优化技巧&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;读取 DOM 或者写入 DOM，尽量不要写在一起，不要读一个 DOM 节点，就写入一个，这样会导致多次重流，影响页面渲染速度&lt;/li&gt;
&lt;li&gt;缓存 DOM 信息&lt;/li&gt;
&lt;li&gt;不要一项一项地改变 CSS 样式，使用 class 一次性改变样式&lt;/li&gt;
&lt;li&gt;使用  &lt;code&gt;documentFragment&lt;/code&gt;  操作 DOM&lt;/li&gt;
&lt;li&gt;动画使用 &lt;code&gt;absolute&lt;/code&gt;  定位或者 &lt;code&gt;fixed&lt;/code&gt;  定位，减少对其它元素的影响&lt;/li&gt;
&lt;li&gt;只在必要时才显示隐藏元素&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;window.requestAnimationFrame()&lt;/code&gt; ，因为它可以推迟到代码下一次重流时执行，而不是立即要求页面重流&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;虚拟DOM&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;javascript引擎&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#javascript引擎&#34;&gt;#&lt;/a&gt; JavaScript 引擎&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;JavaScript 是一种 &lt;code&gt;解释型语言&lt;/code&gt; ，也就是说，它不需要编译，由解释器实时运行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;好处：运行和修改比较方便，刷新页面就可以重新解释&lt;/li&gt;
&lt;li&gt;缺点：每次运行都要调用解释器，系统开销大，运行速度慢于编译型语言&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;现在的浏览器都将 JavaScript 进行一定的编译，生成类似于 &lt;code&gt;字节码&lt;/code&gt; 的中间代码，以提高运行速度&lt;/p&gt;
&lt;p&gt;早期，浏览器内部对 JavaScript 处理过程如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;读取代码，进行词法分析（Lexical analysis），将代码分解成词元（token）。&lt;/li&gt;
&lt;li&gt;对词元进行语法分析（parsing），将代码整理成 “语法树”（syntax tree）。&lt;/li&gt;
&lt;li&gt;使用 “翻译器”（translator），将代码转为字节码（bytecode）。&lt;/li&gt;
&lt;li&gt;使用 “字节码解释器”（bytecode interpreter），将字节码转为机器码。&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;参考链接：&lt;a class=&#34;link&#34; href=&#34;http://javascript.ruanyifeng.com/bom/engine.html&#34;&gt;http://javascript.ruanyifeng.com/bom/engine.html&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://csstar.top/2022/03/13/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E8%AE%B0%E5%BD%951/</guid>
            <title>前端知识点汇总（一）</title>
            <link>http://csstar.top/2022/03/13/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E8%AE%B0%E5%BD%951/</link>
            <category>前端知识</category>
            <pubDate>Sun, 13 Mar 2022 17:41:01 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;前端知识点汇总一&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#前端知识点汇总一&#34;&gt;#&lt;/a&gt; 前端知识点汇总（一）&lt;/h1&gt;
&lt;h2 id=&#34;vue&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#vue&#34;&gt;#&lt;/a&gt; Vue&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Vue 的优缺点&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;优点&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;渐进式，Vue 全家桶包含了很多组件，可以按需选择，而不是全部使用&lt;/li&gt;
&lt;li&gt;组件化开发，代码可维护性和复用性都大大提高&lt;/li&gt;
&lt;li&gt;虚拟 DOM，相比于传统的浏览器渲染更加高效&lt;/li&gt;
&lt;li&gt;数据双向绑定，响应式数据&lt;/li&gt;
&lt;li&gt;单页面路由（SPA），由于不用频繁切换页面，减小了服务器的压力，同时页面更流畅，增强用户体验&lt;/li&gt;
&lt;li&gt;数据与视图分开，便于前后端分离&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;缺点&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;单页面不利用 SEO&lt;/li&gt;
&lt;li&gt;首屏加载事件长&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;MVC 和  MVVM&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;MVC&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Model： 负责从数据库中取数据&lt;/li&gt;
&lt;li&gt;View：负责视图部分，展示数据&lt;/li&gt;
&lt;li&gt;Controller：用户进行交互&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;MVVM&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;VM：View-Model  数据双向绑定&lt;/li&gt;
&lt;li&gt;View：数据展示&lt;/li&gt;
&lt;li&gt;Model：取数据的地方&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Vue 和 Jquery 的区别&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Jquery 直接操作 DOM，而 Vue 不直接操作 DOM，使用虚拟 DOM 对象&lt;/li&gt;
&lt;li&gt;Vue 集成了一些库，大大提高了开发效率&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Vue 常用修饰符&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;.lazy					输入框失去焦点的时候更新 v-model 值&lt;/li&gt;
&lt;li&gt;trim                  v-model 绑定的值会去掉首位空格&lt;/li&gt;
&lt;li&gt;.number           将 v-model 绑定的值转换为数字&lt;/li&gt;
&lt;li&gt;.stop                  阻止事件冒泡&lt;/li&gt;
&lt;li&gt;.capture             事件的捕获&lt;/li&gt;
&lt;li&gt;.once                  事件只触发一次&lt;/li&gt;
&lt;li&gt;.left | .middle | .right      点击鼠标左 | 中 | 右键触发&lt;/li&gt;
&lt;li&gt;.self                       点击事件绑定本身才触发&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;路由的集中模式&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;hash 模式：  根据 hash 值的改变进行组件的跳转，而不刷新页面&lt;/li&gt;
&lt;li&gt;history 模式：每进行一次跳转，会记录在 history 中，可以进行页面返回&lt;/li&gt;
&lt;li&gt;abstract 模式： 适用于 Node&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Vue 指令&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;v-show&lt;/li&gt;
&lt;li&gt;v-for&lt;/li&gt;
&lt;li&gt;v-if&lt;/li&gt;
&lt;li&gt;v-else&lt;/li&gt;
&lt;li&gt;v-model&lt;/li&gt;
&lt;li&gt;v-text&lt;/li&gt;
&lt;li&gt;v-html&lt;/li&gt;
&lt;li&gt;v-on&lt;/li&gt;
&lt;li&gt;v-bind&lt;/li&gt;
&lt;li&gt;v-once&lt;/li&gt;
&lt;li&gt;v-cloak&lt;/li&gt;
&lt;li&gt;v-slot&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;组件之间的传值方式&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;父组件通过 props 传递给子组件&lt;/li&gt;
&lt;li&gt;子组件通过 $emit 对父组件进行传值&lt;/li&gt;
&lt;li&gt;父与子之间通过 $parent  和  $children 获取实例进行通信&lt;/li&gt;
&lt;li&gt;通过 vuex 进行状态管理&lt;/li&gt;
&lt;li&gt;通过 eventBus 进行跨组件值传递&lt;/li&gt;
&lt;li&gt;$ref 获取实例，进行传值&lt;/li&gt;
&lt;li&gt;路由传参&lt;/li&gt;
&lt;li&gt;localStorage、sessionStorage&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;v-if 和 v-show 的区别&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;v-if   通过操作 DOM 来决定元素的显隐，会改变 DOM 树的结构，比较消耗性能，适用于偶尔显隐的情况&lt;/li&gt;
&lt;li&gt;v-show 通过元素的 display 样式来决定显隐，不改变 DOM 树结构，适用于经常显隐的情况&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;computed 和  watch&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;computed 依赖多个变量计算出一个变量，且有缓存机制，如果这个变量值不变，可以被复用，不能进行异步操作&lt;/li&gt;
&lt;li&gt;watch 通常监听一个变量的变化，然后做一些事情，可异步操作&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Vue 的声明周期&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;beforeCreate       实例 Vue，没有进行初始化和响应式数据&lt;/li&gt;
&lt;li&gt;created                 已经初始化和响应式数据，可以进行数据访问&lt;/li&gt;
&lt;li&gt;beforeMount         render 调用，虚拟 DOM 生成，没有转换成真实 DOM&lt;/li&gt;
&lt;li&gt;mounted                真实 DOM 挂载完成&lt;/li&gt;
&lt;li&gt;beforeUpdate         数据更新，新的虚拟 DOM 生成&lt;/li&gt;
&lt;li&gt;updated                   新旧虚拟 DOM 进行对比，然后更新&lt;/li&gt;
&lt;li&gt;beforeDestroy         实例销毁前，任然可以访问数据&lt;/li&gt;
&lt;li&gt;destroy                    实例销毁、解绑事件&lt;/li&gt;
&lt;li&gt;activated                  keep-alive  所缓存组件激活时调用&lt;/li&gt;
&lt;li&gt;deactivated               keep-alive 所缓存的组件停止时调用&lt;/li&gt;
&lt;li&gt;errorCaptured           子孙组件的错误捕获，此函数可返回 false 阻止继续向上传播，也就是拦截错误&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;v-if  和 v-for 的优先级&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;v-for 的优先级比 v-if 的优先级高，所以尽量不要在一个标签中同时使用，因为每项都 v-for 渲染后再进行显隐判断，做了很多无用功，消耗性能。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;vuex  的属性&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;state                定义初始状态&lt;/li&gt;
&lt;li&gt;getter              从 store 中取数据&lt;/li&gt;
&lt;li&gt;mutation          更新 store 中的状态，只能同步操作&lt;/li&gt;
&lt;li&gt;action                用于提交 mutation，而不能直接更改状态，可异步操作&lt;/li&gt;
&lt;li&gt;module              store 的模块拆分&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;不需要响应的数据应该怎么处理&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;将其放在 data 的 return 之外&lt;/li&gt;
&lt;li&gt;通过 Object.freeze 进行数据冻结&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;watch 有哪些属性&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;immediate              初次加载时立即执行&lt;/li&gt;
&lt;li&gt;deep                        是否进行深监听&lt;/li&gt;
&lt;li&gt;handler                    监听的回调函数&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;父子组件生命周期的顺序&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;父 beforeCreate——》父 created——》父 beforeMount——》子 beforeCreate——》子 created——》子 beforeMount——》子 mounted——》父 mounted&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Vue 中为什么对对象劫持，而对于数组进行方法重写&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;数组的元素一般都是成百上千的，对数组下标进行劫持的话会非常消耗性能。Vue 通过对数组原型上的方法进行一个重写，实现数组的响应式。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Vue 的响应式是如何实现的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;观察者模式&lt;/li&gt;
&lt;li&gt;发布订阅模式&lt;/li&gt;
&lt;li&gt;数组没有使用劫持的模式，而是对数组原型上的方法进行一个重写&lt;/li&gt;
&lt;li&gt;劫持 ——》通过 Object.defineProperty 对对象进行递归劫持属性的 get、set&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;事件流的三个阶段&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;捕获阶段&lt;/li&gt;
&lt;li&gt;执行目标阶段&lt;/li&gt;
&lt;li&gt;冒泡阶段&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;事件委托&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;事件委托是指将子元素的事件绑定给父元素，这样可以减少绑定的次数，同时如果后期新增子元素，也可以共享绑定在父元素上的方法，这个方法可以供子元素共享。事件委托的原理是冒泡，真正触发事件的是子元素，通过 event.target 找到触发事件的对象。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;currentTarget   VS    target
&lt;ol&gt;
&lt;li&gt;currentTarget  要求绑定事件的元素一定是触发事件的元素&lt;/li&gt;
&lt;li&gt;target 绑定事件的元素不一定是触发事件的元素&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;为什么不建议使用  index 或者  随机数做 key&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;使用 index  做 key 的话，如果我们需要在渲染的列表前加一个新的元素，那么该元素就会使整个列表的对应关系和之前的完全不一样，随机数也是如此，比较消耗性能，可以理解为牵一发而动全身。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果子组件改变 props 里的数据？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;如果改变的是基础类型，修改就会报错&lt;/li&gt;
&lt;li&gt;如果改变的是引用类型，那么会同时修改父组件的数据&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Vue 的 el 属性和 $mount 优先级&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;同时存在时，el  &amp;gt;  $mount&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;获取 data 数据中某一个数据的初始状态&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;通过  this.$options.data（）.xxxx   获取初始值&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;计算变量时，methods  和  computed 哪个好&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;由于 computed 具有缓存机制，对于相同的计算值可以进行复用，更加节省性能&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;router.push     router.replace   router.go&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;router.push              跳转，并向 history 中添加记录，可返回上一页面&lt;/li&gt;
&lt;li&gt;router.replace          跳转到指定页面，并且不会保留上一页面记录，无法返回&lt;/li&gt;
&lt;li&gt;router.go                  如果为正数，向后跳转，如果为负数，向前跳转&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;附参考链接：&lt;a class=&#34;link&#34; href=&#34;https://mp.weixin.qq.com/s/rqoZ5KWqT_1QAx91bJMeIg&#34;&gt;https://mp.weixin.qq.com/s/rqoZ5KWqT_1QAx91bJMeIg&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
 ]]></description>
        </item>
    </channel>
</rss>
