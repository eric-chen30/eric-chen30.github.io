{
    "version": "https://jsonfeed.org/version/1",
    "title": "CsStar • All posts by \"浏览器\" tag",
    "description": "Work Hard To Be A Better Man",
    "home_page_url": "http://csstar.top",
    "items": [
        {
            "id": "http://csstar.top/2022/03/14/%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/",
            "url": "http://csstar.top/2022/03/14/%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/",
            "title": "跨域问题",
            "date_published": "2022-03-14T11:51:06.000Z",
            "content_html": "<h1 id=\"跨域问题\"><a class=\"markdownIt-Anchor\" href=\"#跨域问题\">#</a> 跨域问题</h1>\n<blockquote>\n<p>浏览器处于安全考虑，有同源策略。同源意味着 协议、域名、端口必须一致，否则就不同源，如果不同源，Ajax 请求数据就会失败。</p>\n</blockquote>\n<h2 id=\"jsonp\"><a class=\"markdownIt-Anchor\" href=\"#jsonp\">#</a> JSONP</h2>\n<blockquote>\n<p>通过 script 标签指向需要请求数据的地址并提供一个回调函数接收数据</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=<span class=\"string\">&quot;http://domain/api?param1=a&amp;param2=b&amp;callback=jsonp&quot;</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">jsonp</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">    \t<span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>上面这种用法会有一个问题，当需要多次使用 jsonp 接收数据时，就会有函数同名的问题。因此，我们需要封装一个 jsonp 函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 封住的 jsonp（url，jsonpCallback，sucess）</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">jsonp</span>(<span class=\"params\">url,jsonpCallback,sucess</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 构建script元素</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> script = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;script&#x27;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 设置script元素的属性</span></span><br><span class=\"line\">    script.src = url;</span><br><span class=\"line\">    script.async = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    scriipt.type = <span class=\"string\">&quot;text/javascript&quot;</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 回调函数</span></span><br><span class=\"line\">    <span class=\"built_in\">window</span>[jsonpCallback] = functuin(data)&#123;</span><br><span class=\"line\">        sucess &amp;&amp; sucess(data);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.body.appendChild(script);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">jsonp(</span><br><span class=\"line\">\t<span class=\"string\">&quot;http://xxx&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;callback&quot;</span>,</span><br><span class=\"line\">    functuin(value)&#123;</span><br><span class=\"line\">    \t<span class=\"built_in\">console</span>.log(value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p><strong>jsonp 只能支持 get 请求，是很局限的，但是与下面所讲地 CORS 相比，优点在于可以兼容老式浏览器</strong></p>\n<h2 id=\"cors跨域资源共享\"><a class=\"markdownIt-Anchor\" href=\"#cors跨域资源共享\">#</a> CORS— 跨域资源共享</h2>\n<blockquote>\n<p>允许浏览器向跨源的服务器发送 <code>XMLHttpRequest</code>  请求，克服 Ajax 只能同源使用的限制。实现 CORS 的关键是服务器，只要服务器实现了 CORS 接口，就可以实现跨源通信</p>\n</blockquote>\n<h3 id=\"简单请求\"><a class=\"markdownIt-Anchor\" href=\"#简单请求\">#</a> 简单请求</h3>\n<p>对于简单请求，浏览器直接发送 CORS 请求，具体就是在头信息之中添加一个 <code>origin</code>  字段，该字段说明来自于哪个源（协议、域名、端口）</p>\n<ul>\n<li>如果该源不在许可范围内，服务器返回一个正常的 HTTP 响应，浏览器发现响应头中没有 <code>Access-Control-Allow-Origin</code>  字段，就知道请求失败，抛出错误被 <code>XMLHttpRequest</code>  对象的 <code>onerror</code>  回调函数捕获。</li>\n<li>如果该源在许可范围内，服务器会返回响应，并在响应头中添加一些字段信息：</li>\n</ul>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">Access-Control-Allow-Origin</span>: http://api.bob.com\t\t\t// 请求值要么是请求源，要么可以设置为 * ，接收任何域名的请求</span><br><span class=\"line\"><span class=\"attribute\">Access-Control-Allow-Credentials</span>: true\t\t\t\t\t// 是否允许发送cookie，默认cookie不包含在发送请求中，如果需要包含cookie，将该字段设置为true</span><br><span class=\"line\"><span class=\"attribute\">Access-Control-Expose-Headers</span>: FooBar\t\t\t\t\t// 想要拿到其它字段，需要指明</span><br><span class=\"line\"><span class=\"attribute\">Content-Type</span>: text/html; charset=utf-8</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>CORS 请求时， <code>XMLHttpRequest</code>  对象的 <code>getResponseHeader()</code>  方法只能拿到 6 个基本字段： <code>Cache-Control</code> 、 <code>Content-Language</code> 、 <code>Content-Type</code> 、 <code>Expires</code> 、 <code>Last-Modified</code> 、 <code>Pragma</code> 。</p>\n</blockquote>\n<p><strong>withCredentials</strong></p>\n<p>如果要把 cookie 发送到服务器，不仅仅需要把 <code>Access-Control-Allow-Credentials</code>  设置为 true，开发者在 Ajax 请求中还必须打开 <code>withCredentials</code>  属性，通过 <code>xhr.withCredentials = true;</code>  打开。</p>\n<p>否则，即使浏览器同意请求可携带 cookie，浏览器也不会发送。而有时，省略了 <code>withCredentials</code>  属性，浏览器还是会发送 cookie，这时候如果不需要发送 cookie，就设置 <code>xhr.withCredentials:false;</code> 。</p>\n<p>并且如果需要携带 cookie，那么 <code>Acess-Control-Allow-Origin</code>  属性就不能设置为 *，必须指定明确的源。</p>\n<h3 id=\"非简单请求\"><a class=\"markdownIt-Anchor\" href=\"#非简单请求\">#</a> 非简单请求</h3>\n<blockquote>\n<p>包含特殊请求，比如请求方式为 <code>put</code>  或者 <code>delete</code> ，或者 <code>Content-Type</code>  字段的类型为 <code>application/json</code> ，非简单的 CORS 请求在正式通信之前会进行 “预检”，通过返回的响应头信息进行判断。</p>\n</blockquote>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">OPTIONS /cors HTTP/1.1\t\t\t\t\t\t\t\t// 预检请求用的请求方法，用来询问</span><br><span class=\"line\"><span class=\"attribute\">Origin</span>: http://api.bob.com\t\t\t\t\t\t\t// 表示源</span><br><span class=\"line\"><span class=\"attribute\">Access-Control-Request-Method</span>: PUT\t\t\t\t\t// 列出浏览器的CORS请求会用到哪些HTTP方法</span><br><span class=\"line\"><span class=\"attribute\">Access-Control-Request-Headers</span>: X-Custom-Header\t\t// CORS请求额外发送的信息</span><br><span class=\"line\"><span class=\"attribute\">Host</span>: api.alice.com</span><br><span class=\"line\"><span class=\"attribute\">Accept-Language</span>: en-US</span><br><span class=\"line\"><span class=\"attribute\">Connection</span>: keep-alive</span><br><span class=\"line\"><span class=\"attribute\">User-Agent</span>: Mozilla/5.0...</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>预检请求的回应：检查了 <code>Origin</code> 、 <code>Access-Control-Request-Method</code>  和 <code>Access-Control-Request-Headers</code>  字段以后，确认允许跨源请求，就可以做出回应</p>\n</blockquote>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTP/1.1 <span class=\"number\">200</span> OK</span><br><span class=\"line\"><span class=\"attribute\">Date</span>: Mon, 01 Dec 2008 01:15:39 GMT</span><br><span class=\"line\"><span class=\"attribute\">Server</span>: Apache/2.0.61 (Unix)</span><br><span class=\"line\"><span class=\"attribute\">Access-Control-Allow-Origin</span>: http://api.bob.com\t\t\t// 表示该源可以进行数据请求</span><br><span class=\"line\"><span class=\"attribute\">Access-Control-Allow-Methods</span>: GET, POST, PUT\t\t\t// 支持跨域请求的方法</span><br><span class=\"line\"><span class=\"attribute\">Access-Control-Allow-Headers</span>: X-Custom-Header\t\t\t// 服务器支持的浏览器头信息字段</span><br><span class=\"line\"><span class=\"attribute\">Content-Type</span>: text/html; charset=utf-8</span><br><span class=\"line\"><span class=\"attribute\">Content-Encoding</span>: gzip</span><br><span class=\"line\"><span class=\"attribute\">Content-Length</span>: 0</span><br><span class=\"line\"><span class=\"attribute\">Keep-Alive</span>: timeout=2, max=100</span><br><span class=\"line\"><span class=\"attribute\">Connection</span>: Keep-Alive</span><br><span class=\"line\"><span class=\"attribute\">Content-Type</span>: text/plain</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>浏览器正常请求</p>\n</blockquote>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">PUT</span> <span class=\"string\">/cors</span> HTTP/1.1</span><br><span class=\"line\"><span class=\"attribute\">Origin</span>: http://api.bob.com\t\t\t// 浏览器自动添加的</span><br><span class=\"line\"><span class=\"attribute\">Host</span>: api.alice.com</span><br><span class=\"line\"><span class=\"attribute\">X-Custom-Header</span>: value</span><br><span class=\"line\"><span class=\"attribute\">Accept-Language</span>: en-US</span><br><span class=\"line\"><span class=\"attribute\">Connection</span>: keep-alive</span><br><span class=\"line\"><span class=\"attribute\">User-Agent</span>: Mozilla/5.0...</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>正常回应</p>\n</blockquote>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">Access-Control-Allow-Origin</span>: http://api.bob.com\t\t// 必须包含的</span><br><span class=\"line\"><span class=\"attribute\">Content-Type</span>: text/html; charset=utf-8</span><br></pre></td></tr></table></figure>",
            "tags": [
                "浏览器"
            ]
        }
    ]
}