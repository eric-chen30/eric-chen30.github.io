<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://csstar.top</id>
    <title>CsStar • Posts by &#34;计算机网络&#34; tag</title>
    <link href="http://csstar.top" />
    <updated>2022-03-16T15:11:34.000Z</updated>
    <category term="Docker" />
    <category term="ES7-11" />
    <category term="Pandas" />
    <category term="快捷操作" />
    <category term="前端学习网站" />
    <category term="前端知识" />
    <category term="计算机网络" />
    <category term="DOM" />
    <category term="计算机组成原理" />
    <category term="设计模式" />
    <category term="浏览器" />
    <category term="ES6" />
    <entry>
        <id>http://csstar.top/2022/03/16/%E7%BD%91%E7%BB%9C/</id>
        <title>网络</title>
        <link rel="alternate" href="http://csstar.top/2022/03/16/%E7%BD%91%E7%BB%9C/"/>
        <content type="html">&lt;h2 id=&#34;tcp-vs-udp&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#tcp-vs-udp&#34;&gt;#&lt;/a&gt; &lt;strong&gt;TCP vs  UDP&lt;/strong&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;TCP   面向连接的、可靠的、基于字节流的传输层通信协议&lt;/li&gt;
&lt;li&gt;UDP   提供简单不可靠的非连接传输服务，面向报文&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;code&gt;TCP&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;&lt;code&gt;UDP&lt;/code&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;面向连接的，可靠性高&lt;/td&gt;
&lt;td&gt;非连接的，可靠性低&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;基于三次握手，信息有延时，时效性较差&lt;/td&gt;
&lt;td&gt;时效性好，常用于实时传输&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;首部开销 20 字节，如果携带的用户数据较小，则利用率低&lt;/td&gt;
&lt;td&gt;首部开销 8 字节，可以传输更多的用户数据&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;端对端的，有序号机制、确认机制、超时重传机制，确保数据可靠交付&lt;/td&gt;
&lt;td&gt;一对一、一对多、多对一、多对多的交互通信&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;FTP（应用层协议）基于 TCP&lt;/td&gt;
&lt;td&gt;DNS（应用层协议）基于 UDP&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;xss-跨网站指令码&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#xss-跨网站指令码&#34;&gt;#&lt;/a&gt; XSS: 跨网站指令码&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;反射型&lt;/li&gt;
&lt;li&gt;存储型&lt;/li&gt;
&lt;li&gt;DOM-based 型&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如何攻击：通过修改 HTML 节点或者运行 JS 脚本进行攻击&lt;/p&gt;
&lt;p&gt;如何防御：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;最普遍的做法是对输入输出的内容进行转义，对于引号、尖括号、斜杠进行转义。  如果有特定的文本不能进行转义，需要设置黑白名单来进行过滤&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CSP: 内容安全策略     本质上也是建立白名单，规定浏览器只能够执行特定来源的代码   通过设置  &lt;code&gt;HTTP Header中的Content-Security-Policy 来开启CSP&lt;/code&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;只允许加载本站资源&lt;/li&gt;
&lt;li&gt;只允许加载 https 协议的图片&lt;/li&gt;
&lt;li&gt;允许加载任何来源框架&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;csrf跨站请求伪造-是一种挟持用户在已经登录的web应用程序上执行非本意操作的攻击方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#csrf跨站请求伪造-是一种挟持用户在已经登录的web应用程序上执行非本意操作的攻击方法&#34;&gt;#&lt;/a&gt; CSRF：跨站请求伪造    是一种挟持用户在已经登录的 web 应用程序上执行非本意操作的攻击方法&lt;/h2&gt;
&lt;p&gt;如何防御：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;get 请求不对数据进行修改&lt;/li&gt;
&lt;li&gt;不让第三方网站访问到用户的 Cookie                       对 cookie 设置 Samesite 属性，该属性设置 cookie 不随着跨域请求发送&lt;/li&gt;
&lt;li&gt;阻止第三方网站请求接口                                       验证 Referer 来判断请求是否由第三方网站发起的&lt;/li&gt;
&lt;li&gt;请求时附带验证信息，比如验证码或者 Cookie           服务器下发一个随机的 Token，每次用户发送请求的时候，必须携带这个 Token，然后服务器对其进行检验&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;密码安全&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#密码安全&#34;&gt;#&lt;/a&gt; 密码安全&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;加盐：对于密码存储来说，必然是不能明文存储在数据库中，不然一旦数据库泄漏，会对用户造成巨大的损失。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;加盐就是给原密码添加字符串。加盐后的密码再进行一些列的加密算法处理。&lt;/li&gt;
&lt;li&gt;加盐并不能阻止别人盗取账号，只能确保即使数据库泄漏，也不会暴露用户的真实密码&lt;/li&gt;
&lt;li&gt;通常使用验证码增产时延或者限制尝试次数的方式，并且当输入错误时，不能提示密码输入错误，而是提示账号或者密码输入错误&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;三次握手&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#三次握手&#34;&gt;#&lt;/a&gt; 三次握手&lt;/h2&gt;
&lt;p&gt;客户端：closed——》SYN  Send——》established&lt;/p&gt;
&lt;p&gt;服务端：closed——》Listened——》SYN Receive——》established&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;为什么需要三次握手&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果 A 向 B 发送了一个连接请求，由于网络延时原因，这个 A 发送的请求长时间没有被 B 接收，就会触发超时重传机制，重新发送的请求被 B 接收到后，两者顺利建立连接并开始传输信息或者数据，然后连接结束，两者处于 closed 状态。但此时，之前由于网络延时而未到达的请求到达了 B，B 以为 A 又要建立新的连接，便应答了请求，从而处于 established 状态，而此时 A 是 closed 状态，那么服务器就会一直等客户端传输数据，会造成资源浪费。&lt;/p&gt;
&lt;h2 id=&#34;四次挥手&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#四次挥手&#34;&gt;#&lt;/a&gt; 四次挥手&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;断开连接时，两端都需要发送 FIN 和 ACK 信号&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;客户端：established——》FIN-WAIT-1——》FIN-WAIT-2——》TIME_WAIT——》closed&lt;/p&gt;
&lt;p&gt;服务端：established——》close-wait——》last-ack——》closed&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果客户端 A 认为需要发送的数据已经发送完成，向给服务器 B 发送连接释放的请求&lt;/li&gt;
&lt;li&gt;B 收到释放请求后，会告诉应用层要释放 TCP 连接，然后发送 ACK 包，进入 close-wait 状态，表明 A 到 B 的连接已经释放，不再接收 A 发送的数据。但此时 B 仍然可以发送数据给 A&lt;/li&gt;
&lt;li&gt;B 如果此时还有没发送完的数据继续发送，数据发送完毕后，向 A 发送释放连接请求，然后 B 进入 last-ack 状态&lt;/li&gt;
&lt;li&gt;A 收到请求后，向 B 发送确认应答，此时 A 进入 Time-wait 状态。该状态会持续一个最大生命周期，如果该段时间内没有收到来自 B 的重发请求话，就进入 closed 状态，B 接收到 A 发送的确认信号后，进入 closed 状态。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;为什么 A 需要等待 2MSL 时间？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;为了确保 B 能够收到 A 发送的确认断开的信号，因为如果确认信息由于网络问题一直没有到达，就会导致 B 不能正常关闭。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;拥塞处理&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;慢开始、拥塞避免&lt;/li&gt;
&lt;li&gt;快速重传、快速恢复&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;get请求和post请求&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#get请求和post请求&#34;&gt;#&lt;/a&gt; get 请求和 post 请求&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;get 请求由于 url 长度的限制导致请求参数有长度限制，而 post 请求没有长度限制&lt;/li&gt;
&lt;li&gt;post 请求相对于 get 请求安全些，因为 get 请求参数都展示在 url 上&lt;/li&gt;
&lt;li&gt;post 可以通过 request body 传输更多的数据，而 get 没有这个技术&lt;/li&gt;
&lt;li&gt;post 支持更多的编码类型且不对数据类型限制&lt;/li&gt;
&lt;li&gt;在前端使用接口编写参数的时候，post 对于复杂的请求参数更容易编写&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;常见状态码&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#常见状态码&#34;&gt;#&lt;/a&gt; 常见状态码&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;2xx  成功&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;200 ok 表示客户端发送的请求被服务器正常处理&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;204 no content  表示请求成功，但是响应报文不包含实体的主体部分&lt;/li&gt;
&lt;li&gt;205 reset content  与 204 一样，但是要求请求方重置内容&lt;/li&gt;
&lt;li&gt;206 partial Content   进行范围请求&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;3xx 重定向&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;301 moved  permanently    永久性重定向，表示资源已经被分配到新的url&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;302 found   临时性重定向&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;303   see other  表示资源存在着另一个 URL，应该使用 get 方法请求资源&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;4xx  客户端错误&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;400 bad request  请求报文存在语法错误&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;401 unauthorized  表示发送的请求需要有HTTP认证的认证信息&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;402  forbidden   请求资源被服务器拒绝&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;404  not found   服务器没有找到请求的资源&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;5xx  服务器错误&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;500 internal server error  服务器在执行请求时发生了错误&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;501 not implemented   服务器不支持当前请求的某个功能&lt;/li&gt;
&lt;li&gt;&lt;code&gt;503  service unavailable   服务器此时处于超负载或者正在停机维护，无法处理请求&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;https&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#https&#34;&gt;#&lt;/a&gt; HTTPS&lt;/h2&gt;
&lt;p&gt;HTTPS 还是通过 HTTP 进行信息的传输，但是信息通过 TLS 协议进行了加密。&lt;/p&gt;
&lt;p&gt;TLS 使用了两种加密技术：对称加密和非对称加密。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;对称加密指两边具有相同的密钥，两边都知道将密文进行加密解密&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;非对称加密，有公钥和私钥之分，公钥所有人都知道，可以将数据用公钥进行加密，但是数据只能用私钥进行解密，而私钥只有发放公钥的一方知道&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一般双方确认通信前使用非对称加密方式，一旦双方确认后，为了提高性能，两端使用对称加密的方式进行通信&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;TLS 握手过程&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;客户端发送一个随机值，需要的协议以及加密方式&lt;/li&gt;
&lt;li&gt;服务端收到这个随机值，自己也产生一个随机值，根据客户端发来的协议和加密方式进行处理，发送自己的证书&lt;/li&gt;
&lt;li&gt;客户端收到这个证书并检验是否有效，通过后会再产生一个随机值，通过服务端证书的公钥加密这个随机值并发送给服务端（如果服务端需要客户端证书，需要携带）&lt;/li&gt;
&lt;li&gt;服务端收到这个加密的随机值使用私钥进行解密，这时候两端都有三个随机值，可以通过这三个随机值通过约定的加密方式生成密钥，后面的通信使用这个密钥进行加密解密&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;HTTPS 2.0&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;1.x 中，为了性能考虑，我们常常使用精灵图，将小图内联等方式，主要是因为浏览器限制了同一域名下的请求数量，当页面请求的资源过多时，会造成队头阻塞，一些资源需要等待其它资源请求完毕后才能发起请求。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;HTTPS 2.0 改进的地方&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;二进制传输 ：  文本传输数据 ——》新的编码方式，数据被分割，采用二进制编码方式&lt;/li&gt;
&lt;li&gt;多路复用 ：     两个概念：帧 和 流   帧是最小的数据单位，多个帧组成数据流   多路复用就是在一个 TCP 连接中可以存在多条流，解决了队头阻塞的问题&lt;/li&gt;
&lt;li&gt;Header 压缩 ：  在之前的版本中，使用文本形式传输 headers  且携带 cookie 的情况下，每次都要重复传输大量字节   2.0 中使用了 HPACK 对传输的 header 进行压缩，并在两端维护了索引表，用于记录出现过的 headers，后面传输过程中，就只需要穿记录的 haders 的键名，服务端收到键名后可以找到对应的值&lt;/li&gt;
&lt;li&gt;服务端 PUSH  ：服务端在收到客户端的请求后，主动推送一些其它资源&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;dns&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#dns&#34;&gt;#&lt;/a&gt; DNS&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;将域名解析为 IP 的过程，查询过程主要有：迭代查询和递归查询（比较少用）两种&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;迭代查询过程&lt;/strong&gt;（本地域名服务器向根域名服务器的查询采用迭代查询）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;客户机向本地域名服务器发送 DNS 请求报文（递归查询）&lt;/li&gt;
&lt;li&gt;本地域名服务器收到请求后，查询本地缓存，如果没有记录，以 DNS 客户的身份向根域名服务器发送请求&lt;/li&gt;
&lt;li&gt;根域名服务器收到请求后，判断该域名为.com 域，并将顶级域名服务器 dns.com 的 ip 地址返回给本地域名服务器&lt;/li&gt;
&lt;li&gt;本地域名服务器向顶级域名服务器 dns.com 发送 DNS 请求（迭代查询）&lt;/li&gt;
&lt;li&gt;顶级域名服务器收到请求后，判断该域属于 abc.com 域，因此将对应的授权域名服务器 dns.abc.com 的 IP 地址返回给本地域名服务器&lt;/li&gt;
&lt;li&gt;本地域名服务器向授权域名服务器发送请求&lt;/li&gt;
&lt;li&gt;授权域名服务器收到请求后，将查询结果返回给本地域名服务器&lt;/li&gt;
&lt;li&gt;本地域名服务器将查询结果保存到本地缓存后，同时返回给客户机&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;总结：客户机 ——》本地域名服务器 ——》根域名服务器 ——》本地域名服务器 ——》顶级域名服务器 ——》本地域名服务器 ——》授权域名服务器 ——》本地域名服务器 ——》主机&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;地址栏输入 URL 到页面加载完成的过程&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;DNS 查询，返回 IP 地址（DNS 查询 IP 的过程）&lt;/li&gt;
&lt;li&gt;TCP 握手（TCP 握手过程）&lt;/li&gt;
&lt;li&gt;TLS 握手，然后开始正式的数据传输（TLS 握手过程）&lt;/li&gt;
&lt;li&gt;数据进入服务端之前，可能会经过负责负载均衡的服务器（将请求合理的分发到多台服务器上），假设服务端响应一个 HTML 文件&lt;/li&gt;
&lt;li&gt;首先，浏览器会判断状态码，如果是 200 继续解析，如果是 400（客户端请求数据出现错误）或者 500（浏览器处理请求错误）会报错，如果是 300 的话，会进行重定向，这里会有个重定向计时器，避免多次重定向，超多一定的次数也会报错&lt;/li&gt;
&lt;li&gt;浏览器开始解析 HTML 文件，如果是 gzip 格式还需要先进行解压，通过文件的编码方式得知如何去解压这个文件&lt;/li&gt;
&lt;li&gt;文件解码成功后，开始正式的渲染流程。根据 HTML 构造 DOM 树，根据 CSS 构建 CSSOM 树。如果遇到 script 标签，会检查是否包含 &lt;code&gt;async&lt;/code&gt;  和 &lt;code&gt;defer&lt;/code&gt; ，前者会并行下载执行 JS，后者会先下载文件，然后等 HTML 解析完成后顺序执行，如果上述两种属性都没有，就会阻塞渲染流程，知道 JS 代码加载完毕，引入外部资源需要下载，如果资源比较多，长时间的下载，会阻塞页面的渲染流程，导致页面长时间没有响应。&lt;/li&gt;
&lt;li&gt;初始的 HTML 被完全加载和解析后会触发 DomContentLoaded 事件&lt;/li&gt;
&lt;li&gt;CSSOM 树和 DOM 树构建完成后开始生成 Render 树，同时计算元素的坐标，确定元素的布局&lt;/li&gt;
&lt;li&gt;在 Render 树的过程中，浏览器开始调用 GPU 绘制，将内容展示在屏幕上&lt;/li&gt;
&lt;/ol&gt;
</content>
        <category term="计算机网络" />
        <updated>2022-03-16T15:11:34.000Z</updated>
    </entry>
</feed>
